{"version":3,"sources":["../src/app.js"],"names":["app","use","skip","req","res","statusCode","stream","process","stderr","stdout","bodyParser","json","limit","express","static","path","join","__dirname","schemeType","env","HEROKU","options","swaggerDefinition","info","title","version","description","host","FIREBASE_DATABASE_URL","schemes","securityDefinitions","security","jwt","basePath","apis","swaggerSpec","get","setHeader","send","db","logger"],"mappings":";;;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAGA;;;;AACA;;;;AACA;;;;;;AAEA;AAhBA;AAiBA,IAAIA,MAAM,wBAAV;;AAEA;;;AARA;AASAA,IAAIC,GAAJ,CAAQ,sBAAO,KAAP,EAAc;AACpBC,QAAM,cAAUC,GAAV,EAAeC,GAAf,EAAoB;AACxB,WAAOA,IAAIC,UAAJ,GAAiB,GAAxB;AACD,GAHmB,EAGjBC,QAAQC,QAAQC;AAHC,CAAd,CAAR;;AAMAR,IAAIC,GAAJ,CAAQ,sBAAO,KAAP,EAAc;AACpBC,QAAM,cAAUC,GAAV,EAAeC,GAAf,EAAoB;AACxB,WAAOA,IAAIC,UAAJ,IAAkB,GAAzB;AACD,GAHmB,EAGjBC,QAAQC,QAAQE;AAHC,CAAd,CAAR;;AAMA;AACAT,IAAIC,GAAJ,CAAQ,qBAAR;;AAEA;AACAD,IAAIC,GAAJ,CAAQS,qBAAWC,IAAX,CAAgB;AACtBC,SAAQ;AADc,CAAhB,CAAR;;AAIA;AACAZ,IAAIC,GAAJ,CAAQY,kBAAQC,MAAR,CAAeC,eAAKC,IAAL,CAAUC,SAAV,EAAqB,QAArB,EAA+B,QAA/B,CAAf,CAAR;;AAEA;AACAjB,IAAIC,GAAJ,CAAQ,4BAAQc,eAAKC,IAAL,CAAUC,SAAV,EAAqB,QAArB,EAA+B,QAA/B,EAAyC,MAAzC,EAAiD,QAAjD,EAA2D,aAA3D,CAAR,CAAR;;AAEA;AACAjB,IAAIC,GAAJ,CAAQ,4BAAR;;AAEA;AACAD,IAAIC,GAAJ,CAAQ,uBAAR;;AAEA;AACA,IAAMiB,aAAaX,QAAQY,GAAR,CAAYC,MAAZ,GAAqB,OAArB,GAA8B,MAAjD;AACA,IAAMC,UAAU;AACdC,qBAAmB;AACjBC,UAAM;AACJC,aAAO,YADH,EACiB;AACrBC,eAAS,OAFL,EAEc;AAClBC,mBAAa;AAHT,KADW;AAMjBC,UAAMpB,QAAQY,GAAR,CAAYS,qBAAZ,GAAoC,0BAApC,GAAiE,gBANtD;AAOjBC,aAAS,CACPX,UADO,CAPQ;AAUjBY,yBAAqB;AACnB,aAAO;AACL,gBAAQ,QADH;AAEL,gBAAQ,eAFH;AAGL,cAAM;AAHD;AADY,KAVJ;AAiBjBC,cAAU,CAAC;AACTC,WAAK;AADI,KAAD,CAjBO;AAoBjBC,cAAU;AApBO,GADL;AAuBdC,QAAM,CACJ,+BADI;;AAKR;AA5BgB,CAAhB,CA6BA,IAAMC,cAAc,4BAAad,OAAb,CAApB;;AAEA;AACArB,IAAIoC,GAAJ,CAAQ,eAAR,EAAyB,UAACjC,GAAD,EAAMC,GAAN,EAAc;AACrCA,MAAIiC,SAAJ,CAAc,cAAd,EAA8B,kBAA9B;AACAjC,MAAIkC,IAAJ,CAASH,WAAT;AACD,CAHD;;AAKA;AACA,kBAAanC,GAAb,EAAkB,cAAM;AACtBA,MAAIC,GAAJ,CAAQ,MAAR,EAAgB,sBAAOsC,EAAP,EAAWC,gBAAX,CAAhB;AACD,CAFD;;kBAIexC,G","file":"app.js","sourcesContent":["// 3rd party packages\nimport express from 'express'\nimport path from 'path'\nimport bodyParser from 'body-parser'\nimport swaggerJSDoc from 'swagger-jsdoc'\nimport favicon from 'serve-favicon'\nimport compression from 'compression'\nimport helmet from 'helmet'\nimport morgan from 'morgan'\nimport cors from 'cors'\n\n// our files/packages\nimport logger from './lib/logger'\nimport routes from './routes/routes'\nimport initializeDb from './db'\n\n// create express application\nlet app = express()\n\n// initialize morgan http logging\napp.use(morgan('dev', {\n  skip: function (req, res) {\n    return res.statusCode < 400\n  }, stream: process.stderr\n}))\n\napp.use(morgan('dev', {\n  skip: function (req, res) {\n    return res.statusCode >= 400\n  }, stream: process.stdout\n}))\n\n//enable cors\napp.use(cors())\n\n// Enforce http body limit\napp.use(bodyParser.json({\n  limit : '100kb'\n}))\n\n// No view engine, serve client folder (index.html) instead\napp.use(express.static(path.join(__dirname, '../../', 'public')))\n\n// use custom favicon\napp.use(favicon(path.join(__dirname, '../../', 'public', 'docs', 'images', 'favicon.ico')))\n\n// enabling gzip compression of responses: https://github.com/expressjs/compression\napp.use(compression())\n\n// http/https basic security: https://github.com/helmetjs/helmet\napp.use(helmet())\n\n// create swagger configuration: https://github.com/Surnet/swagger-jsdoc\nconst schemeType = process.env.HEROKU ? 'https': 'http'\nconst options = {\n  swaggerDefinition: {\n    info: {\n      title: 'Shockball2', // Title (required)\n      version: '0.1.0', // Version (required)\n      description: 'Fantasy Sports Simulation for Star Wars Combine'\n    },\n    host: process.env.FIREBASE_DATABASE_URL ? 'shockball2.herokuapp.com' : 'localhost:8080',\n    schemes: [\n      schemeType\n    ],\n    securityDefinitions: {\n      'jwt': {\n        'type': 'apiKey',\n        'name': 'Authorization',\n        'in': 'header'\n      }\n    },\n    security: [{\n      jwt: []\n    }],\n    basePath: '/'\n  },\n  apis: [\n    './server/src/routes/routes.js'\n  ]\n}\n\n// Initialize swagger-jsdoc -> returns validated swagger spec in json format\nconst swaggerSpec = swaggerJSDoc(options)\n\n// serve swagger\napp.get('/swagger.json', (req, res) => {\n  res.setHeader('Content-Type', 'application/json')\n  res.send(swaggerSpec)\n})\n\n// connect to db, and ensure it is up before we start our api\ninitializeDb(app, db => {\n  app.use('/api', routes(db, logger))\n})\n\nexport default app\n"]}