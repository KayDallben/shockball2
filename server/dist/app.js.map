{"version":3,"sources":["../src/app.js"],"names":["app","use","skip","req","res","statusCode","stream","process","stderr","stdout","json","limit","static","join","__dirname","schemeType","env","HEROKU","options","swaggerDefinition","info","title","version","description","host","FIREBASE_DATABASE_URL","schemes","securityDefinitions","security","jwt","basePath","apis","swaggerSpec","get","setHeader","send","db"],"mappings":";;;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAGA;;;;AACA;;;;AACA;;;;;;AAEA;AAhBA;AAiBA,IAAIA,MAAM,wBAAV;;AAEA;;;AARA;AASAA,IAAIC,GAAJ,CAAQ,sBAAO,KAAP,EAAc;AACpBC,QAAM,cAAUC,GAAV,EAAeC,GAAf,EAAoB;AACxB,WAAOA,IAAIC,UAAJ,GAAiB,GAAxB;AACD,GAHmB,EAGjBC,QAAQC,QAAQC;AAHC,CAAd,CAAR;;AAMAR,IAAIC,GAAJ,CAAQ,sBAAO,KAAP,EAAc;AACpBC,QAAM,cAAUC,GAAV,EAAeC,GAAf,EAAoB;AACxB,WAAOA,IAAIC,UAAJ,IAAkB,GAAzB;AACD,GAHmB,EAGjBC,QAAQC,QAAQE;AAHC,CAAd,CAAR;;AAMA;AACAT,IAAIC,GAAJ,CAAQ,qBAAR;;AAEA;AACAD,IAAIC,GAAJ,CAAQ,qBAAWS,IAAX,CAAgB;AACtBC,SAAQ;AADc,CAAhB,CAAR;;AAIA;AACAX,IAAIC,GAAJ,CAAQ,kBAAQW,MAAR,CAAe,eAAKC,IAAL,CAAUC,SAAV,EAAqB,QAArB,EAA+B,QAA/B,CAAf,CAAR;;AAEA;AACAd,IAAIC,GAAJ,CAAQ,4BAAQ,eAAKY,IAAL,CAAUC,SAAV,EAAqB,QAArB,EAA+B,QAA/B,EAAyC,MAAzC,EAAiD,QAAjD,EAA2D,aAA3D,CAAR,CAAR;;AAEA;AACAd,IAAIC,GAAJ,CAAQ,4BAAR;;AAEA;AACAD,IAAIC,GAAJ,CAAQ,uBAAR;;AAEA;AACA,IAAMc,aAAaR,QAAQS,GAAR,CAAYC,MAAZ,GAAqB,OAArB,GAA8B,MAAjD;AACA,IAAMC,UAAU;AACdC,qBAAmB;AACjBC,UAAM;AACJC,aAAO,YADH,EACiB;AACrBC,eAAS,OAFL,EAEc;AAClBC,mBAAa;AAHT,KADW;AAMjBC,UAAMjB,QAAQS,GAAR,CAAYS,qBAAZ,GAAoC,0BAApC,GAAiE,gBANtD;AAOjBC,aAAS,CACPX,UADO,CAPQ;AAUjBY,yBAAqB;AACnB,aAAO;AACL,gBAAQ,QADH;AAEL,gBAAQ,eAFH;AAGL,cAAM;AAHD;AADY,KAVJ;AAiBjBC,cAAU,CAAC;AACTC,WAAK;AADI,KAAD,CAjBO;AAoBjBC,cAAU;AApBO,GADL;AAuBdC,QAAM,CACJ,+BADI;;AAKR;AA5BgB,CAAhB,CA6BA,IAAMC,cAAc,4BAAad,OAAb,CAApB;;AAEA;AACAlB,IAAIiC,GAAJ,CAAQ,eAAR,EAAyB,UAAC9B,GAAD,EAAMC,GAAN,EAAc;AACrCA,MAAI8B,SAAJ,CAAc,cAAd,EAA8B,kBAA9B;AACA9B,MAAI+B,IAAJ,CAASH,WAAT;AACD,CAHD;;AAKA;AACA,kBAAahC,GAAb,EAAkB,cAAM;AACtBA,MAAIC,GAAJ,CAAQ,MAAR,EAAgB,sBAAOmC,EAAP,mBAAhB;AACD,CAFD;;kBAIepC,G","file":"app.js","sourcesContent":["// 3rd party packages\r\nimport express from 'express'\r\nimport path from 'path'\r\nimport bodyParser from 'body-parser'\r\nimport swaggerJSDoc from 'swagger-jsdoc'\r\nimport favicon from 'serve-favicon'\r\nimport compression from 'compression'\r\nimport helmet from 'helmet'\r\nimport morgan from 'morgan'\r\nimport cors from 'cors'\r\n\r\n// our files/packages\r\nimport logger from './lib/logger'\r\nimport routes from './routes/routes'\r\nimport initializeDb from './db'\r\n\r\n// create express application\r\nlet app = express()\r\n\r\n// initialize morgan http logging\r\napp.use(morgan('dev', {\r\n  skip: function (req, res) {\r\n    return res.statusCode < 400\r\n  }, stream: process.stderr\r\n}))\r\n\r\napp.use(morgan('dev', {\r\n  skip: function (req, res) {\r\n    return res.statusCode >= 400\r\n  }, stream: process.stdout\r\n}))\r\n\r\n//enable cors\r\napp.use(cors())\r\n\r\n// Enforce http body limit\r\napp.use(bodyParser.json({\r\n  limit : '100kb'\r\n}))\r\n\r\n// No view engine, serve client folder (index.html) instead\r\napp.use(express.static(path.join(__dirname, '../../', 'client')))\r\n\r\n// use custom favicon\r\napp.use(favicon(path.join(__dirname, '../../', 'client', 'docs', 'images', 'favicon.ico')))\r\n\r\n// enabling gzip compression of responses: https://github.com/expressjs/compression\r\napp.use(compression())\r\n\r\n// http/https basic security: https://github.com/helmetjs/helmet\r\napp.use(helmet())\r\n\r\n// create swagger configuration: https://github.com/Surnet/swagger-jsdoc\r\nconst schemeType = process.env.HEROKU ? 'https': 'http'\r\nconst options = {\r\n  swaggerDefinition: {\r\n    info: {\r\n      title: 'Shockball2', // Title (required)\r\n      version: '0.1.0', // Version (required)\r\n      description: 'Fantasy Sports Simulation for Star Wars Combine'\r\n    },\r\n    host: process.env.FIREBASE_DATABASE_URL ? 'shockball2.herokuapp.com' : 'localhost:8080',\r\n    schemes: [\r\n      schemeType\r\n    ],\r\n    securityDefinitions: {\r\n      'jwt': {\r\n        'type': 'apiKey',\r\n        'name': 'Authorization',\r\n        'in': 'header'\r\n      }\r\n    },\r\n    security: [{\r\n      jwt: []\r\n    }],\r\n    basePath: '/'\r\n  },\r\n  apis: [\r\n    './server/src/routes/routes.js'\r\n  ]\r\n}\r\n\r\n// Initialize swagger-jsdoc -> returns validated swagger spec in json format\r\nconst swaggerSpec = swaggerJSDoc(options)\r\n\r\n// serve swagger\r\napp.get('/swagger.json', (req, res) => {\r\n  res.setHeader('Content-Type', 'application/json')\r\n  res.send(swaggerSpec)\r\n})\r\n\r\n// connect to db, and ensure it is up before we start our api\r\ninitializeDb(app, db => {\r\n  app.use('/api', routes(db, logger))\r\n})\r\n\r\nexport default app\r\n"]}