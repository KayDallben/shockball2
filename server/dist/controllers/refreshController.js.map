{"version":3,"sources":["../../src/controllers/refreshController.js"],"names":["swcApi","RefreshController","db","logger","tokens","collection","req","res","validation","validate","query","listOneParams","error","where","access_token","get","then","snapshot","userTokenObjects","forEach","doc","push","data","userTokenObject","refreshAccessToken","refresh_token","newTokenInfo","expiresAtMinutes","expires_in","add","expires_at","dateWithAddedMinutes","created_at","Date","newToken","id","update","uid","safeTokenInfo","status","send","minutes","getTime"],"mappings":";;;;;;qjBAAA;;;AAGA;;;AAFA;;;;AAGA;;IAAYA,M;;AACZ;;;;;;;;;;;;IAEMC,iB;AAEJ,6BAAYC,EAAZ,EAAgBC,MAAhB,EAAwB;AAAA;;AACtB,SAAKC,MAAL,GAAcF,GAAGG,UAAH,CAAc,QAAd,CAAd;AACA,SAAKF,MAAL,GAAcA,MAAd;AACD;;;;;2FAEaG,G,EAAKC,G;;;;;;;;AACXC,0B,GAAa,cAAIC,QAAJ,CAAaH,IAAII,KAAjB,EAAwB,kBAAcC,aAAtC,C;;sBACfH,WAAWI,KAAX,KAAqB,I;;;;;;uBAEjB,KAAKR,MAAL,CAAYS,KAAZ,CAAkB,cAAlB,EAAkC,IAAlC,EAAwCP,IAAII,KAAJ,CAAUI,YAAlD,EAAgEC,GAAhE,GAAsEC,IAAtE;AAAA,sFAA2E,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAC3EC,4CAD2E,GACxD,EADwD;;AAE/ED,qCAASE,OAAT,CAAiB,UAACC,GAAD,EAAS;AACxBF,+CAAiBG,IAAjB,CAAsBD,IAAIE,IAAJ,EAAtB;AACD,6BAFD;AAGMC,2CALyE,GAKvDL,iBAAiB,CAAjB,CALuD;AAAA;AAAA;AAAA,mCAOlDlB,OAAOwB,kBAAP,CAA0BD,gBAAgBE,aAA1C,CAPkD;;AAAA;AAOvEC,wCAPuE;AAQvEC,4CARuE,GAQnD,CAACD,aAAaJ,IAAb,CAAkBM,UAAlB,GAA+B,GAAhC,IAAuC,EARY;AAAA;AAAA,mCAStD,MAAKxB,MAAL,CAAYyB,GAAZ,CAAgB;AACrCf,4CAAcY,aAAaJ,IAAb,CAAkBR,YADK;AAErCW,6CAAeC,aAAaJ,IAAb,CAAkBG,aAFI;AAGrCK,0CAAY,MAAKC,oBAAL,CAA0BJ,gBAA1B,CAHyB;AAIrCK,0CAAY,IAAIC,IAAJ;AAJyB,6BAAhB,CATsD;;AAAA;AASvEC,oCATuE;AAAA;AAAA,mCAevE,MAAK9B,MAAL,CAAYgB,GAAZ,CAAgBc,SAASC,EAAzB,EAA6BC,MAA7B,CAAoC;AACxCC,mCAAKH,SAASC;AAD0B,6BAApC,CAfuE;;AAAA;AAkBvEG,yCAlBuE,GAkBvD;AACpBxB,4CAAcY,aAAaJ,IAAb,CAAkBR,YADZ;AAEpBgB,0CAAY,MAAKC,oBAAL,CAA0BJ,gBAA1B;AAFQ,6BAlBuD;;AAsB7EpB,gCAAIgC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBF,aAArB;AAtB6E;AAAA;;AAAA;AAAA;AAAA;;AAwB7E,kCAAKnC,MAAL,CAAYS,KAAZ;AACAL,gCAAIgC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBjB,eAArB;;AAzB6E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAA3E;;AAAA;AAAA;AAAA;AAAA,oB;;;;;;;AA6BN,qBAAKpB,MAAL,CAAYS,KAAZ,CAAkB,2BAA2BJ,WAAWI,KAAxD;AACAL,oBAAIgC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBhC,WAAWI,KAAhC;;;;;;;;;;;;;;;;;;yCAIiB6B,O,EAAS;AAC5B,aAAO,IAAIR,IAAJ,CAAS,IAAIA,IAAJ,GAAWS,OAAX,KAAwBD,UAAU,KAA3C,CAAP;AACD;;;;;;kBAIYxC,iB","file":"refreshController.js","sourcesContent":["//third party\r\nimport Joi from 'joi'\r\n\r\n//internal\r\nimport * as swcApi from '../lib/swcApi'\r\nimport RefreshSchema from '../models/Refresh.js'\r\n\r\nclass RefreshController {\r\n\r\n  constructor(db, logger) {\r\n    this.tokens = db.collection('tokens')\r\n    this.logger = logger\r\n  }\r\n\r\n  async listOne(req, res) {\r\n    const validation = Joi.validate(req.query, RefreshSchema.listOneParams)\r\n    if (validation.error === null) {\r\n      // get access token from db and corresponding refresh token\r\n      await this.tokens.where('access_token', '==', req.query.access_token).get().then(async (snapshot) => {\r\n        let userTokenObjects = []\r\n        snapshot.forEach((doc) => {\r\n          userTokenObjects.push(doc.data())\r\n        })\r\n        const userTokenObject = userTokenObjects[0]\r\n        try {\r\n          const newTokenInfo = await swcApi.refreshAccessToken(userTokenObject.refresh_token)\r\n          const expiresAtMinutes = ((newTokenInfo.data.expires_in - 120) / 60 )\r\n          const newToken = await this.tokens.add({\r\n            access_token: newTokenInfo.data.access_token,\r\n            refresh_token: newTokenInfo.data.refresh_token,\r\n            expires_at: this.dateWithAddedMinutes(expiresAtMinutes),\r\n            created_at: new Date()\r\n          })\r\n          await this.tokens.doc(newToken.id).update({\r\n            uid: newToken.id\r\n          })\r\n          const safeTokenInfo = {\r\n            access_token: newTokenInfo.data.access_token,\r\n            expires_at: this.dateWithAddedMinutes(expiresAtMinutes)\r\n          }\r\n          res.status(200).send(safeTokenInfo)\r\n        } catch(error) {\r\n          this.logger.error(error)\r\n          res.status(200).send(userTokenObject)\r\n        }\r\n      })\r\n    } else {\r\n      this.logger.error('Joi validation error: ' + validation.error)\r\n      res.status(400).send(validation.error)\r\n    }\r\n  }\r\n\r\n  dateWithAddedMinutes(minutes) {\r\n    return new Date(new Date().getTime() + (minutes * 60000))\r\n  }\r\n\r\n}\r\n\r\nexport default RefreshController"]}