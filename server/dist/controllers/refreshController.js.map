{"version":3,"sources":["../../src/controllers/refreshController.js"],"names":["swcApi","RefreshController","db","logger","tokens","collection","req","res","validation","Joi","validate","query","RefreshSchema","listOneParams","error","where","access_token","get","then","snapshot","userTokenObjects","forEach","doc","push","data","userTokenObject","refreshAccessToken","refresh_token","newTokenInfo","expiresAtMinutes","expires_in","add","expires_at","dateWithAddedMinutes","created_at","Date","newToken","id","update","uid","safeTokenInfo","status","send","minutes","getTime"],"mappings":";;;;;;qjBAAA;;;AAGA;;;AAFA;;;;AAGA;;IAAYA,M;;AACZ;;;;;;;;;;;;IAEMC,iB;AAEJ,6BAAYC,EAAZ,EAAgBC,MAAhB,EAAwB;AAAA;;AACtB,SAAKC,MAAL,GAAcF,GAAGG,UAAH,CAAc,QAAd,CAAd;AACA,SAAKF,MAAL,GAAcA,MAAd;AACD;;;;;2FAEaG,G,EAAKC,G;;;;;;;;AACXC,0B,GAAaC,cAAIC,QAAJ,CAAaJ,IAAIK,KAAjB,EAAwBC,kBAAcC,aAAtC,C;;sBACfL,WAAWM,KAAX,KAAqB,I;;;;;;uBAEjB,KAAKV,MAAL,CAAYW,KAAZ,CAAkB,cAAlB,EAAkC,IAAlC,EAAwCT,IAAIK,KAAJ,CAAUK,YAAlD,EAAgEC,GAAhE,GAAsEC,IAAtE;AAAA,sFAA2E,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAC3EC,4CAD2E,GACxD,EADwD;;AAE/ED,qCAASE,OAAT,CAAiB,UAACC,GAAD,EAAS;AACxBF,+CAAiBG,IAAjB,CAAsBD,IAAIE,IAAJ,EAAtB;AACD,6BAFD;AAGMC,2CALyE,GAKvDL,iBAAiB,CAAjB,CALuD;AAAA;AAAA;AAAA,mCAOlDpB,OAAO0B,kBAAP,CAA0BD,gBAAgBE,aAA1C,CAPkD;;AAAA;AAOvEC,wCAPuE;AAQvEC,4CARuE,GAQnD,CAACD,aAAaJ,IAAb,CAAkBM,UAAlB,GAA+B,GAAhC,IAAuC,EARY;AAAA;AAAA,mCAStD,MAAK1B,MAAL,CAAY2B,GAAZ,CAAgB;AACrCf,4CAAcY,aAAaJ,IAAb,CAAkBR,YADK;AAErCW,6CAAeC,aAAaJ,IAAb,CAAkBG,aAFI;AAGrCK,0CAAY,MAAKC,oBAAL,CAA0BJ,gBAA1B,CAHyB;AAIrCK,0CAAY,IAAIC,IAAJ;AAJyB,6BAAhB,CATsD;;AAAA;AASvEC,oCATuE;AAAA;AAAA,mCAevE,MAAKhC,MAAL,CAAYkB,GAAZ,CAAgBc,SAASC,EAAzB,EAA6BC,MAA7B,CAAoC;AACxCC,mCAAKH,SAASC;AAD0B,6BAApC,CAfuE;;AAAA;AAkBvEG,yCAlBuE,GAkBvD;AACpBxB,4CAAcY,aAAaJ,IAAb,CAAkBR,YADZ;AAEpBgB,0CAAY,MAAKC,oBAAL,CAA0BJ,gBAA1B;AAFQ,6BAlBuD;;AAsB7EtB,gCAAIkC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBF,aAArB;AAtB6E;AAAA;;AAAA;AAAA;AAAA;;AAwB7E,kCAAKrC,MAAL,CAAYW,KAAZ;AACAP,gCAAIkC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBjB,eAArB;;AAzB6E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAA3E;;AAAA;AAAA;AAAA;AAAA,oB;;;;;;;AA6BN,qBAAKtB,MAAL,CAAYW,KAAZ,CAAkB,2BAA2BN,WAAWM,KAAxD;AACAP,oBAAIkC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBlC,WAAWM,KAAhC;;;;;;;;;;;;;;;;;;yCAIiB6B,O,EAAS;AAC5B,aAAO,IAAIR,IAAJ,CAAS,IAAIA,IAAJ,GAAWS,OAAX,KAAwBD,UAAU,KAA3C,CAAP;AACD;;;;;;kBAIY1C,iB","file":"refreshController.js","sourcesContent":["//third party\nimport Joi from 'joi'\n\n//internal\nimport * as swcApi from '../lib/swcApi'\nimport RefreshSchema from '../models/Refresh.js'\n\nclass RefreshController {\n\n  constructor(db, logger) {\n    this.tokens = db.collection('tokens')\n    this.logger = logger\n  }\n\n  async listOne(req, res) {\n    const validation = Joi.validate(req.query, RefreshSchema.listOneParams)\n    if (validation.error === null) {\n      // get access token from db and corresponding refresh token\n      await this.tokens.where('access_token', '==', req.query.access_token).get().then(async (snapshot) => {\n        let userTokenObjects = []\n        snapshot.forEach((doc) => {\n          userTokenObjects.push(doc.data())\n        })\n        const userTokenObject = userTokenObjects[0]\n        try {\n          const newTokenInfo = await swcApi.refreshAccessToken(userTokenObject.refresh_token)\n          const expiresAtMinutes = ((newTokenInfo.data.expires_in - 120) / 60 )\n          const newToken = await this.tokens.add({\n            access_token: newTokenInfo.data.access_token,\n            refresh_token: newTokenInfo.data.refresh_token,\n            expires_at: this.dateWithAddedMinutes(expiresAtMinutes),\n            created_at: new Date()\n          })\n          await this.tokens.doc(newToken.id).update({\n            uid: newToken.id\n          })\n          const safeTokenInfo = {\n            access_token: newTokenInfo.data.access_token,\n            expires_at: this.dateWithAddedMinutes(expiresAtMinutes)\n          }\n          res.status(200).send(safeTokenInfo)\n        } catch(error) {\n          this.logger.error(error)\n          res.status(200).send(userTokenObject)\n        }\n      })\n    } else {\n      this.logger.error('Joi validation error: ' + validation.error)\n      res.status(400).send(validation.error)\n    }\n  }\n\n  dateWithAddedMinutes(minutes) {\n    return new Date(new Date().getTime() + (minutes * 60000))\n  }\n\n}\n\nexport default RefreshController"]}