{"version":3,"sources":["../../src/controllers/loginController.js"],"names":["swcApi","LoginController","db","logger","tokens","collection","req","res","validation","Joi","validate","query","LoginSchema","listOneParams","error","getAccessToken","authorization_code","tokenInfo","expiresAtMinutes","data","expires_in","add","access_token","refresh_token","expires_at","dateWithAddedMinutes","created_at","Date","newToken","doc","id","update","uid","safeTokenInfo","status","send","minutes","getTime"],"mappings":";;;;;;qjBAAA;;;AAGA;;;AAFA;;;;AAGA;;IAAYA,M;;AACZ;;;;;;;;;;;;IAEMC,e;AAEJ,2BAAYC,EAAZ,EAAgBC,MAAhB,EAAwB;AAAA;;AACtB,SAAKC,MAAL,GAAcF,GAAGG,UAAH,CAAc,QAAd,CAAd;AACA,SAAKF,MAAL,GAAcA,MAAd;AACD;;;;;0FAEaG,G,EAAKC,G;;;;;;AACXC,0B,GAAaC,cAAIC,QAAJ,CAAaJ,IAAIK,KAAjB,EAAwBC,gBAAYC,aAApC,C;;sBACfL,WAAWM,KAAX,KAAqB,I;;;;;;;uBAEGd,OAAOe,cAAP,CAAsBT,IAAIK,KAAJ,CAAUK,kBAAhC,C;;;AAAlBC,yB;AACAC,gC,GAAoB,CAACD,UAAUE,IAAV,CAAeC,UAAf,GAA4B,GAA7B,IAAoC,E;;uBACvC,KAAKhB,MAAL,CAAYiB,GAAZ,CAAgB;AACrCC,gCAAcL,UAAUE,IAAV,CAAeG,YADQ;AAErCC,iCAAeN,UAAUE,IAAV,CAAeI,aAFO;AAGrCC,8BAAY,KAAKC,oBAAL,CAA0BP,gBAA1B,CAHyB;AAIrCQ,8BAAY,IAAIC,IAAJ;AAJyB,iBAAhB,C;;;AAAjBC,wB;;uBAMA,KAAKxB,MAAL,CAAYyB,GAAZ,CAAgBD,SAASE,EAAzB,EAA6BC,MAA7B,CAAoC;AACxCC,uBAAKJ,SAASE;AAD0B,iBAApC,C;;;AAGAG,6B,GAAgB;AACpBX,gCAAcL,UAAUE,IAAV,CAAeG,YADT;AAEpBE,8BAAY,KAAKC,oBAAL,CAA0BP,gBAA1B;AAFQ,iB;;AAItBX,oBAAI2B,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBF,aAArB;;;;;;;;AAEA,qBAAK9B,MAAL,CAAYW,KAAZ;AACAP,oBAAI2B,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,uCAArB;;;;;;;AAGF,qBAAKhC,MAAL,CAAYW,KAAZ,CAAkB,2BAA2BN,WAAWM,KAAxD;AACAP,oBAAI2B,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB3B,WAAWM,KAAhC;;;;;;;;;;;;;;;;;;yCAIiBsB,O,EAAS;AAC5B,aAAO,IAAIT,IAAJ,CAAS,IAAIA,IAAJ,GAAWU,OAAX,KAAwBD,UAAU,KAA3C,CAAP;AACD;;;;;;kBAIYnC,e","file":"loginController.js","sourcesContent":["//third party\nimport Joi from 'joi'\n\n//internal\nimport * as swcApi from '../lib/swcApi'\nimport LoginSchema from '../models/Login.js'\n\nclass LoginController {\n\n  constructor(db, logger) {\n    this.tokens = db.collection('tokens')\n    this.logger = logger\n  }\n\n  async listOne(req, res) {\n    const validation = Joi.validate(req.query, LoginSchema.listOneParams)\n    if (validation.error === null) {\n      try {\n        const tokenInfo = await swcApi.getAccessToken(req.query.authorization_code)\n        const expiresAtMinutes = ((tokenInfo.data.expires_in - 120) / 60 )\n        const newToken = await this.tokens.add({\n          access_token: tokenInfo.data.access_token,\n          refresh_token: tokenInfo.data.refresh_token,\n          expires_at: this.dateWithAddedMinutes(expiresAtMinutes),\n          created_at: new Date()\n        })\n        await this.tokens.doc(newToken.id).update({\n          uid: newToken.id\n        })\n        const safeTokenInfo = {\n          access_token: tokenInfo.data.access_token,\n          expires_at: this.dateWithAddedMinutes(expiresAtMinutes)\n        }\n        res.status(200).send(safeTokenInfo)\n      } catch(error) {\n        this.logger.error(error)\n        res.status(400).send('Error creating new player in database')\n      }\n    } else {\n      this.logger.error('Joi validation error: ' + validation.error)\n      res.status(400).send(validation.error)\n    }\n  }\n\n  dateWithAddedMinutes(minutes) {\n    return new Date(new Date().getTime() + (minutes * 60000))\n  }\n\n}\n\nexport default LoginController"]}