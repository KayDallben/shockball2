{"version":3,"sources":["../../src/controllers/profileController.js"],"names":["admin","util","FieldValue","firestore","chance","Chance","ProfileController","db","logger","players","collection","teams","contracts","accounts","events","playerCaps","req","res","validation","Joi","validate","query","ProfileSchema","listOneParams","error","checkIfPlayerExists","uid","player","status","send","createNewPlayer","swcToken","newPlayer","decoratePlayer","accessToken","isNpc","baseStats","rollBaseStats","playerValue","calculatePlayerValue","swcCharacter","getCharacterInfo","character","generateNpcCharacter","playerEntity","name","image","gender","race","value","created","serverTimestamp","swcPlayerUid","passing","throwing","blocking","toughness","morale","vision","leadership","aggression","endurance","energy","marketValue","rating","playerRating","add","doc","id","update","shockballPlayerUid","createPlayerStatCaps","createPlayerAccount","get","then","data","npc","integer","min","max","playerId","set","lastModified","totalBalance","activityType","timestamp","amount","playerWithStatCaps","playerData","teamData","contractData","teamUid","length","doc2","contractUid","doc3","where","snapshot","forEach","doc4","push","records","generateSummaryRecords","season","matches","goals","shots","passes","blocksPass","blocksShot","tackles","runsBall","goalAverage","decoratedPlayer","url","method","params","headers","response","catch"],"mappings":"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","file":"profileController.js","sourcesContent":["//third party\nimport Joi from 'joi'\nimport axios from 'axios'\nimport * as admin from 'firebase-admin'\nimport Chance from 'chance'\n\n//internal\nimport ProfileSchema from '../models/Profile.js'\nimport * as util from '../lib/util.js'\n\nconst FieldValue = admin.firestore.FieldValue\nconst chance = new Chance()\n\nclass ProfileController {\n\n  constructor(db, logger) {\n    this.players = db.collection('players')\n    this.teams = db.collection('teams')\n    this.contracts = db.collection('contracts')\n    this.accounts = db.collection('accounts')\n    this.events = db.collection('events')\n    this.playerCaps = db.collection('playerCaps')\n    this.logger = logger\n  }\n\n  async listOne(req, res) {\n    const validation = Joi.validate(req.query, ProfileSchema.listOneParams)\n    if (validation.error === null) {\n      try {\n        const player = await this.checkIfPlayerExists(req.uid)\n        if (player) {\n          res.status(200).send(player)\n        } else {\n          //we need to create a new player\n          const newPlayer = await this.createNewPlayer(req.uid, req.swcToken, false)\n          await this.decoratePlayer(newPlayer)\n          if (newPlayer) {\n            res.status(201).send(newPlayer)\n          } else {\n            res.status(400).send('Error creating new player in database')\n          }\n        }\n      } catch (error) {\n        this.logger.error(error)\n        res.status(400).send(error)\n      }\n    } else {\n      this.logger.error('Joi validation error: ' + validation.error)\n      res.status(400).send(validation.error)\n    }\n  }\n\n  async createNewPlayer(uid, accessToken, isNpc) {\n    try {\n      const baseStats = this.rollBaseStats()\n      const playerValue = util.calculatePlayerValue(baseStats)\n      let swcCharacter = null\n      if (!isNpc) {\n        swcCharacter = await this.getCharacterInfo(uid, accessToken)\n      } else {\n        swcCharacter = {\n          character: this.generateNpcCharacter()\n        }\n      }\n      const playerEntity = {\n        name: swcCharacter.character.name,\n        image: swcCharacter.character.image,\n        gender: swcCharacter.character.gender,\n        race: swcCharacter.character.race.value,\n        created: FieldValue.serverTimestamp(),\n        swcPlayerUid: uid,\n        passing: baseStats.passing,\n        throwing: baseStats.throwing,\n        blocking: baseStats.blocking,\n        toughness: baseStats.toughness,\n        morale: baseStats.morale,\n        vision: baseStats.vision,\n        leadership: baseStats.leadership,\n        aggression: baseStats.aggression,\n        endurance: baseStats.endurance,\n        energy: baseStats.energy,\n        marketValue: playerValue.marketValue,\n        rating: playerValue.playerRating\n      }\n      const newPlayer = await this.players.add(playerEntity)\n      await this.players.doc(newPlayer.id).update({\n        shockballPlayerUid: newPlayer.id\n      })\n      await this.createPlayerStatCaps(newPlayer.id)\n      await this.createPlayerAccount(newPlayer.id, playerEntity)\n      return await this.players.doc(newPlayer.id).get().then(doc => {\n        return doc.data()\n      })\n    } catch (error) {\n      this.logger.error(error)\n      return false\n    }\n  }\n\n  generateNpcCharacter() {\n    let npc = {\n      name: 'Billy Joe Bobby Jones',\n      image: 'http://i736.photobucket.com/albums/xx4/bpkennedy/norringtonfreelance.jpg',\n      gender: 'male',\n      race: 'human'\n    }\n    return npc\n  }\n\n  rollBaseStats() {\n    const baseStats = {\n      passing: chance.integer({min:40, max:60}),\n      throwing: chance.integer({min:40, max:60}),\n      blocking: chance.integer({min:40, max:60}),\n      toughness: chance.integer({min:40, max:60}),\n      endurance: chance.integer({min:40, max:60}),\n      vision: chance.integer({min:40, max:60}),\n      morale: chance.integer({min:70, max:100}),\n      leadership: chance.integer({min:10, max:80}),\n      aggression: 0,\n      energy: chance.integer({min:70, max:100})\n    }\n    return baseStats\n  }\n\n  async createPlayerAccount(playerId, player) {\n    await this.accounts.doc(playerId).set({\n      shockballPlayerUid: playerId,\n      name: player.name,\n      created: FieldValue.serverTimestamp(),\n      lastModified: FieldValue.serverTimestamp(),\n      totalBalance: 0\n    })\n    await this.accounts.doc(playerId).collection('transactions').add({\n      activityType: 'Player account created for ' + player.name,\n      timestamp: FieldValue.serverTimestamp(),\n      amount: 0\n    })\n  }\n\n  async createPlayerStatCaps(uid) {\n    const playerWithStatCaps = {\n      shockballPlayerUid: uid,\n      created: FieldValue.serverTimestamp(),\n      passing: chance.integer({min:75, max:100}),\n      throwing: chance.integer({min:75, max:100}),\n      blocking: chance.integer({min:75, max:100}),\n      toughness: chance.integer({min:75, max:100}),\n      endurance: chance.integer({min:75, max:100}),\n      vision: chance.integer({min:75, max:100})\n    }\n    return await this.playerCaps.doc(uid).set(playerWithStatCaps)\n  }\n\n  async decoratePlayer(player) {\n    let playerData = player\n    playerData.teamData = {}\n    playerData.contractData = {}\n    if (playerData.teamUid && playerData.teamUid.length > 0) {\n      await this.teams.doc(playerData.teamUid).get().then((doc2) => {\n        playerData.teamData = doc2.data()\n      })\n    }\n    if (playerData.contractUid && playerData.contractUid.length > 0) {\n      await this.contracts.doc(playerData.contractUid).get().then((doc3) => {\n        playerData.contractData = doc3.data()\n      })\n    }\n    try {\n      if (!playerData.shockballPlayerUid) {\n        playerData.shockballPlayerUid = '1'\n      }\n      await this.events.where('actorUid', '==', playerData.shockballPlayerUid).get().then((snapshot) => {\n        let events = []\n        snapshot.forEach((doc4) => {\n          events.push(doc4.data())\n        })\n        if (events.length > 0) {\n          playerData.records = util.generateSummaryRecords(events)\n        } else {\n          playerData.records = [{\n            season: '1',\n            matches: 0,\n            goals: 0,\n            shots: 0,\n            passes: 0,\n            blocksPass: 0,\n            blocksShot: 0,\n            tackles: 0,\n            runsBall: 0,\n            goalAverage: 0\n          }]\n        }\n      })\n    } catch (error) {\n      this.logger.error(error)\n    }\n    return playerData\n  }\n\n  checkIfPlayerExists(swcPlayerUid) {\n    // important: here we are taking the swcUser uid to find the player - so this is a query to players collection\n    return this.players.where('swcPlayerUid', '==', swcPlayerUid).get().then(async (snapshot) => {\n      let players = []\n      snapshot.forEach((doc) => {\n        players.push(doc.data())\n      })\n      if (players.length > 0) {\n        const player = players[0] // Should only ever be a single user, but this takes the first if there happens to be more than one?\n        try {\n          const decoratedPlayer = await this.decoratePlayer(player)\n          return decoratedPlayer\n        } catch(error) {\n          this.logger.error(error)\n          return false\n        }\n      } else {\n        this.logger.error('checkIfPlayerExists did not find a matching player')\n        return false\n      }\n    })\n  }\n\n  getCharacterInfo(uid, accessToken) {\n    return axios({\n      url: `http://www.swcombine.com/ws/v1.0/character/${uid}/`,\n      method: 'GET',\n      params: {\n        'access_token': accessToken\n      },\n      headers: {\n        'Accept': 'application/json'\n      }\n    }).then(response => {\n      return response.data\n    }).catch(error => {\n      this.logger.error('Error calling character info at SWC')\n      this.logger.error(error)\n      return error\n    })\n  }\n\n}\n\nexport default ProfileController\n"]}