{"version":3,"sources":["../../src/controllers/playerController.js"],"names":["util","PlayerController","db","logger","players","collection","teams","events","contracts","req","res","validation","validate","params","listParams","error","get","then","snapshot","forEach","doc","push","data","length","status","send","name","message","id","query","updateParams","updateSet","regimen","JSON","parse","update","_writeTime","doc2","errorMessage","listOneParams","playerData","teamData","contractData","records","teamUid","contractUid","doc3","where","createdAsUid","doc4","generateSummaryRecords","season","matches","goals","shots","passes","blocksPass","blocksShot","tackles","runsBall","goalAverage"],"mappings":"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","file":"playerController.js","sourcesContent":["//third party\r\nimport Joi from 'joi'\r\n\r\n//internal\r\nimport PlayerSchema from '../models/Player.js'\r\nimport * as util from '../lib/util.js'\r\n\r\nclass PlayerController {\r\n\r\n  constructor(db, logger) {\r\n    this.players = db.collection('players')\r\n    this.teams = db.collection('teams')\r\n    this.events = db.collection('events')\r\n    this.contracts = db.collection('contracts')\r\n    this.logger = logger\r\n  }\r\n\r\n  async list(req, res) {\r\n    const validation = Joi.validate(req.params, PlayerSchema.listParams)\r\n    if (validation.error === null) {\r\n      try {\r\n        await this.players.get().then((snapshot) => {\r\n          let players = []\r\n          snapshot.forEach((doc) => {\r\n            players.push(doc.data())\r\n          })\r\n          if (players.length > -1) {\r\n            res.status(200).send(players)\r\n          } else {\r\n            throw {\r\n              name: 'NoPlayersExist',\r\n              message: 'There were no players found in the database for this query!'\r\n            }\r\n          }\r\n        })\r\n      } catch (error) {\r\n        this.logger.error(error)\r\n        res.status(400).send(error)\r\n      }\r\n    } else {\r\n      this.logger.error('Joi validation error: ' + validation.error)\r\n      res.status(400).send(validation.error)\r\n    }\r\n  }\r\n\r\n  async update(req, res) {\r\n    const {id} = req.params\r\n    const validation = Joi.validate(req.query, PlayerSchema.updateParams)\r\n    if (validation.error === null) {\r\n      try {\r\n        const updateSet = {\r\n          regimen: JSON.parse(req.query.regimen)\r\n        }\r\n        await this.players.doc(id).update(updateSet).then(async (doc) => {\r\n          if (doc._writeTime) {\r\n            await this.players.doc(id).get().then((doc2) => {\r\n              res.status(200).send(doc2.data())\r\n            })\r\n          } else {\r\n            const errorMessage = 'Failed to write update to player for training regimen.'\r\n            this.logger.error(errorMessage)\r\n            res.status(400).send(errorMessage)\r\n          }\r\n        })\r\n      } catch (error) {\r\n        this.logger.error(error)\r\n        res.status(400).send(error)\r\n      }\r\n    } else {\r\n      this.logger.error('Joi validation error: ' + validation.error)\r\n      res.status(400).send(validation.error)\r\n    }\r\n  }\r\n\r\n  async listOne(req, res) {\r\n    const validation = Joi.validate(req.params, PlayerSchema.listOneParams)\r\n    if (validation.error === null) {\r\n      try {\r\n        await this.players.doc(req.params.id).get().then(async(doc) => {\r\n          let playerData = doc.data()\r\n          playerData.teamData = {}\r\n          playerData.contractData = {}\r\n          playerData.records = []\r\n          if (playerData.teamUid && playerData.teamUid.length > 0) {\r\n            await this.teams.doc(playerData.teamUid).get().then((doc2) => {\r\n              playerData.teamData = doc2.data()\r\n            })\r\n          }\r\n          if (playerData.contractUid && playerData.contractUid.length > 0) {\r\n            await this.contracts.doc(playerData.contractUid).get().then((doc3) => {\r\n              playerData.contractData = doc3.data()\r\n            })\r\n          }\r\n          await this.events.where('actorUid', '==', playerData.createdAsUid).get().then((snapshot) => {\r\n            let events = []\r\n            snapshot.forEach((doc4) => {\r\n              events.push(doc4.data())\r\n            })\r\n            if (events.length > 0) {\r\n              playerData.records = util.generateSummaryRecords(events)\r\n            } else {\r\n              playerData.records = [{\r\n                season: '1',\r\n                matches: 0,\r\n                goals: 0,\r\n                shots: 0,\r\n                passes: 0,\r\n                blocksPass: 0,\r\n                blocksShot: 0,\r\n                tackles: 0,\r\n                runsBall: 0,\r\n                goalAverage: 0\r\n              }]\r\n            }\r\n          })\r\n          res.status(200).send(playerData)\r\n        })\r\n      } catch (error) {\r\n        this.logger.error(error)\r\n        res.status(400).send(error)\r\n      }\r\n    } else {\r\n      this.logger.error('Joi validation error: ' + validation.error)\r\n      res.status(400).send(validation.error)\r\n    }\r\n  }\r\n}\r\n\r\nexport default PlayerController"]}