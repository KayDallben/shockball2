{"version":3,"sources":["../../src/controllers/playerController.js"],"names":["PlayerController","db","logger","players","collection","req","res","validation","validate","params","listParams","error","get","then","snapshot","forEach","doc","push","data","length","status","send","name","message","listOneParams","id"],"mappings":";;;;;;qjBAAA;;;AAGA;;;AAFA;;;;AAGA;;;;;;;;;;IAEMA,gB;AAEJ,4BAAYC,EAAZ,EAAgBC,MAAhB,EAAwB;AAAA;;AACtB,SAAKC,OAAL,GAAeF,GAAGG,UAAH,CAAc,SAAd,CAAf;AACA,SAAKF,MAAL,GAAcA,MAAd;AACD;;;;;0FAEUG,G,EAAKC,G;;;;;;AACRC,0B,GAAa,cAAIC,QAAJ,CAAaH,IAAII,MAAjB,EAAyB,iBAAaC,UAAtC,C;;sBACfH,WAAWI,KAAX,KAAqB,I;;;;;;;uBAEf,KAAKR,OAAL,CAAaS,GAAb,GAAmBC,IAAnB,CAAwB,UAACC,QAAD,EAAc;AAC1C,sBAAIX,UAAU,EAAd;AACAW,2BAASC,OAAT,CAAiB,UAACC,GAAD,EAAS;AACxBb,4BAAQc,IAAR,CAAaD,IAAIE,IAAJ,EAAb;AACD,mBAFD;AAGA,sBAAIf,QAAQgB,MAAR,GAAiB,CAAC,CAAtB,EAAyB;AACvBb,wBAAIc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBlB,OAArB;AACD,mBAFD,MAEO;AACL,0BAAM;AACJmB,4BAAM,gBADF;AAEJC,+BAAS;AAFL,qBAAN;AAID;AACF,iBAbK,C;;;;;;;;;;AAeN,qBAAKrB,MAAL,CAAYS,KAAZ;AACAL,oBAAIc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB;;;;;;;AAGF,qBAAKnB,MAAL,CAAYS,KAAZ,CAAkB,2BAA2BJ,WAAWI,KAAxD;AACAL,oBAAIc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBd,WAAWI,KAAhC;;;;;;;;;;;;;;;;;;;4FAIUN,G,EAAKC,G;;;;;;AACXC,0B,GAAa,cAAIC,QAAJ,CAAaH,IAAII,MAAjB,EAAyB,iBAAae,aAAtC,C;;sBACfjB,WAAWI,KAAX,KAAqB,I;;;;;;;uBAEf,KAAKR,OAAL,CAAaa,GAAb,CAAiBX,IAAII,MAAJ,CAAWgB,EAA5B,EAAgCb,GAAhC,GAAsCC,IAAtC,CAA2C,UAACG,GAAD,EAAS;AACxDV,sBAAIc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBL,IAAIE,IAAJ,EAArB;AACD,iBAFK,C;;;;;;;;;;AAIN,qBAAKhB,MAAL,CAAYS,KAAZ;AACAL,oBAAIc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB;;;;;;;AAGF,qBAAKnB,MAAL,CAAYS,KAAZ,CAAkB,2BAA2BJ,WAAWI,KAAxD;AACAL,oBAAIc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBd,WAAWI,KAAhC;;;;;;;;;;;;;;;;;;;;;kBAMSX,gB","file":"playerController.js","sourcesContent":["//third party\r\nimport Joi from 'joi'\r\n\r\n//internal\r\nimport PlayerSchema from '../models/Player.js'\r\n\r\nclass PlayerController {\r\n\r\n  constructor(db, logger) {\r\n    this.players = db.collection('players')\r\n    this.logger = logger\r\n  }\r\n\r\n  async list(req, res) {\r\n    const validation = Joi.validate(req.params, PlayerSchema.listParams)\r\n    if (validation.error === null) {\r\n      try {\r\n        await this.players.get().then((snapshot) => {\r\n          let players = []\r\n          snapshot.forEach((doc) => {\r\n            players.push(doc.data())\r\n          })\r\n          if (players.length > -1) {\r\n            res.status(200).send(players)\r\n          } else {\r\n            throw {\r\n              name: 'NoPlayersExist',\r\n              message: 'There were no players found in the database for this query!'\r\n            }\r\n          }\r\n        })\r\n      } catch (error) {\r\n        this.logger.error(error)\r\n        res.status(400).send(error)\r\n      }\r\n    } else {\r\n      this.logger.error('Joi validation error: ' + validation.error)\r\n      res.status(400).send(validation.error)\r\n    }\r\n  }\r\n\r\n  async listOne(req, res) {\r\n    const validation = Joi.validate(req.params, PlayerSchema.listOneParams)\r\n    if (validation.error === null) {\r\n      try {\r\n        await this.players.doc(req.params.id).get().then((doc) => {\r\n          res.status(200).send(doc.data())\r\n        })\r\n      } catch (error) {\r\n        this.logger.error(error)\r\n        res.status(400).send(error)\r\n      }\r\n    } else {\r\n      this.logger.error('Joi validation error: ' + validation.error)\r\n      res.status(400).send(validation.error)\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport default PlayerController\r\n"]}