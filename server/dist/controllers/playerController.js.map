{"version":3,"sources":["../../src/controllers/playerController.js"],"names":["util","PlayerController","db","logger","players","collection","teams","events","contracts","req","res","query","queryProp","queryVal","validation","validate","params","listParams","error","get","then","snapshot","forEach","doc","push","data","length","status","send","name","message","searchValidation","listSearchParams","where","id","updateParams","updateSet","lineupPosition","regimen","JSON","parse","update","_writeTime","doc2","errorMessage","listOneParams","playerData","teamData","contractData","records","teamUid","contractUid","doc3","shockballPlayerUid","doc4","generateSummaryRecords","season","matches","goals","shots","passes","blocksPass","blocksShot","tackles","runsBall","goalAverage"],"mappings":"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","file":"playerController.js","sourcesContent":["//third party\r\nimport Joi from 'joi'\r\n\r\n//internal\r\nimport PlayerSchema from '../models/Player.js'\r\nimport * as util from '../lib/util.js'\r\n\r\nclass PlayerController {\r\n\r\n  constructor(db, logger) {\r\n    this.players = db.collection('players')\r\n    this.teams = db.collection('teams')\r\n    this.events = db.collection('events')\r\n    this.contracts = db.collection('contracts')\r\n    this.logger = logger\r\n  }\r\n\r\n  async list(req, res) {\r\n    if (!req.query.queryProp && !req.query.queryVal) {\r\n      const validation = Joi.validate(req.params, PlayerSchema.listParams)\r\n      if (validation.error === null) {\r\n        try {\r\n          await this.players.get().then((snapshot) => {\r\n            let players = []\r\n            snapshot.forEach((doc) => {\r\n              players.push(doc.data())\r\n            })\r\n            if (players.length > -1) {\r\n              res.status(200).send(players)\r\n            } else {\r\n              throw {\r\n                name: 'NoPlayersExist',\r\n                message: 'There were no players found in the database for this query!'\r\n              }\r\n            }\r\n          })\r\n        } catch (error) {\r\n          this.logger.error(error)\r\n          res.status(400).send(error)\r\n        }\r\n      } else {\r\n        this.logger.error('Joi validation error: ' + validation.error)\r\n        res.status(400).send(validation.error)\r\n      }\r\n    } else {\r\n      //we are searching for players by criteria\r\n      const searchValidation = Joi.validate(req.query, PlayerSchema.listSearchParams)\r\n      if (searchValidation.error === null) {\r\n        try {\r\n          await this.players.where(req.query.queryProp, '==', req.query.queryVal).get().then((snapshot) => {\r\n            let players = []\r\n            snapshot.forEach((doc) => {\r\n              players.push(doc.data())\r\n            })\r\n            if (players.length > -1) {\r\n              res.status(200).send(players)\r\n            } else {\r\n              throw {\r\n                name: 'NoPlayersExist',\r\n                message: 'There were no players found in the database for this query!'\r\n              }\r\n            }\r\n          })\r\n        } catch (error) {\r\n          this.logger.error(error)\r\n          res.status(400).send(error)\r\n        }\r\n      } else {\r\n        this.logger.error('Joi validation error: ' + searchValidation.error)\r\n        res.status(400).send(searchValidation.error)\r\n      }\r\n    }\r\n  }\r\n\r\n  async update(req, res) {\r\n    const {id} = req.params\r\n    const validation = Joi.validate(req.query, PlayerSchema.updateParams)\r\n    if (validation.error === null) {\r\n      try {\r\n        let updateSet = {}\r\n        if (req.query.lineupPosition) {\r\n          updateSet = {\r\n            lineupPosition: req.query.lineupPosition === 'null' ? null : req.query.lineupPosition\r\n          }\r\n        } else {\r\n          updateSet = {\r\n            regimen: JSON.parse(req.query.regimen)\r\n          }\r\n        }\r\n        await this.players.doc(id).update(updateSet).then(async (doc) => {\r\n          if (doc._writeTime) {\r\n            await this.players.doc(id).get().then((doc2) => {\r\n              res.status(200).send(doc2.data())\r\n            })\r\n          } else {\r\n            const errorMessage = 'Failed to write update to player for training regimen.'\r\n            this.logger.error(errorMessage)\r\n            res.status(400).send(errorMessage)\r\n          }\r\n        })\r\n      } catch (error) {\r\n        this.logger.error(error)\r\n        res.status(400).send(error)\r\n      }\r\n    } else {\r\n      this.logger.error('Joi validation error: ' + validation.error)\r\n      res.status(400).send(validation.error)\r\n    }\r\n  }\r\n\r\n  async listOne(req, res) {\r\n    const validation = Joi.validate(req.params, PlayerSchema.listOneParams)\r\n    if (validation.error === null) {\r\n      try {\r\n        await this.players.doc(req.params.id).get().then(async(doc) => {\r\n          let playerData = doc.data()\r\n          playerData.teamData = {}\r\n          playerData.contractData = {}\r\n          playerData.records = []\r\n          if (playerData.teamUid && playerData.teamUid.length > 0) {\r\n            await this.teams.doc(playerData.teamUid).get().then((doc2) => {\r\n              playerData.teamData = doc2.data()\r\n            })\r\n          }\r\n          if (playerData.contractUid && playerData.contractUid.length > 0) {\r\n            await this.contracts.doc(playerData.contractUid).get().then((doc3) => {\r\n              playerData.contractData = doc3.data()\r\n            })\r\n          }\r\n          await this.events.where('actorUid', '==', playerData.shockballPlayerUid).get().then((snapshot) => {\r\n            let events = []\r\n            snapshot.forEach((doc4) => {\r\n              events.push(doc4.data())\r\n            })\r\n            if (events.length > 0) {\r\n              playerData.records = util.generateSummaryRecords(events)\r\n            } else {\r\n              playerData.records = [{\r\n                season: '1',\r\n                matches: 0,\r\n                goals: 0,\r\n                shots: 0,\r\n                passes: 0,\r\n                blocksPass: 0,\r\n                blocksShot: 0,\r\n                tackles: 0,\r\n                runsBall: 0,\r\n                goalAverage: 0\r\n              }]\r\n            }\r\n          })\r\n          res.status(200).send(playerData)\r\n        })\r\n      } catch (error) {\r\n        this.logger.error(error)\r\n        res.status(400).send(error)\r\n      }\r\n    } else {\r\n      this.logger.error('Joi validation error: ' + validation.error)\r\n      res.status(400).send(validation.error)\r\n    }\r\n  }\r\n}\r\n\r\nexport default PlayerController"]}