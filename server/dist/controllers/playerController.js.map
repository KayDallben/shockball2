{"version":3,"sources":["../../src/controllers/playerController.js"],"names":["PlayerController","db","logger","players","collection","teams","contracts","req","res","validation","validate","params","listParams","error","get","then","snapshot","forEach","doc","push","data","length","status","send","name","message","listOneParams","id","playerData","teamData","contractData","teamUid","doc2","contractUid","doc3"],"mappings":"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","file":"playerController.js","sourcesContent":["//third party\r\nimport Joi from 'joi'\r\n\r\n//internal\r\nimport PlayerSchema from '../models/Player.js'\r\n\r\nclass PlayerController {\r\n\r\n  constructor(db, logger) {\r\n    this.players = db.collection('players')\r\n    this.teams = db.collection('teams')\r\n    this.contracts = db.collection('contracts')\r\n    this.logger = logger\r\n  }\r\n\r\n  async list(req, res) {\r\n    const validation = Joi.validate(req.params, PlayerSchema.listParams)\r\n    if (validation.error === null) {\r\n      try {\r\n        await this.players.get().then((snapshot) => {\r\n          let players = []\r\n          snapshot.forEach((doc) => {\r\n            players.push(doc.data())\r\n          })\r\n          if (players.length > -1) {\r\n            res.status(200).send(players)\r\n          } else {\r\n            throw {\r\n              name: 'NoPlayersExist',\r\n              message: 'There were no players found in the database for this query!'\r\n            }\r\n          }\r\n        })\r\n      } catch (error) {\r\n        this.logger.error(error)\r\n        res.status(400).send(error)\r\n      }\r\n    } else {\r\n      this.logger.error('Joi validation error: ' + validation.error)\r\n      res.status(400).send(validation.error)\r\n    }\r\n  }\r\n\r\n  async listOne(req, res) {\r\n    const validation = Joi.validate(req.params, PlayerSchema.listOneParams)\r\n    if (validation.error === null) {\r\n      try {\r\n        await this.players.doc(req.params.id).get().then(async(doc) => {\r\n          let playerData = doc.data()\r\n          playerData.teamData = {}\r\n          playerData.contractData = {}\r\n          if (playerData.teamUid && playerData.teamUid.length > 0) {\r\n            await this.teams.doc(playerData.teamUid).get().then((doc2) => {\r\n              playerData.teamData = doc2.data()\r\n            })\r\n          }\r\n          if (playerData.contractUid && playerData.contractUid.length > 0) {\r\n            await this.contracts.doc(playerData.contractUid).get().then((doc3) => {\r\n              playerData.contractData = doc3.data()\r\n            })\r\n          }\r\n          res.status(200).send(playerData)\r\n        })\r\n      } catch (error) {\r\n        this.logger.error(error)\r\n        res.status(400).send(error)\r\n      }\r\n    } else {\r\n      this.logger.error('Joi validation error: ' + validation.error)\r\n      res.status(400).send(validation.error)\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport default PlayerController\r\n"]}