{"version":3,"sources":["../../src/controllers/playerController.js"],"names":["PlayerController","db","logger","players","collection","req","res","validation","validate","query","listParams","error","get","status","send","listOneParams","doc","uid","then","data","player"],"mappings":";;;;;;qjBAAA;;AAEA;AACA;;AAEA;;;AAJA;;;;AAKA;;;;;;;;;;IAEMA,gB;AAEJ,4BAAYC,EAAZ,EAAgBC,MAAhB,EAAwB;AAAA;;AACtB,SAAKC,OAAL,GAAeF,GAAGG,UAAH,CAAc,SAAd,CAAf;AACA,SAAKF,MAAL,GAAcA,MAAd;AACD;;;;;0FAEUG,G,EAAKC,G;;;;;;AACRC,0B,GAAa,cAAIC,QAAJ,CAAaH,IAAII,KAAjB,EAAwB,iBAAaC,UAArC,C;;sBACfH,WAAWI,KAAX,KAAqB,I;;;;;;;uBAEC,KAAKR,OAAL,CAAaS,GAAb,E;;;AAAhBT,uB;;AACNG,oBAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBX,OAArB;;;;;;;;AAEA,qBAAKD,MAAL,CAAYS,KAAZ;AACAL,oBAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB;;;;;;;AAGF,qBAAKZ,MAAL,CAAYS,KAAZ,CAAkB,2BAA2BJ,WAAWI,KAAxD;AACAL,oBAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBP,WAAWI,KAAhC;;;;;;;;;;;;;;;;;;;4FAIUN,G,EAAKC,G;;;;;;AACXC,0B,GAAa,cAAIC,QAAJ,CAAaH,IAAII,KAAjB,EAAwB,iBAAaM,aAArC,C;;sBACfR,WAAWI,KAAX,KAAqB,I;;;;;;;uBAEA,KAAKR,OAAL,CAAaa,GAAb,CAAiBX,IAAII,KAAJ,CAAUQ,GAA3B,EAAgCL,GAAhC,GAAsCM,IAAtC,CAA2C,eAAO;AACrE,yBAAOF,IAAIG,IAAJ,EAAP;AACD,iBAFoB,C;;;AAAfC,sB;;AAGNd,oBAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBM,MAArB;;;;;;;;AAEA,qBAAKlB,MAAL,CAAYS,KAAZ;AACAL,oBAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB;;;;;;;AAGF,qBAAKZ,MAAL,CAAYS,KAAZ,CAAkB,2BAA2BJ,WAAWI,KAAxD;AACAL,oBAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBP,WAAWI,KAAhC;;;;;;;;;;;;;;;;;;;;;kBAMSX,gB","file":"playerController.js","sourcesContent":["//third party\r\nimport Joi from 'joi'\r\n// import * as admin from 'firebase-admin'\r\n// const FieldValue = admin.firestore.FieldValue\r\n\r\n//internal\r\nimport PlayerSchema from '../models/Player.js'\r\n\r\nclass PlayerController {\r\n\r\n  constructor(db, logger) {\r\n    this.players = db.collection('players')\r\n    this.logger = logger\r\n  }\r\n\r\n  async list(req, res) {\r\n    const validation = Joi.validate(req.query, PlayerSchema.listParams)\r\n    if (validation.error === null) {\r\n      try {\r\n        const players = await this.players.get()\r\n        res.status(200).send(players)\r\n      } catch (error) {\r\n        this.logger.error(error)\r\n        res.status(400).send(error)\r\n      }\r\n    } else {\r\n      this.logger.error('Joi validation error: ' + validation.error)\r\n      res.status(400).send(validation.error)\r\n    }\r\n  }\r\n\r\n  async listOne(req, res) {\r\n    const validation = Joi.validate(req.query, PlayerSchema.listOneParams)\r\n    if (validation.error === null) {\r\n      try {\r\n        const player = await this.players.doc(req.query.uid).get().then(doc => {\r\n          return doc.data()\r\n        })\r\n        res.status(200).send(player)\r\n      } catch (error) {\r\n        this.logger.error(error)\r\n        res.status(400).send(error)\r\n      }\r\n    } else {\r\n      this.logger.error('Joi validation error: ' + validation.error)\r\n      res.status(400).send(validation.error)\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport default PlayerController\r\n"]}