{"version":3,"sources":["../../src/controllers/contractController.js"],"names":["admin","FieldValue","firestore","ContractController","db","logger","contracts","collection","accounts","req","res","validation","validate","query","listParams","error","where","queryProp","queryVal","get","then","snapshot","forEach","doc","push","data","status","send","params","listOneParams","id","removeParams","contract","contractUid","delete","updatePlayerTransactions","playerUid","returnTeamAvailableBudget","teamUid","purchasePrice","updateTeamAccountTransactions","body","create","updateSet","teamAccount","availableBudget","add","newContract","update","created","serverTimestamp","lastModified","doc2","savedContract","updateTeamAccount","updateParams","enactedOn","isFeePaid","Object","assign","_writeTime","notifyPartiesAboutContractAccept","errorMessage","activityType","playerName","timestamp","amount","teamName","addPlayerSigningBonus","updatePlayerEntityWithContract","updateTeamPotentialBudget","totalBalance","potentialBudget","players"],"mappings":"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","file":"contractController.js","sourcesContent":["//third party\r\nimport Joi from 'joi'\r\nimport * as admin from 'firebase-admin'\r\n\r\n//internal\r\nimport ContractSchema from '../models/Contract.js'\r\nconst FieldValue = admin.firestore.FieldValue\r\n\r\nclass ContractController {\r\n\r\n  constructor(db, logger) {\r\n    this.contracts = db.collection('contracts')\r\n    this.accounts = db.collection('accounts')\r\n    this.logger = logger\r\n  }\r\n\r\n  async list(req, res) {\r\n    const validation = Joi.validate(req.query, ContractSchema.listParams)\r\n    if (validation.error === null) {\r\n      try {\r\n        await this.contracts.where(req.query.queryProp, '==', req.query.queryVal).get().then((snapshot) => {\r\n          let contracts = []\r\n          snapshot.forEach((doc) => {\r\n            contracts.push(doc.data())\r\n          })\r\n          res.status(200).send(contracts)\r\n        })\r\n      } catch (error) {\r\n        this.logger.error(error)\r\n        res.status(400).send(error)\r\n      }\r\n    } else {\r\n      this.logger.error('Joi validation error: ' + validation.error)\r\n      res.status(400).send(validation.error)\r\n    }\r\n  }\r\n\r\n  async listOne(req, res) {\r\n    const validation = Joi.validate(req.params, ContractSchema.listOneParams)\r\n    if (validation.error === null) {\r\n      try {\r\n        await this.contracts.doc(req.params.id).get().then((doc) => {\r\n          res.status(200).send(doc.data())\r\n        })\r\n      } catch (error) {\r\n        this.logger.error(error)\r\n        res.status(400).send(error)\r\n      }\r\n    } else {\r\n      this.logger.error('Joi validation error: ' + validation.error)\r\n      res.status(400).send(validation.error)\r\n    }\r\n  }\r\n\r\n  async remove(req, res) {\r\n    const validation = Joi.validate(req.query, ContractSchema.removeParams)\r\n    if (validation.error === null) {\r\n      try {\r\n        const contract = await this.contracts.doc(req.params.id).get().then(doc => {\r\n          return doc.data()\r\n        })\r\n        await this.contracts.doc(contract.contractUid).delete()\r\n        await this.updatePlayerTransactions(contract.playerUid, contract)\r\n        await this.returnTeamAvailableBudget(contract.teamUid, contract.purchasePrice)\r\n        await this.updateTeamAccountTransactions(contract.teamUid, contract)\r\n        res.status(200).send('Contract deleted successfully')\r\n      } catch (error) {\r\n        this.logger.error(error)\r\n        res.status(400).send(error)\r\n      }\r\n    } else {\r\n      this.logger.error('Joi validation error: ' + validation.error)\r\n      res.status(400).send(validation.error)\r\n    }\r\n  }\r\n\r\n  async create(req, res) {\r\n    const validation = Joi.validate(req.body, ContractSchema.create)\r\n    if (validation.error === null) {\r\n      try {\r\n        const updateSet = req.body\r\n        await this.accounts.doc(req.body.teamUid).get().then(async (doc) => {\r\n          const teamAccount = doc.data()\r\n          if (teamAccount.availableBudget - req.body.purchasePrice < 0) {\r\n            res.status(400).send('Cannot spend more than available team budget!')\r\n            return\r\n          } else {\r\n            const newContract = await this.contracts.add(updateSet)\r\n            await newContract.update({\r\n              contractUid: newContract.id,\r\n              created: FieldValue.serverTimestamp(),\r\n              lastModified: FieldValue.serverTimestamp(),\r\n            })\r\n            await this.contracts.doc(newContract.id).get().then(async (doc2) => {\r\n              const savedContract = doc2.data()\r\n              await this.updateTeamAccount(savedContract, teamAccount)\r\n              res.status(201).send(savedContract)\r\n            })\r\n          }\r\n        })\r\n      } catch (error) {\r\n        this.logger.error(error)\r\n        res.status(400).send(error)\r\n      }\r\n    } else {\r\n      this.logger.error('Joi validation error: ' + validation.error)\r\n      res.status(400).send(validation.error)\r\n    }\r\n  }\r\n\r\n  async update(req, res) {\r\n    const { id } = req.params\r\n    const validation = Joi.validate(req.query, ContractSchema.updateParams)\r\n    if (validation.error === null) {\r\n      try {\r\n        let updateSet = {\r\n          status: req.query.status,\r\n          enactedOn: FieldValue.serverTimestamp()\r\n        }\r\n        if (req.query.isFeePaid) {\r\n          updateSet = Object.assign(updateSet, { isFeePaid: true })\r\n        }\r\n        await this.contracts.doc(id).update(updateSet).then(async (doc) => {\r\n          if (doc._writeTime) {\r\n            await this.contracts.doc(id).get().then(async (doc2) => {\r\n              const newContract = doc2.data()\r\n              await this.notifyPartiesAboutContractAccept(newContract)\r\n              res.status(200).send(newContract)\r\n            })\r\n          } else {\r\n            const errorMessage = 'Failed to write update to contract.'\r\n            this.logger.error(errorMessage)\r\n            res.status(400).send(errorMessage)\r\n          }\r\n        })\r\n      } catch (error) {\r\n        this.logger.error(error)\r\n        res.status(400).send(error)\r\n      }\r\n    } else {\r\n      this.logger.error('Joi validation error: ' + validation.error)\r\n      res.status(400).send(validation.error)\r\n    }\r\n  }\r\n\r\n  async updateTeamAccount(contract, teamAccount) {\r\n    await this.accounts.doc(contract.teamUid).collection('transactions').add({\r\n      activityType: `Player contract bid sent to ${contract.playerName}`,\r\n      timestamp: FieldValue.serverTimestamp(),\r\n      amount: contract.purchasePrice\r\n    })\r\n    await this.accounts.doc(contract.teamUid).update({\r\n      availableBudget: teamAccount.availableBudget - contract.purchasePrice\r\n    })\r\n  }\r\n\r\n  async returnTeamAvailableBudget(teamUid, amount) {\r\n    //update team account budget - puts back contract purchase price into team's availableBudget\r\n    try {\r\n      await this.accounts.doc(teamUid).get().then(async (doc) => {\r\n        const teamAccount = doc.data()\r\n        await this.accounts.doc(teamUid).update({\r\n          availableBudget: teamAccount.availableBudget + amount\r\n        })\r\n      })\r\n    } catch(error) {\r\n      this.logger.error(error)\r\n    }\r\n  }\r\n\r\n  async notifyPartiesAboutContractAccept(newContract) {\r\n    // if accepted, then write to team and player transactions\r\n    if (newContract.status === 'accepted') {\r\n      await this.accounts.doc(newContract.playerUid).collection('transactions').add({\r\n        activityType: `${newContract.playerName} accepted a contract bid from ${newContract.teamName}`,\r\n        amount: newContract.purchasePrice,\r\n        timestamp: FieldValue.serverTimestamp()\r\n      })\r\n      await this.accounts.doc(newContract.teamUid).collection('transactions').add({\r\n        activityType: `${newContract.playerName} accepted a contract bid from ${newContract.teamName}`,\r\n        amount: newContract.purchasePrice,\r\n        timestamp: FieldValue.serverTimestamp()\r\n      })\r\n    } else if (newContract.status === 'rejected') {\r\n      await this.accounts.doc(newContract.playerUid).collection('transactions').add({\r\n        activityType: `${newContract.playerName} rejected a contract bid from ${newContract.teamName}`,\r\n        amount: newContract.purchasePrice,\r\n        timestamp: FieldValue.serverTimestamp()\r\n      })\r\n      await this.accounts.doc(newContract.teamUid).collection('transactions').add({\r\n        activityType: `${newContract.playerName} rejected a contract bid from ${newContract.teamName}`,\r\n        amount: newContract.purchasePrice,\r\n        timestamp: FieldValue.serverTimestamp()\r\n      })\r\n    } else if (newContract.status === 'active') {\r\n      await this.accounts.doc(newContract.playerUid).collection('transactions').add({\r\n        activityType: `${newContract.playerName}'s contract is active for ${newContract.teamName}!`,\r\n        amount: newContract.purchasePrice,\r\n        timestamp: FieldValue.serverTimestamp()\r\n      })\r\n      await this.accounts.doc(newContract.teamUid).collection('transactions').add({\r\n        activityType: `${newContract.playerName}'s contract is active for ${newContract.teamName}!`,\r\n        amount: newContract.purchasePrice,\r\n        timestamp: FieldValue.serverTimestamp()\r\n      })\r\n      await this.addPlayerSigningBonus(newContract)\r\n      await this.updatePlayerEntityWithContract(newContract)\r\n      await this.updateTeamPotentialBudget(newContract)\r\n    }\r\n  }\r\n\r\n  async addPlayerSigningBonus(newContract) {\r\n    await this.accounts.doc(newContract.playerUid).update({\r\n      totalBalance: newContract.purchasePrice * .2\r\n    })\r\n  }\r\n\r\n  async updateTeamPotentialBudget(newContract) {\r\n    const teamAccount = await this.accounts.doc(newContract.teamUid).get().then((doc) => {\r\n      return doc.data()\r\n    })\r\n    await this.accounts.doc(newContract.teamUid).update({\r\n      potentialBudget: teamAccount.potentialBudget - newContract.purchasePrice\r\n    })\r\n  }\r\n\r\n  async updatePlayerTransactions(playerUid, contract) {\r\n    // update player transactions - event informing contract was deleted\r\n    try {\r\n      await this.accounts.doc(playerUid).collection('transactions').add({\r\n        activityType: `Contract bid from ${contract.teamName} was deleted by admin`,\r\n        amount: 0,\r\n        timestamp: FieldValue.serverTimestamp()\r\n      })\r\n    } catch(error) {\r\n      this.logger.error(error)\r\n    }\r\n  }\r\n\r\n  async updatePlayerEntityWithContract(newContract) {\r\n    await this.players.doc(newContract.playerUid).update({\r\n      contractUid: newContract.contractUid,\r\n      teamUid: newContract.teamUid\r\n    })\r\n  }\r\n\r\n  async updateTeamAccountTransactions(teamUid, contract) {\r\n    // update team account transactions - event informing contract was deleted AND transaction for availableBudget being put back\r\n    try {\r\n      await this.accounts.doc(teamUid).collection('transactions').add({\r\n        activityType: `Contract bid to ${contract.playerName} was deleted by admin`,\r\n        amount: 0,\r\n        timestamp: FieldValue.serverTimestamp()\r\n      })\r\n      await this.accounts.doc(teamUid).collection('transactions').add({\r\n        activityType: `Funds for ${contract.playerName} failed contract bid returned to Available budget`,\r\n        amount: contract.purchasePrice,\r\n        timestamp: FieldValue.serverTimestamp()\r\n      })\r\n    } catch(error) {\r\n      this.logger.error(error)\r\n    }\r\n  }\r\n}\r\n\r\nexport default ContractController"]}