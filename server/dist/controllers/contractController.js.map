{"version":3,"sources":["../../src/controllers/contractController.js"],"names":["admin","FieldValue","firestore","ContractController","db","logger","contracts","collection","accounts","players","req","res","validation","Joi","validate","query","ContractSchema","listParams","error","where","queryProp","queryVal","get","then","snapshot","forEach","doc","push","data","status","send","params","listOneParams","id","removeParams","contract","contractUid","delete","updatePlayerTransactions","playerUid","returnTeamAvailableBudget","teamUid","purchasePrice","updateTeamAccountTransactions","body","create","updateSet","teamAccount","availableBudget","add","newContract","update","created","serverTimestamp","lastModified","doc2","savedContract","updateTeamAccount","updateParams","enactedOn","isFeePaid","Object","assign","_writeTime","notifyPartiesAboutContractAccept","errorMessage","activityType","playerName","timestamp","amount","teamName","refundTeamAvailableBudget","transferCredits","updatePlayerEntityWithContract","playerSigningBonus","commissionerBonus","leagueAmount","addPlayerSigningBonus","addCommissionerBonus","addLeagueFee","deductTeamPotentialBudget","bonusAmount","account","totalBalance","playerId","potentialBudget"],"mappings":"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","file":"contractController.js","sourcesContent":["//third party\nimport Joi from 'joi'\nimport * as admin from 'firebase-admin'\n\n//internal\nimport ContractSchema from '../models/Contract.js'\nconst FieldValue = admin.firestore.FieldValue\n\nclass ContractController {\n\n  constructor(db, logger) {\n    this.contracts = db.collection('contracts')\n    this.accounts = db.collection('accounts')\n    this.players = db.collection('players')\n    this.logger = logger\n  }\n\n  async list(req, res) {\n    const validation = Joi.validate(req.query, ContractSchema.listParams)\n    if (validation.error === null) {\n      try {\n        await this.contracts.where(req.query.queryProp, '==', req.query.queryVal).get().then((snapshot) => {\n          let contracts = []\n          snapshot.forEach((doc) => {\n            contracts.push(doc.data())\n          })\n          res.status(200).send(contracts)\n        })\n      } catch (error) {\n        this.logger.error(error)\n        res.status(400).send(error)\n      }\n    } else {\n      this.logger.error('Joi validation error: ' + validation.error)\n      res.status(400).send(validation.error)\n    }\n  }\n\n  async listOne(req, res) {\n    const validation = Joi.validate(req.params, ContractSchema.listOneParams)\n    if (validation.error === null) {\n      try {\n        await this.contracts.doc(req.params.id).get().then((doc) => {\n          res.status(200).send(doc.data())\n        })\n      } catch (error) {\n        this.logger.error(error)\n        res.status(400).send(error)\n      }\n    } else {\n      this.logger.error('Joi validation error: ' + validation.error)\n      res.status(400).send(validation.error)\n    }\n  }\n\n  async remove(req, res) {\n    const validation = Joi.validate(req.query, ContractSchema.removeParams)\n    if (validation.error === null) {\n      try {\n        const contract = await this.contracts.doc(req.params.id).get().then(doc => {\n          return doc.data()\n        })\n        await this.contracts.doc(contract.contractUid).delete()\n        await this.updatePlayerTransactions(contract.playerUid, contract)\n        await this.returnTeamAvailableBudget(contract.teamUid, contract.purchasePrice)\n        await this.updateTeamAccountTransactions(contract.teamUid, contract)\n        res.status(200).send('Contract deleted successfully')\n      } catch (error) {\n        this.logger.error(error)\n        res.status(400).send(error)\n      }\n    } else {\n      this.logger.error('Joi validation error: ' + validation.error)\n      res.status(400).send(validation.error)\n    }\n  }\n\n  async create(req, res) {\n    const validation = Joi.validate(req.body, ContractSchema.create)\n    if (validation.error === null) {\n      try {\n        const updateSet = req.body\n        await this.accounts.doc(req.body.teamUid).get().then(async (doc) => {\n          const teamAccount = doc.data()\n          if (teamAccount.availableBudget - req.body.purchasePrice < 0) {\n            res.status(400).send('Cannot spend more than available team budget!')\n            return\n          } else {\n            const newContract = await this.contracts.add(updateSet)\n            await newContract.update({\n              contractUid: newContract.id,\n              created: FieldValue.serverTimestamp(),\n              lastModified: FieldValue.serverTimestamp(),\n            })\n            await this.contracts.doc(newContract.id).get().then(async (doc2) => {\n              const savedContract = doc2.data()\n              await this.updateTeamAccount(savedContract, teamAccount)\n              res.status(201).send(savedContract)\n            })\n          }\n        })\n      } catch (error) {\n        this.logger.error(error)\n        res.status(400).send(error)\n      }\n    } else {\n      this.logger.error('Joi validation error: ' + validation.error)\n      res.status(400).send(validation.error)\n    }\n  }\n\n  async update(req, res) {\n    const { id } = req.params\n    const validation = Joi.validate(req.query, ContractSchema.updateParams)\n    if (validation.error === null) {\n      try {\n        let updateSet = {\n          status: req.query.status,\n          enactedOn: FieldValue.serverTimestamp()\n        }\n        if (req.query.isFeePaid) {\n          updateSet = Object.assign(updateSet, { isFeePaid: true })\n        }\n        await this.contracts.doc(id).update(updateSet).then(async (doc) => {\n          if (doc._writeTime) {\n            await this.contracts.doc(id).get().then(async (doc2) => {\n              const newContract = doc2.data()\n              await this.notifyPartiesAboutContractAccept(newContract)\n              res.status(200).send(newContract)\n            })\n          } else {\n            const errorMessage = 'Failed to write update to contract.'\n            this.logger.error(errorMessage)\n            res.status(400).send(errorMessage)\n          }\n        })\n      } catch (error) {\n        this.logger.error(error)\n        res.status(400).send(error)\n      }\n    } else {\n      this.logger.error('Joi validation error: ' + validation.error)\n      res.status(400).send(validation.error)\n    }\n  }\n\n  async updateTeamAccount(contract, teamAccount) {\n    await this.accounts.doc(contract.teamUid).collection('transactions').add({\n      activityType: `Player contract bid sent to ${contract.playerName}`,\n      timestamp: FieldValue.serverTimestamp(),\n      amount: contract.purchasePrice\n    })\n    await this.accounts.doc(contract.teamUid).update({\n      availableBudget: teamAccount.availableBudget - contract.purchasePrice\n    })\n  }\n\n  async returnTeamAvailableBudget(teamUid, amount) {\n    //update team account budget - puts back contract purchase price into team's availableBudget\n    try {\n      await this.accounts.doc(teamUid).get().then(async (doc) => {\n        const teamAccount = doc.data()\n        await this.accounts.doc(teamUid).update({\n          availableBudget: teamAccount.availableBudget + amount\n        })\n      })\n    } catch(error) {\n      this.logger.error(error)\n    }\n  }\n\n  async notifyPartiesAboutContractAccept(newContract) {\n    // if accepted, then write to team and player transactions\n    if (newContract.status === 'awaiting admin') {\n      await this.accounts.doc(newContract.playerUid).collection('transactions').add({\n        activityType: `${newContract.playerName} accepted a contract bid from ${newContract.teamName}`,\n        amount: newContract.purchasePrice,\n        timestamp: FieldValue.serverTimestamp()\n      })\n      await this.accounts.doc(newContract.teamUid).collection('transactions').add({\n        activityType: `${newContract.playerName} accepted a contract bid from ${newContract.teamName}`,\n        amount: newContract.purchasePrice,\n        timestamp: FieldValue.serverTimestamp()\n      })\n    } else if (newContract.status === 'rejected') {\n      await this.accounts.doc(newContract.playerUid).collection('transactions').add({\n        activityType: `${newContract.playerName} rejected a contract bid from ${newContract.teamName}`,\n        amount: newContract.purchasePrice,\n        timestamp: FieldValue.serverTimestamp()\n      })\n      await this.accounts.doc(newContract.teamUid).collection('transactions').add({\n        activityType: `${newContract.playerName} rejected a contract bid from ${newContract.teamName}`,\n        amount: newContract.purchasePrice,\n        timestamp: FieldValue.serverTimestamp()\n      })\n      await this.refundTeamAvailableBudget(newContract)\n    } else if (newContract.status === 'active') {\n      await this.accounts.doc(newContract.playerUid).collection('transactions').add({\n        activityType: `${newContract.playerName}'s contract is active for ${newContract.teamName}!`,\n        amount: newContract.purchasePrice,\n        timestamp: FieldValue.serverTimestamp()\n      })\n      await this.accounts.doc(newContract.teamUid).collection('transactions').add({\n        activityType: `${newContract.playerName}'s contract is active for ${newContract.teamName}!`,\n        amount: newContract.purchasePrice,\n        timestamp: FieldValue.serverTimestamp()\n      })\n      await this.transferCredits(newContract)\n      await this.updatePlayerEntityWithContract(newContract)\n    }\n  }\n\n  async transferCredits(newContract) {\n    const purchasePrice = newContract.purchasePrice\n    const playerSigningBonus = purchasePrice * .2\n    const commissionerBonus = purchasePrice * .1\n    const leagueAmount = purchasePrice - (playerSigningBonus + commissionerBonus)\n    await this.addPlayerSigningBonus(newContract.playerUid, playerSigningBonus)\n    await this.addCommissionerBonus(newContract, commissionerBonus)\n    await this.addLeagueFee(newContract, leagueAmount)\n    await this.deductTeamPotentialBudget(newContract.teamUid, purchasePrice)\n  }\n\n  async addCommissionerBonus(contract, bonusAmount) {\n    await this.accounts.doc('commissioner').collection('transactions').add({\n      activityType: `Player ${contract.playerName} for team ${contract.teamName} fee`,\n      timestamp: FieldValue.serverTimestamp(),\n      amount: bonusAmount\n    })\n    const account = await this.accounts.doc('commissioner').get().then((doc) => {\n      return doc.data()\n    })\n    await this.accounts.doc('commissioner').update({\n      totalBalance: account.totalBalance + bonusAmount\n    })\n  }\n\n  async addLeagueFee(contract, bonusAmount) {\n    await this.accounts.doc('league').collection('transactions').add({\n      activityType: `Player ${contract.playerName} for team ${contract.teamName} fee`,\n      timestamp: FieldValue.serverTimestamp(),\n      amount: bonusAmount\n    })\n    const account = await this.accounts.doc('league').get().then((doc) => {\n      return doc.data()\n    })\n    await this.accounts.doc('league').update({\n      totalBalance: account.totalBalance + bonusAmount\n    })\n  }\n\n  async addPlayerSigningBonus(playerId, bonusAmount) {\n    const account = await this.accounts.doc(playerId).get().then((doc) => {\n      return doc.data()\n    })\n    await this.accounts.doc(playerId).update({\n      totalBalance: account.totalBalance + bonusAmount\n    })\n  }\n\n  async refundTeamAvailableBudget(newContract) {\n    const teamAccount = await this.accounts.doc(newContract.teamUid).get().then((doc) => {\n      return doc.data()\n    })\n    await this.accounts.doc(newContract.teamUid).update({\n      availableBudget: teamAccount.availableBudget + newContract.purchasePrice\n    })\n  }\n\n  async deductTeamPotentialBudget(teamUid, purchasePrice) {\n    const teamAccount = await this.accounts.doc(teamUid).get().then((doc) => {\n      return doc.data()\n    })\n    await this.accounts.doc(teamUid).update({\n      potentialBudget: teamAccount.potentialBudget - purchasePrice\n    })\n  }\n\n  async updatePlayerTransactions(playerUid, contract) {\n    // update player transactions - event informing contract was deleted\n    try {\n      await this.accounts.doc(playerUid).collection('transactions').add({\n        activityType: `Contract bid from ${contract.teamName} was deleted by admin`,\n        amount: 0,\n        timestamp: FieldValue.serverTimestamp()\n      })\n    } catch(error) {\n      this.logger.error(error)\n    }\n  }\n\n  async updatePlayerEntityWithContract(newContract) {\n    await this.players.doc(newContract.playerUid).update({\n      contractUid: newContract.contractUid,\n      teamUid: newContract.teamUid,\n      teamName: newContract.teamName\n    })\n  }\n\n  async updateTeamAccountTransactions(teamUid, contract) {\n    // update team account transactions - event informing contract was deleted AND transaction for availableBudget being put back\n    try {\n      await this.accounts.doc(teamUid).collection('transactions').add({\n        activityType: `Contract bid to ${contract.playerName} was deleted by admin`,\n        amount: 0,\n        timestamp: FieldValue.serverTimestamp()\n      })\n      await this.accounts.doc(teamUid).collection('transactions').add({\n        activityType: `Funds for ${contract.playerName} failed. Contract bid returned to Available budget`,\n        amount: contract.purchasePrice,\n        timestamp: FieldValue.serverTimestamp()\n      })\n    } catch(error) {\n      this.logger.error(error)\n    }\n  }\n}\n\nexport default ContractController"]}