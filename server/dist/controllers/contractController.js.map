{"version":3,"sources":["../../src/controllers/contractController.js"],"names":["admin","FieldValue","firestore","ContractController","db","logger","contracts","collection","req","res","validation","validate","query","listParams","error","where","queryProp","queryVal","get","then","snapshot","forEach","doc","push","data","status","send","params","listOneParams","id","body","create","updateSet","add","newContract","update","contractUid","created","serverTimestamp","lastModified","updatedContract"],"mappings":"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","file":"contractController.js","sourcesContent":["//third party\r\nimport Joi from 'joi'\r\nimport * as admin from 'firebase-admin'\r\n\r\n//internal\r\nimport ContractSchema from '../models/Contract.js'\r\nconst FieldValue = admin.firestore.FieldValue\r\n\r\nclass ContractController {\r\n\r\n  constructor(db, logger) {\r\n    this.contracts = db.collection('contracts')\r\n    this.logger = logger\r\n  }\r\n\r\n  async list(req, res) {\r\n    const validation = Joi.validate(req.query, ContractSchema.listParams)\r\n    if (validation.error === null) {\r\n      try {\r\n        await this.contracts.where(req.query.queryProp, '==', req.query.queryVal).get().then((snapshot) => {\r\n          let contracts = []\r\n          snapshot.forEach((doc) => {\r\n            contracts.push(doc.data())\r\n          })\r\n          res.status(200).send(contracts)\r\n        })\r\n      } catch (error) {\r\n        this.logger.error(error)\r\n        res.status(400).send(error)\r\n      }\r\n    } else {\r\n      this.logger.error('Joi validation error: ' + validation.error)\r\n      res.status(400).send(validation.error)\r\n    }\r\n  }\r\n\r\n  async listOne(req, res) {\r\n    const validation = Joi.validate(req.params, ContractSchema.listOneParams)\r\n    if (validation.error === null) {\r\n      try {\r\n        await this.contracts.doc(req.params.id).get().then((doc) => {\r\n          res.status(200).send(doc.data())\r\n        })\r\n      } catch (error) {\r\n        this.logger.error(error)\r\n        res.status(400).send(error)\r\n      }\r\n    } else {\r\n      this.logger.error('Joi validation error: ' + validation.error)\r\n      res.status(400).send(validation.error)\r\n    }\r\n  }\r\n\r\n  async create(req, res) {\r\n    const validation = Joi.validate(req.body, ContractSchema.create)\r\n    if (validation.error === null) {\r\n      try {\r\n        const updateSet = req.body\r\n        const newContract = await this.contracts.add(updateSet)\r\n        await newContract.update({\r\n          contractUid: newContract.id,\r\n          created: FieldValue.serverTimestamp(),\r\n          lastModified: FieldValue.serverTimestamp(),\r\n        })\r\n        const updatedContract = await this.contracts.doc(newContract.id).get().then((doc) => {\r\n          res.status(201).send(doc.data())\r\n        })\r\n      } catch (error) {\r\n        this.logger.error(error)\r\n        res.status(400).send(error)\r\n      }\r\n    } else {\r\n      this.logger.error('Joi validation error: ' + validation.error)\r\n      res.status(400).send(validation.error)\r\n    }\r\n  }\r\n}\r\n\r\nexport default ContractController"]}