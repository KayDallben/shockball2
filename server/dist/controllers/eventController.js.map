{"version":3,"sources":["../../src/controllers/eventController.js"],"names":["EventController","db","logger","events","collection","req","res","searchValidation","validate","query","listParams","error","where","queryProp","queryVal","get","then","snapshot","forEach","doc","push","data","length","status","send","name","message"],"mappings":";;;;;;qjBAAA,oC,CAAsC;;AAEtC;;;AAGA;;;AAFA;;;;AAGA;;;;;;;;;;IAEMA,e;AAEJ,2BAAYC,EAAZ,EAAgBC,MAAhB,EAAwB;AAAA;;AACtB,SAAKC,MAAL,GAAcF,GAAGG,UAAH,CAAc,QAAd,CAAd;AACA,SAAKF,MAAL,GAAcA,MAAd;AACD;;;;;0FAEUG,G,EAAKC,G;;;;;;AACRC,gC,GAAmB,cAAIC,QAAJ,CAAaH,IAAII,KAAjB,EAAwB,gBAAYC,UAApC,C;;sBACrBH,iBAAiBI,KAAjB,KAA2B,I;;;;;;;uBAErB,KAAKR,MAAL,CAAYS,KAAZ,CAAkBP,IAAII,KAAJ,CAAUI,SAA5B,EAAuC,IAAvC,EAA6CR,IAAII,KAAJ,CAAUK,QAAvD,EAAiEC,GAAjE,GAAuEC,IAAvE,CAA4E,UAACC,QAAD,EAAc;AAC9F,sBAAId,SAAS,EAAb;AACAc,2BAASC,OAAT,CAAiB,UAACC,GAAD,EAAS;AACxBhB,2BAAOiB,IAAP,CAAYD,IAAIE,IAAJ,EAAZ;AACD,mBAFD;AAGA,sBAAIlB,OAAOmB,MAAP,GAAgB,CAAC,CAArB,EAAwB;AACtBhB,wBAAIiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBrB,MAArB;AACD,mBAFD,MAEO;AACL,0BAAM;AACJsB,4BAAM,eADF;AAEJC,+BAAS;AAFL,qBAAN;AAID;AACF,iBAbK,C;;;;;;;;;;AAeN,qBAAKxB,MAAL,CAAYS,KAAZ;AACAL,oBAAIiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB;;;;;;;AAGF,qBAAKtB,MAAL,CAAYS,KAAZ,CAAkB,2BAA2BJ,iBAAiBI,KAA9D;AACAL,oBAAIiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBjB,iBAAiBI,KAAtC;;;;;;;;;;;;;;;;;;;;;kBAKSX,e","file":"eventController.js","sourcesContent":["/* eslint no-use-before-define: 0 */  // --> OFF\r\n\r\n//third party\r\nimport Joi from 'joi'\r\n\r\n//internal\r\nimport EventSchema from '../models/Event.js'\r\n\r\nclass EventController {\r\n\r\n  constructor(db, logger) {\r\n    this.events = db.collection('events')\r\n    this.logger = logger\r\n  }\r\n\r\n  async list(req, res) {\r\n    const searchValidation = Joi.validate(req.query, EventSchema.listParams)\r\n    if (searchValidation.error === null) {\r\n      try {\r\n        await this.events.where(req.query.queryProp, '==', req.query.queryVal).get().then((snapshot) => {\r\n          let events = []\r\n          snapshot.forEach((doc) => {\r\n            events.push(doc.data())\r\n          })\r\n          if (events.length > -1) {\r\n            res.status(200).send(events)\r\n          } else {\r\n            throw {\r\n              name: 'NoEventsExist',\r\n              message: 'There were no events found in the database for this query!'\r\n            }\r\n          }\r\n        })\r\n      } catch (error) {\r\n        this.logger.error(error)\r\n        res.status(400).send(error)\r\n      }\r\n    } else {\r\n      this.logger.error('Joi validation error: ' + searchValidation.error)\r\n      res.status(400).send(searchValidation.error)\r\n    }\r\n  }\r\n}\r\n\r\nexport default EventController"]}