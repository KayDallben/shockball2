{"version":3,"sources":["../../src/controllers/eventController.js"],"names":["util","EventController","db","logger","events","collection","req","res","searchValidation","validate","query","listParams","error","where","queryProp","queryVal","get","then","snapshot","forEach","doc","push","data","length","status","send","name","message","validation"],"mappings":";;;;;;qjBAAA;;;AAGA;;;AAFA;;;;AAGA;;;;AACA;;IAAYA,I;;;;;;;;;;IAENC,e;AAEJ,6BAAYC,EAAZ,EAAgBC,MAAhB,EAAwB;AAAA;;AACtB,aAAKC,MAAL,GAAcF,GAAGG,UAAH,CAAc,QAAd,CAAd;AACA,aAAKF,MAAL,GAAcA,MAAd;AACD;;;;;gGAEUG,G,EAAKC,G;;;;;;AACRC,gD,GAAmB,cAAIC,QAAJ,CAAaH,IAAII,KAAjB,EAAwB,gBAAYC,UAApC,C;;sCACrBH,iBAAiBI,KAAjB,KAA2B,I;;;;;;;uCAEjB,KAAKR,MAAL,CAAYS,KAAZ,CAAkBP,IAAII,KAAJ,CAAUI,SAA5B,EAAuC,IAAvC,EAA6CR,IAAII,KAAJ,CAAUK,QAAvD,EAAiEC,GAAjE,GAAuEC,IAAvE,CAA4E,UAACC,QAAD,EAAc;AAChG,wCAAId,SAAS,EAAb;AACAc,6CAASC,OAAT,CAAiB,UAACC,GAAD,EAAS;AACtBhB,+CAAOiB,IAAP,CAAYD,IAAIE,IAAJ,EAAZ;AACH,qCAFD;AAGA,wCAAIlB,OAAOmB,MAAP,GAAgB,CAAC,CAArB,EAAwB;AACpBhB,4CAAIiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBrB,MAArB;AACH,qCAFD,MAEO;AACH,8CAAM;AACNsB,kDAAM,eADA;AAENC,qDAAS;AAFH,yCAAN;AAIH;AACA,iCAbK,C;;;;;;;;;;AAeN,qCAAKxB,MAAL,CAAYS,KAAZ;AACAL,oCAAIiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB;;;;;;;AAGJ,qCAAKtB,MAAL,CAAYS,KAAZ,CAAkB,2BAA2BgB,WAAWhB,KAAxD;AACAL,oCAAIiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBG,WAAWhB,KAAhC;;;;;;;;;;;;;;;;;;;;;kBAKOX,e","file":"eventController.js","sourcesContent":["//third party\r\nimport Joi from 'joi'\r\n\r\n//internal\r\nimport EventSchema from '../models/Event.js'\r\nimport * as util from '../lib/util.js'\r\n\r\nclass EventController {\r\n\r\n  constructor(db, logger) {\r\n    this.events = db.collection('events')\r\n    this.logger = logger\r\n  }\r\n\r\n  async list(req, res) {\r\n    const searchValidation = Joi.validate(req.query, EventSchema.listParams)\r\n    if (searchValidation.error === null) {\r\n        try {\r\n            await this.events.where(req.query.queryProp, '==', req.query.queryVal).get().then((snapshot) => {\r\n            let events = []\r\n            snapshot.forEach((doc) => {\r\n                events.push(doc.data())\r\n            })\r\n            if (events.length > -1) {\r\n                res.status(200).send(events)\r\n            } else {\r\n                throw {\r\n                name: 'NoEventsExist',\r\n                message: 'There were no events found in the database for this query!'\r\n                }\r\n            }\r\n            })\r\n        } catch (error) {\r\n            this.logger.error(error)\r\n            res.status(400).send(error)\r\n        }\r\n    } else {\r\n        this.logger.error('Joi validation error: ' + validation.error)\r\n        res.status(400).send(validation.error)\r\n    }\r\n  }\r\n}\r\n\r\nexport default EventController"]}