{"version":3,"sources":["../../src/controllers/eventController.js"],"names":["EventController","db","logger","events","collection","req","res","searchValidation","Joi","validate","query","EventSchema","listParams","error","where","queryProp","queryVal","get","then","snapshot","forEach","doc","push","data","length","status","send","name","message"],"mappings":";;;;;;qjBAAA,oC,CAAsC;;AAEtC;;;AAGA;;;AAFA;;;;AAGA;;;;;;;;;;IAEMA,e;AAEJ,2BAAYC,EAAZ,EAAgBC,MAAhB,EAAwB;AAAA;;AACtB,SAAKC,MAAL,GAAcF,GAAGG,UAAH,CAAc,QAAd,CAAd;AACA,SAAKF,MAAL,GAAcA,MAAd;AACD;;;;;0FAEUG,G,EAAKC,G;;;;;;AACRC,gC,GAAmBC,cAAIC,QAAJ,CAAaJ,IAAIK,KAAjB,EAAwBC,gBAAYC,UAApC,C;;sBACrBL,iBAAiBM,KAAjB,KAA2B,I;;;;;;;uBAErB,KAAKV,MAAL,CAAYW,KAAZ,CAAkBT,IAAIK,KAAJ,CAAUK,SAA5B,EAAuC,IAAvC,EAA6CV,IAAIK,KAAJ,CAAUM,QAAvD,EAAiEC,GAAjE,GAAuEC,IAAvE,CAA4E,UAACC,QAAD,EAAc;AAC9F,sBAAIhB,SAAS,EAAb;AACAgB,2BAASC,OAAT,CAAiB,UAACC,GAAD,EAAS;AACxBlB,2BAAOmB,IAAP,CAAYD,IAAIE,IAAJ,EAAZ;AACD,mBAFD;AAGA,sBAAIpB,OAAOqB,MAAP,GAAgB,CAAC,CAArB,EAAwB;AACtBlB,wBAAImB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBvB,MAArB;AACD,mBAFD,MAEO;AACL,0BAAM;AACJwB,4BAAM,eADF;AAEJC,+BAAS;AAFL,qBAAN;AAID;AACF,iBAbK,C;;;;;;;;;;AAeN,qBAAK1B,MAAL,CAAYW,KAAZ;AACAP,oBAAImB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB;;;;;;;AAGF,qBAAKxB,MAAL,CAAYW,KAAZ,CAAkB,2BAA2BN,iBAAiBM,KAA9D;AACAP,oBAAImB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBnB,iBAAiBM,KAAtC;;;;;;;;;;;;;;;;;;;;;kBAKSb,e","file":"eventController.js","sourcesContent":["/* eslint no-use-before-define: 0 */  // --> OFF\n\n//third party\nimport Joi from 'joi'\n\n//internal\nimport EventSchema from '../models/Event.js'\n\nclass EventController {\n\n  constructor(db, logger) {\n    this.events = db.collection('events')\n    this.logger = logger\n  }\n\n  async list(req, res) {\n    const searchValidation = Joi.validate(req.query, EventSchema.listParams)\n    if (searchValidation.error === null) {\n      try {\n        await this.events.where(req.query.queryProp, '==', req.query.queryVal).get().then((snapshot) => {\n          let events = []\n          snapshot.forEach((doc) => {\n            events.push(doc.data())\n          })\n          if (events.length > -1) {\n            res.status(200).send(events)\n          } else {\n            throw {\n              name: 'NoEventsExist',\n              message: 'There were no events found in the database for this query!'\n            }\n          }\n        })\n      } catch (error) {\n        this.logger.error(error)\n        res.status(400).send(error)\n      }\n    } else {\n      this.logger.error('Joi validation error: ' + searchValidation.error)\n      res.status(400).send(searchValidation.error)\n    }\n  }\n}\n\nexport default EventController"]}