{"version":3,"sources":["../../src/controllers/teamController.js"],"names":["TeamController","db","logger","teams","collection","req","res","validation","Joi","validate","params","TeamSchema","listParams","error","get","then","snapshot","forEach","doc","push","data","length","status","send","name","message","listOneParams","id"],"mappings":";;;;;;qjBAAA;;;AAGA;;;AAFA;;;;AAGA;;;;;;;;;;IAEMA,c;AAEJ,0BAAYC,EAAZ,EAAgBC,MAAhB,EAAwB;AAAA;;AACtB,SAAKC,KAAL,GAAaF,GAAGG,UAAH,CAAc,OAAd,CAAb;AACA,SAAKF,MAAL,GAAcA,MAAd;AACD;;;;;0FAEUG,G,EAAKC,G;;;;;;AACRC,0B,GAAaC,cAAIC,QAAJ,CAAaJ,IAAIK,MAAjB,EAAyBC,eAAWC,UAApC,C;;sBACfL,WAAWM,KAAX,KAAqB,I;;;;;;;uBAEf,KAAKV,KAAL,CAAWW,GAAX,GAAiBC,IAAjB,CAAsB,UAACC,QAAD,EAAc;AACxC,sBAAIb,QAAQ,EAAZ;AACAa,2BAASC,OAAT,CAAiB,UAACC,GAAD,EAAS;AACxBf,0BAAMgB,IAAN,CAAWD,IAAIE,IAAJ,EAAX;AACD,mBAFD;AAGA,sBAAIjB,MAAMkB,MAAN,GAAe,CAAC,CAApB,EAAuB;AACrBf,wBAAIgB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBpB,KAArB;AACD,mBAFD,MAEO;AACL,0BAAM;AACJqB,4BAAM,cADF;AAEJC,+BAAS;AAFL,qBAAN;AAID;AACF,iBAbK,C;;;;;;;;;;AAeN,qBAAKvB,MAAL,CAAYW,KAAZ;AACAP,oBAAIgB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB;;;;;;;AAGF,qBAAKrB,MAAL,CAAYW,KAAZ,CAAkB,2BAA2BN,WAAWM,KAAxD;AACAP,oBAAIgB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBhB,WAAWM,KAAhC;;;;;;;;;;;;;;;;;;;4FAIUR,G,EAAKC,G;;;;;;AACXC,0B,GAAaC,cAAIC,QAAJ,CAAaJ,IAAIK,MAAjB,EAAyBC,eAAWe,aAApC,C;;sBACfnB,WAAWM,KAAX,KAAqB,I;;;;;;;uBAEf,KAAKV,KAAL,CAAWe,GAAX,CAAeb,IAAIK,MAAJ,CAAWiB,EAA1B,EAA8Bb,GAA9B,GAAoCC,IAApC,CAAyC,UAACG,GAAD,EAAS;AACtDZ,sBAAIgB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBL,IAAIE,IAAJ,EAArB;AACD,iBAFK,C;;;;;;;;;;AAIN,qBAAKlB,MAAL,CAAYW,KAAZ;AACAP,oBAAIgB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB;;;;;;;AAGF,qBAAKrB,MAAL,CAAYW,KAAZ,CAAkB,2BAA2BN,WAAWM,KAAxD;AACAP,oBAAIgB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBhB,WAAWM,KAAhC;;;;;;;;;;;;;;;;;;;;;kBAMSb,c","file":"teamController.js","sourcesContent":["//third party\nimport Joi from 'joi'\n\n//internal\nimport TeamSchema from '../models/Team.js'\n\nclass TeamController {\n\n  constructor(db, logger) {\n    this.teams = db.collection('teams')\n    this.logger = logger\n  }\n\n  async list(req, res) {\n    const validation = Joi.validate(req.params, TeamSchema.listParams)\n    if (validation.error === null) {\n      try {\n        await this.teams.get().then((snapshot) => {\n          let teams = []\n          snapshot.forEach((doc) => {\n            teams.push(doc.data())\n          })\n          if (teams.length > -1) {\n            res.status(200).send(teams)\n          } else {\n            throw {\n              name: 'NoTeamsExist',\n              message: 'There were no teams found in the database for this query!'\n            }\n          }\n        })\n      } catch (error) {\n        this.logger.error(error)\n        res.status(400).send(error)\n      }\n    } else {\n      this.logger.error('Joi validation error: ' + validation.error)\n      res.status(400).send(validation.error)\n    }\n  }\n\n  async listOne(req, res) {\n    const validation = Joi.validate(req.params, TeamSchema.listOneParams)\n    if (validation.error === null) {\n      try {\n        await this.teams.doc(req.params.id).get().then((doc) => {\n          res.status(200).send(doc.data())\n        })\n      } catch (error) {\n        this.logger.error(error)\n        res.status(400).send(error)\n      }\n    } else {\n      this.logger.error('Joi validation error: ' + validation.error)\n      res.status(400).send(validation.error)\n    }\n  }\n\n}\n\nexport default TeamController\n"]}