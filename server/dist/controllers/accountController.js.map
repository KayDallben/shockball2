{"version":3,"sources":["../../src/controllers/accountController.js"],"names":["AccountController","db","logger","accounts","collection","req","res","validation","validate","params","listOneParams","error","doc","id","get","then","userAccount","data","transactions","getCollections","collections","length","forEach","snapshot","doc2","push","status","send","listParams","name","message"],"mappings":"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","file":"accountController.js","sourcesContent":["//third party\r\nimport Joi from 'joi'\r\n\r\n//internal\r\nimport AccountSchema from '../models/Account.js'\r\n\r\nclass AccountController {\r\n\r\n  constructor(db, logger) {\r\n    this.accounts = db.collection('accounts')\r\n    this.logger = logger\r\n  }\r\n\r\n  async listOne(req, res) {\r\n    const validation = Joi.validate(req.params, AccountSchema.listOneParams)\r\n    if (validation.error === null) {\r\n      try {\r\n        await this.accounts.doc(req.params.id).get().then(async (doc) => {\r\n          let userAccount = doc.data()\r\n          userAccount.transactions = []\r\n          await this.accounts.doc(req.params.id).getCollections().then(collections => {\r\n            if (collections.length > 0) {\r\n              collections.forEach(collection => {\r\n                collection.get().then(snapshot => {\r\n                  snapshot.forEach((doc2) => {\r\n                    userAccount.transactions.push(doc2.data())\r\n                  })\r\n                  res.status(200).send(userAccount)\r\n                })\r\n              })\r\n            } else {\r\n              //transactions collection doesn't exist\r\n              userAccount.transactions = []\r\n              res.status(200).send(userAccount)\r\n            }\r\n          })\r\n        })\r\n      } catch (error) {\r\n        this.logger.error(error)\r\n        res.status(400).send(error)\r\n      }\r\n    } else {\r\n      this.logger.error('Joi validation error: ' + validation.error)\r\n      res.status(400).send(validation.error)\r\n    }\r\n  }\r\n\r\n  async list(req, res) {\r\n    const validation = Joi.validate(req.params, AccountSchema.listParams)\r\n    if (validation.error === null) {\r\n      try {\r\n        await this.accounts.get().then((snapshot) => {\r\n          let accounts = []\r\n          snapshot.forEach((doc) => {\r\n            accounts.push(doc.data())\r\n          })\r\n          if (accounts.length > -1) {\r\n            res.status(200).send(accounts)\r\n          } else {\r\n            throw {\r\n              name: 'NoAccountsExist',\r\n              message: 'There were no accounts found in the database for this query!'\r\n            }\r\n          }\r\n        })\r\n      } catch (error) {\r\n        this.logger.error(error)\r\n        res.status(400).send(error)\r\n      }\r\n    } else {\r\n      this.logger.error('Joi validation error: ' + validation.error)\r\n      res.status(400).send(validation.error)\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport default AccountController"]}