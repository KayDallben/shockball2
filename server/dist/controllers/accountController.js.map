{"version":3,"sources":["../../src/controllers/accountController.js"],"names":["AccountController","db","logger","accounts","collection","req","res","validation","Joi","validate","params","AccountSchema","listOneParams","error","doc","id","get","then","userAccount","data","transactions","getCollections","collections","length","forEach","snapshot","doc2","push","status","send","listParams","name","message"],"mappings":"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","file":"accountController.js","sourcesContent":["//third party\nimport Joi from 'joi'\n\n//internal\nimport AccountSchema from '../models/Account.js'\n\nclass AccountController {\n\n  constructor(db, logger) {\n    this.accounts = db.collection('accounts')\n    this.logger = logger\n  }\n\n  async listOne(req, res) {\n    const validation = Joi.validate(req.params, AccountSchema.listOneParams)\n    if (validation.error === null) {\n      try {\n        await this.accounts.doc(req.params.id).get().then(async (doc) => {\n          let userAccount = doc.data()\n          userAccount.transactions = []\n          await this.accounts.doc(req.params.id).getCollections().then(collections => {\n            if (collections.length > 0) {\n              collections.forEach(collection => {\n                collection.get().then(snapshot => {\n                  snapshot.forEach((doc2) => {\n                    userAccount.transactions.push(doc2.data())\n                  })\n                  res.status(200).send(userAccount)\n                })\n              })\n            } else {\n              //transactions collection doesn't exist\n              userAccount.transactions = []\n              res.status(200).send(userAccount)\n            }\n          })\n        })\n      } catch (error) {\n        this.logger.error(error)\n        res.status(400).send(error)\n      }\n    } else {\n      this.logger.error('Joi validation error: ' + validation.error)\n      res.status(400).send(validation.error)\n    }\n  }\n\n  async list(req, res) {\n    const validation = Joi.validate(req.params, AccountSchema.listParams)\n    if (validation.error === null) {\n      try {\n        await this.accounts.get().then((snapshot) => {\n          let accounts = []\n          snapshot.forEach((doc) => {\n            accounts.push(doc.data())\n          })\n          if (accounts.length > -1) {\n            res.status(200).send(accounts)\n          } else {\n            throw {\n              name: 'NoAccountsExist',\n              message: 'There were no accounts found in the database for this query!'\n            }\n          }\n        })\n      } catch (error) {\n        this.logger.error(error)\n        res.status(400).send(error)\n      }\n    } else {\n      this.logger.error('Joi validation error: ' + validation.error)\n      res.status(400).send(validation.error)\n    }\n  }\n\n}\n\nexport default AccountController"]}