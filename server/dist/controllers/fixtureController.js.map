{"version":3,"sources":["../../src/controllers/fixtureController.js"],"names":["FixtureController","db","logger","fixtures","collection","events","req","res","Object","keys","query","length","obj","constructor","validation","validate","params","listParams","error","get","then","snapshot","forEach","doc","push","data","status","send","name","message","console","log","searchValidation","listSearchParams","where","queryProp","queryVal","listOneParams","fixtureData","id","fixtureInfo"],"mappings":"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","file":"fixtureController.js","sourcesContent":["//third party\r\nimport Joi from 'joi'\r\n\r\n//internal\r\nimport FixtureSchema from '../models/Fixture.js'\r\n\r\nclass FixtureController {\r\n\r\n  constructor(db, logger) {\r\n    this.fixtures = db.collection('fixtures')\r\n    this.events = db.collection('events')\r\n    this.logger = logger\r\n  }\r\n\r\n  async list(req, res) {\r\n    if (Object.keys(req.query).length === 0 && obj.constructor === Object) {\r\n      const validation = Joi.validate(req.params, FixtureSchema.listParams)\r\n      if (validation.error === null) {\r\n        try {\r\n          await this.fixtures.get().then((snapshot) => {\r\n            let fixtures = []\r\n            snapshot.forEach((doc) => {\r\n              fixtures.push(doc.data())\r\n            })\r\n            if (fixtures.length > -1) {\r\n              res.status(200).send(fixtures)\r\n            } else {\r\n              throw {\r\n                name: 'NoFixturesExist',\r\n                message: 'There were no fixtures found in the database for this query!'\r\n              }\r\n            }\r\n          })\r\n        } catch (error) {\r\n          this.logger.error(error)\r\n          res.status(400).send(error)\r\n        }\r\n      } else {\r\n        this.logger.error('Joi validation error: ' + validation.error)\r\n        res.status(400).send(validation.error)\r\n      }\r\n    } else {\r\n      //we are searching for fixtures by criteria\r\n      console.log(req.query)\r\n      const searchValidation = Joi.validate(req.query, FixtureSchema.listSearchParams)\r\n      if (searchValidation.error === null) {\r\n        try {\r\n          await this.fixtures.where(req.query.queryProp, '==', req.query.queryVal).get().then((snapshot) => {\r\n            let fixtures = []\r\n            snapshot.forEach((doc) => {\r\n              fixtures.push(doc.data())\r\n            })\r\n            if (fixtures.length > -1) {\r\n              res.status(200).send(fixtures)\r\n            } else {\r\n              throw {\r\n                name: 'NoFixturesExist',\r\n                message: 'There were no fixtures found in the database for this query!'\r\n              }\r\n            }\r\n          })\r\n        } catch (error) {\r\n          this.logger.error(error)\r\n          res.status(400).send(error)\r\n        }\r\n      } else {\r\n        this.logger.error('Joi validation error: ' + validation.error)\r\n        res.status(400).send(validation.error)\r\n      }\r\n    }\r\n    \r\n  }\r\n\r\n  async listOne(req, res) {\r\n    const validation = Joi.validate(req.params, FixtureSchema.listOneParams)\r\n    if (validation.error === null) {\r\n      try {\r\n        let fixtureData = {}\r\n        await this.fixtures.doc(req.params.id).get().then((doc) => {\r\n          fixtureData.fixtureInfo = doc.data()\r\n        })\r\n        await this.events.where('fixtureId', '==', req.params.id).get().then((snapshot) => {\r\n          let events = []\r\n          snapshot.forEach((doc) => {\r\n            events.push(doc.data())\r\n          })\r\n          if (events.length > -1) {\r\n            fixtureData.events = events\r\n          } else {\r\n            throw {\r\n              name: 'NoEventsExist',\r\n              message: 'There were no events found in the database for this fixture!'\r\n            }\r\n          }\r\n        })\r\n        res.status(200).send(fixtureData)\r\n      } catch (error) {\r\n        this.logger.error(error)\r\n        res.status(400).send(error)\r\n      }\r\n    } else {\r\n      this.logger.error('Joi validation error: ' + validation.error)\r\n      res.status(400).send(validation.error)\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport default FixtureController\r\n"]}