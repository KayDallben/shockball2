{"version":3,"sources":["../../src/controllers/fixtureController.js"],"names":["FixtureController","db","logger","fixtures","collection","events","req","res","Object","keys","query","length","constructor","validation","Joi","validate","params","FixtureSchema","listParams","error","get","then","snapshot","forEach","doc","push","data","status","send","name","message","searchValidation","listSearchParams","where","queryProp","queryVal","listOneParams","fixtureData","id","fixtureInfo","orderBy"],"mappings":"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","file":"fixtureController.js","sourcesContent":["//third party\nimport Joi from 'joi'\n\n//internal\nimport FixtureSchema from '../models/Fixture.js'\n\nclass FixtureController {\n\n  constructor(db, logger) {\n    this.fixtures = db.collection('fixtures')\n    this.events = db.collection('events')\n    this.logger = logger\n  }\n\n  async list(req, res) {\n    if (Object.keys(req.query).length === 0 && req.query.constructor === Object) {\n      const validation = Joi.validate(req.params, FixtureSchema.listParams)\n      if (validation.error === null) {\n        try {\n          await this.fixtures.get().then((snapshot) => {\n            let fixtures = []\n            snapshot.forEach((doc) => {\n              fixtures.push(doc.data())\n            })\n            if (fixtures.length > -1) {\n              res.status(200).send(fixtures)\n            } else {\n              throw {\n                name: 'NoFixturesExist',\n                message: 'There were no fixtures found in the database for this query!'\n              }\n            }\n          })\n        } catch (error) {\n          this.logger.error(error)\n          res.status(400).send(error)\n        }\n      } else {\n        this.logger.error('Joi validation error: ' + validation.error)\n        res.status(400).send(validation.error)\n      }\n    } else {\n      //we are searching for fixtures by criteria\n      const searchValidation = Joi.validate(req.query, FixtureSchema.listSearchParams)\n      if (searchValidation.error === null) {\n        try {\n          await this.fixtures.where(req.query.queryProp, '==', req.query.queryVal).get().then((snapshot) => {\n            let fixtures = []\n            snapshot.forEach((doc) => {\n              fixtures.push(doc.data())\n            })\n            if (fixtures.length > -1) {\n              res.status(200).send(fixtures)\n            } else {\n              throw {\n                name: 'NoFixturesExist',\n                message: 'There were no fixtures found in the database for this query!'\n              }\n            }\n          })\n        } catch (error) {\n          this.logger.error(error)\n          res.status(400).send(error)\n        }\n      } else {\n        this.logger.error('Joi validation error: ' + searchValidation.error)\n        res.status(400).send(searchValidation.error)\n      }\n    }\n  }\n\n  async listOne(req, res) {\n    const validation = Joi.validate(req.params, FixtureSchema.listOneParams)\n    if (validation.error === null) {\n      try {\n        let fixtureData = {}\n        await this.fixtures.doc(req.params.id).get().then((doc) => {\n          fixtureData.fixtureInfo = doc.data()\n        })\n        await this.events.where('fixtureId', '==', req.params.id).orderBy('recordRealTime').get().then((snapshot) => {\n          let events = []\n          snapshot.forEach((doc) => {\n            events.push(doc.data())\n          })\n          if (events.length > -1) {\n            fixtureData.events = events\n          } else {\n            throw {\n              name: 'NoEventsExist',\n              message: 'There were no events found in the database for this fixture!'\n            }\n          }\n        })\n        res.status(200).send(fixtureData)\n      } catch (error) {\n        this.logger.error(error)\n        res.status(400).send(error)\n      }\n    } else {\n      this.logger.error('Joi validation error: ' + validation.error)\n      res.status(400).send(validation.error)\n    }\n  }\n\n}\n\nexport default FixtureController\n"]}