{"version":3,"sources":["../../src/controllers/fixtureController.js"],"names":["FixtureController","db","logger","fixtures","collection","events","req","res","validation","validate","params","listParams","error","where","get","then","snapshot","forEach","doc","push","data","length","status","send","name","message","listOneParams","fixtureData","id","fixtureInfo"],"mappings":";;;;;;qjBAAA;;;AAGA;;;AAFA;;;;AAGA;;;;;;;;;;IAEMA,iB;AAEJ,6BAAYC,EAAZ,EAAgBC,MAAhB,EAAwB;AAAA;;AACtB,SAAKC,QAAL,GAAgBF,GAAGG,UAAH,CAAc,UAAd,CAAhB;AACA,SAAKC,MAAL,GAAcJ,GAAGG,UAAH,CAAc,QAAd,CAAd;AACA,SAAKF,MAAL,GAAcA,MAAd;AACD;;;;;0FAEUI,G,EAAKC,G;;;;;;AACRC,0B,GAAa,cAAIC,QAAJ,CAAaH,IAAII,MAAjB,EAAyB,kBAAcC,UAAvC,C;;sBACfH,WAAWI,KAAX,KAAqB,I;;;;;;;uBAEf,KAAKT,QAAL,CAAcU,KAAd,CAAoB,QAApB,EAA8B,IAA9B,EAAoC,GAApC,EAAyCC,GAAzC,GAA+CC,IAA/C,CAAoD,UAACC,QAAD,EAAc;AACtE,sBAAIb,WAAW,EAAf;AACAa,2BAASC,OAAT,CAAiB,UAACC,GAAD,EAAS;AACxBf,6BAASgB,IAAT,CAAcD,IAAIE,IAAJ,EAAd;AACD,mBAFD;AAGA,sBAAIjB,SAASkB,MAAT,GAAkB,CAAC,CAAvB,EAA0B;AACxBd,wBAAIe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBpB,QAArB;AACD,mBAFD,MAEO;AACL,0BAAM;AACJqB,4BAAM,iBADF;AAEJC,+BAAS;AAFL,qBAAN;AAID;AACF,iBAbK,C;;;;;;;;;;AAeN,qBAAKvB,MAAL,CAAYU,KAAZ;AACAL,oBAAIe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB;;;;;;;AAGF,qBAAKrB,MAAL,CAAYU,KAAZ,CAAkB,2BAA2BJ,WAAWI,KAAxD;AACAL,oBAAIe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBf,WAAWI,KAAhC;;;;;;;;;;;;;;;;;;;4FAIUN,G,EAAKC,G;;;;;;AACXC,0B,GAAa,cAAIC,QAAJ,CAAaH,IAAII,MAAjB,EAAyB,kBAAcgB,aAAvC,C;;sBACflB,WAAWI,KAAX,KAAqB,I;;;;;;AAEjBe,2B,GAAc,E;;uBACZ,KAAKxB,QAAL,CAAce,GAAd,CAAkBZ,IAAII,MAAJ,CAAWkB,EAA7B,EAAiCd,GAAjC,GAAuCC,IAAvC,CAA4C,UAACG,GAAD,EAAS;AACzDS,8BAAYE,WAAZ,GAA0BX,IAAIE,IAAJ,EAA1B;AACD,iBAFK,C;;;;uBAGA,KAAKf,MAAL,CAAYQ,KAAZ,CAAkB,WAAlB,EAA+B,IAA/B,EAAqCP,IAAII,MAAJ,CAAWkB,EAAhD,EAAoDd,GAApD,GAA0DC,IAA1D,CAA+D,UAACC,QAAD,EAAc;AACjF,sBAAIX,SAAS,EAAb;AACAW,2BAASC,OAAT,CAAiB,UAACC,GAAD,EAAS;AACxBb,2BAAOc,IAAP,CAAYD,IAAIE,IAAJ,EAAZ;AACD,mBAFD;AAGA,sBAAIf,OAAOgB,MAAP,GAAgB,CAAC,CAArB,EAAwB;AACtBM,gCAAYtB,MAAZ,GAAqBA,MAArB;AACD,mBAFD,MAEO;AACL,0BAAM;AACJmB,4BAAM,eADF;AAEJC,+BAAS;AAFL,qBAAN;AAID;AACF,iBAbK,C;;;AAcNlB,oBAAIe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBI,WAArB;;;;;;;;AAEA,qBAAKzB,MAAL,CAAYU,KAAZ;AACAL,oBAAIe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB;;;;;;;AAGF,qBAAKrB,MAAL,CAAYU,KAAZ,CAAkB,2BAA2BJ,WAAWI,KAAxD;AACAL,oBAAIe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBf,WAAWI,KAAhC;;;;;;;;;;;;;;;;;;;;;kBAMSZ,iB","file":"fixtureController.js","sourcesContent":["//third party\r\nimport Joi from 'joi'\r\n\r\n//internal\r\nimport FixtureSchema from '../models/Fixture.js'\r\n\r\nclass FixtureController {\r\n\r\n  constructor(db, logger) {\r\n    this.fixtures = db.collection('fixtures')\r\n    this.events = db.collection('events')\r\n    this.logger = logger\r\n  }\r\n\r\n  async list(req, res) {\r\n    const validation = Joi.validate(req.params, FixtureSchema.listParams)\r\n    if (validation.error === null) {\r\n      try {\r\n        await this.fixtures.where('season', '==', '1').get().then((snapshot) => {\r\n          let fixtures = []\r\n          snapshot.forEach((doc) => {\r\n            fixtures.push(doc.data())\r\n          })\r\n          if (fixtures.length > -1) {\r\n            res.status(200).send(fixtures)\r\n          } else {\r\n            throw {\r\n              name: 'NoFixturesExist',\r\n              message: 'There were no fixtures found in the database for this query!'\r\n            }\r\n          }\r\n        })\r\n      } catch (error) {\r\n        this.logger.error(error)\r\n        res.status(400).send(error)\r\n      }\r\n    } else {\r\n      this.logger.error('Joi validation error: ' + validation.error)\r\n      res.status(400).send(validation.error)\r\n    }\r\n  }\r\n\r\n  async listOne(req, res) {\r\n    const validation = Joi.validate(req.params, FixtureSchema.listOneParams)\r\n    if (validation.error === null) {\r\n      try {\r\n        let fixtureData = {}\r\n        await this.fixtures.doc(req.params.id).get().then((doc) => {\r\n          fixtureData.fixtureInfo = doc.data()\r\n        })\r\n        await this.events.where('fixtureId', '==', req.params.id).get().then((snapshot) => {\r\n          let events = []\r\n          snapshot.forEach((doc) => {\r\n            events.push(doc.data())\r\n          })\r\n          if (events.length > -1) {\r\n            fixtureData.events = events\r\n          } else {\r\n            throw {\r\n              name: 'NoEventsExist',\r\n              message: 'There were no events found in the database for this fixture!'\r\n            }\r\n          }\r\n        })\r\n        res.status(200).send(fixtureData)\r\n      } catch (error) {\r\n        this.logger.error(error)\r\n        res.status(400).send(error)\r\n      }\r\n    } else {\r\n      this.logger.error('Joi validation error: ' + validation.error)\r\n      res.status(400).send(validation.error)\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport default FixtureController\r\n"]}