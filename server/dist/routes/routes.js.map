{"version":3,"sources":["../../src/routes/routes.js"],"names":["routes","db","logger","profileController","ProfileController","loginController","LoginController","refreshController","RefreshController","teamController","TeamController","fixtureController","FixtureController","playerController","PlayerController","accountController","AccountController","contractController","ContractController","eventController","EventController","get","authCheck","req","res","listOne","list","put","update","delete","remove","post","create"],"mappings":"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","file":"routes.js","sourcesContent":["//third party libraries\nimport { Router } from 'express'\nconst routes = Router()\n\n// Internal code/packages\nimport authCheck from '../lib/authCheck'\nimport ProfileController from '../controllers/profileController'\nimport LoginController from '../controllers/loginController'\nimport RefreshController from '../controllers/refreshController'\nimport TeamController from '../controllers/teamController'\nimport FixtureController from '../controllers/fixtureController'\nimport PlayerController from '../controllers/playerController'\nimport AccountController from '../controllers/accountController'\nimport ContractController from '../controllers/contractController'\nimport EventController from '../controllers/eventController'\n\nexport default (db, logger) => {\n  const profileController = new ProfileController(db, logger)\n  const loginController = new LoginController(db, logger)\n  const refreshController = new RefreshController(db, logger)\n  const teamController = new TeamController(db, logger)\n  const fixtureController = new FixtureController(db, logger)\n  const playerController = new PlayerController(db, logger)\n  const accountController = new AccountController(db, logger)\n  const contractController = new ContractController(db, logger)\n  const eventController = new EventController(db, logger)\n\n  /**\n   * @swagger\n   * definitions:\n   *   Profile:\n   *     properties:\n   *       access_token:\n   *         type: \"string\"\n   *   Login:\n   *     properties:\n   *       authorization_code:\n   *         type: \"string\"\n   *   Team:\n   *     properties:\n   *       teamName:\n   *         type: \"string\"\n   *       teamPicUrl:\n   *         type: \"string\"\n   *       teamVenue:\n   *         type: \"string\"\n   */\n\n  /**\n   * @swagger\n   * /api/profile:\n   *   x-swagger-router-controller: ../controllers/profileController\n   *   get:\n   *     tags:\n   *       - Profile\n   *     description: Get the profile data for the current player. Returns a Player object. Creates a new Player if user is new.\n   *     operationId: listOne\n   *     produces:\n   *       - application/json\n   *     parameters:\n   *       - access_token: access token\n   *         description: SWC access token of the current user\n   *         in: query\n   *         name: access_token\n   *         required: true\n   *         schema:\n   *           $ref: '#/definitions/Profile'\n   *     responses:\n   *       200:\n   *         description: Success\n   *         schema:\n   *           $ref: \"#/definitions/Profile\"\n   */\n  routes.get('/profile', authCheck, (req, res) => {\n    profileController.listOne(req, res)\n  })\n\n    /**\n   * @swagger\n   * /api/login:\n   *   x-swagger-router-controller: ../controllers/loginController\n   *   get:\n   *     tags:\n   *       - Login\n   *     description: Login the user and get player access token from SWC api\n   *     operationId: listOne\n   *     produces:\n   *       - application/json\n   *     parameters:\n   *       - authorization_code: authorization code\n   *         description: SWC authorization code of the current user\n   *         in: query\n   *         name: authorization_code\n   *         required: true\n   *         schema:\n   *           $ref: '#/definitions/Login'\n   *     responses:\n   *       200:\n   *         description: Success\n   *         schema:\n   *           $ref: \"#/definitions/Login\"\n   */\n  routes.get('/login', (req, res) => {\n    loginController.listOne(req, res)\n  })\n\n    /**\n   * @swagger\n   * /api/refresh:\n   *   x-swagger-router-controller: ../controllers/refreshController\n   *   get:\n   *     tags:\n   *       - Refresh\n   *     description: Get a new access_token and refresh_token from SWC api\n   *     operationId: listOne\n   *     produces:\n   *       - application/json\n   *     parameters:\n   *       - access_token: access_token\n   *         description: SWC access token of the current user\n   *         in: query\n   *         name: access_token\n   *         required: true\n   *         schema:\n   *           $ref: '#/definitions/Refresh'\n   *     responses:\n   *       200:\n   *         description: Success\n   *         schema:\n   *           $ref: \"#/definitions/Refresh\"\n   */\n  routes.get('/refresh', (req, res) => {\n    refreshController.listOne(req, res)\n  })\n\n/**\n   * @swagger\n   * /api/teams:\n   *   x-swagger-router-controller: ../controllers/teamController\n   *   get:\n   *     tags:\n   *       - Team\n   *     description: Get all teams\n   *     operationId: list\n   *     produces:\n   *       - application/json\n   *     responses:\n   *       200:\n   *         description: Success\n   *         schema:\n   *           $ref: \"#/definitions/Team\"\n   */\n  routes.get('/teams', authCheck, (req, res) => {\n    teamController.list(req, res)\n  })\n    /**\n   * @swagger\n   * /api/teams/{id}:\n   *   x-swagger-router-controller: ../controllers/teamController\n   *   get:\n   *     tags:\n   *       - Team\n   *     description: Get team by id\n   *     operationId: listOne\n   *     produces:\n   *       - application/json\n   *     parameters:\n   *       - id: id\n   *         description: team's id\n   *         in: query\n   *         name: id\n   *         required: true\n   *         schema:\n   *           $ref: '#/definitions/Team'\n   *     responses:\n   *       200:\n   *         description: Success\n   *         schema:\n   *           $ref: \"#/definitions/Team\"\n   */\n  routes.get('/teams/:id', authCheck, (req, res) => {\n    teamController.listOne(req, res)\n  })\n\n  /**\n   * @swagger\n   * /api/fixtures:\n   *   x-swagger-router-controller: ../controllers/fixtureController\n   *   get:\n   *     tags:\n   *       - Fixture\n   *     description: Get all fixtures\n   *     operationId: list\n   *     produces:\n   *       - application/json\n   *     parameters:\n   *       - queryProp: fixture property to query by\n   *         description: fixture property to query by\n   *         in: query\n   *         name: queryProp\n   *         required: false\n   *         schema:\n   *           $ref: '#/definitions/Fixture'\n   *       - queryVal: fixture property value to query by\n   *         description: fixture property value to query by\n   *         in: query\n   *         name: queryVal\n   *         required: false\n   *         schema:\n   *           $ref: '#/definitions/Fixture'\n   *     responses:\n   *       200:\n   *         description: Success\n   *         schema:\n   *           $ref: \"#/definitions/Fixture\"\n   */\n  routes.get('/fixtures', authCheck, (req, res) => {\n    fixtureController.list(req, res)\n  })\n  /**\n   * @swagger\n   * /api/fixtures/{id}:\n   *   x-swagger-router-controller: ../controllers/fixtureController\n   *   get:\n   *     tags:\n   *       - Fixture\n   *     description: Get fixture by id\n   *     operationId: listOne\n   *     produces:\n   *       - application/json\n   *     parameters:\n   *       - id: id\n   *         description: fixture's id\n   *         in: query\n   *         name: id\n   *         required: true\n   *         schema:\n   *           $ref: '#/definitions/Fixture'\n   *     responses:\n   *       200:\n   *         description: Success\n   *         schema:\n   *           $ref: \"#/definitions/Fixture\"\n   */\n  routes.get('/fixtures/:id', authCheck, (req, res) => {\n    fixtureController.listOne(req, res)\n  })\n  /**\n   * @swagger\n   * /api/players:\n   *   x-swagger-router-controller: ../controllers/playerController\n   *   get:\n   *     tags:\n   *       - Player\n   *     description: Get all players\n   *     operationId: list\n   *     produces:\n   *       - application/json\n   *     parameters:\n   *       - queryProp: player property to query by\n   *         description: player property to query by\n   *         in: query\n   *         name: queryProp\n   *         required: false\n   *         schema:\n   *           $ref: '#/definitions/Player'\n   *       - queryVal: player property value to query by\n   *         description: player property value to query by\n   *         in: query\n   *         name: queryVal\n   *         required: false\n   *         schema:\n   *           $ref: '#/definitions/Player'\n   *     responses:\n   *       200:\n   *         description: Success\n   *         schema:\n   *           $ref: \"#/definitions/Player\"\n   */\n  routes.get('/players', authCheck, (req, res) => {\n    playerController.list(req, res)\n  })\n  /**\n   * @swagger\n   * /api/players/{id}:\n   *   x-swagger-router-controller: ../controllers/playerController\n   *   get:\n   *     tags:\n   *       - Player\n   *     description: Get player by id\n   *     operationId: listOne\n   *     produces:\n   *       - application/json\n   *     parameters:\n   *       - id: id\n   *         description: player's id\n   *         in: query\n   *         name: id\n   *         required: true\n   *         schema:\n   *           $ref: '#/definitions/Player'\n   *     responses:\n   *       200:\n   *         description: Success\n   *         schema:\n   *           $ref: \"#/definitions/Player\"\n   */\n  routes.get('/players/:id', authCheck, (req, res) => {\n    playerController.listOne(req, res)\n  })\n\n  /**\n   * @swagger\n   * /api/players/{id}:\n   *   x-swagger-router-controller: ../controllers/playerController\n   *   put:\n   *     tags:\n   *       - Player\n   *     description: Updates a Player\n   *     operationId: update\n   *     produces:\n   *       - application/json\n   *     parameters:\n   *       - id: id\n   *         description: player's id\n   *         in: query\n   *         name: id\n   *         required: true\n   *         schema:\n   *           $ref: '#/definitions/Player'\n   *       - name: regimen\n   *         description: Object with value and label string properties indicating what skill to train\n   *         in: query\n   *         required: true\n   *         schema:\n   *           $ref: '#/definitions/Player'\n   *     responses:\n   *       200:\n   *         description: Success\n   *         schema:\n   *           $ref: \"#/definitions/Player\"\n   */\n  routes.put('/players/:id', authCheck, (req, res) => {\n    playerController.update(req, res)\n  })\n\n  /**\n   * @swagger\n   * /api/accounts/{id}:\n   *   x-swagger-router-controller: ../controllers/accountController\n   *   get:\n   *     tags:\n   *       - Account\n   *     description: Get account by id\n   *     operationId: listOne\n   *     produces:\n   *       - application/json\n   *     parameters:\n   *       - id: id\n   *         description: player's account id\n   *         in: query\n   *         name: id\n   *         required: true\n   *         schema:\n   *           $ref: '#/definitions/Account'\n   *     responses:\n   *       200:\n   *         description: Success\n   *         schema:\n   *           $ref: \"#/definitions/Account\"\n   */\n  routes.get('/accounts/:id', authCheck, (req, res) => {\n    accountController.listOne(req, res)\n  })\n\n  /**\n   * @swagger\n   * /api/contracts:\n   *   x-swagger-router-controller: ../controllers/contractController\n   *   get:\n   *     tags:\n   *       - Contract\n   *     description: Get all contracts\n   *     operationId: list\n   *     produces:\n   *       - application/json\n   *     parameters:\n   *       - queryProp: contract property to query by\n   *         description: contract property to query by\n   *         in: query\n   *         name: queryProp\n   *         required: false\n   *         schema:\n   *           $ref: '#/definitions/Contract'\n   *       - queryVal: contract property value to query by\n   *         description: contract property value to query by\n   *         in: query\n   *         name: queryVal\n   *         required: false\n   *         schema:\n   *           $ref: '#/definitions/Contract'\n   *     responses:\n   *       200:\n   *         description: Success\n   *         schema:\n   *           $ref: \"#/definitions/Contract\"\n   */\n  routes.get('/contracts', authCheck, (req, res) => {\n    contractController.list(req, res)\n  })\n  /**\n   * @swagger\n   * /api/contracts/{id}:\n   *   x-swagger-router-controller: ../controllers/contractController\n   *   get:\n   *     tags:\n   *       - Contract\n   *     description: Get contract by id\n   *     operationId: listOne\n   *     produces:\n   *       - application/json\n   *     parameters:\n   *       - id: id\n   *         description: contract's id\n   *         in: query\n   *         name: id\n   *         required: true\n   *         schema:\n   *           $ref: '#/definitions/Contract'\n   *     responses:\n   *       200:\n   *         description: Success\n   *         schema:\n   *           $ref: \"#/definitions/Contract\"\n   */\n  routes.get('/contracts/:id', authCheck, (req, res) => {\n    contractController.listOne(req, res)\n  })\n\n  /**\n   * @swagger\n   * /api/contracts/{id}:\n   *   x-swagger-router-controller: ../controllers/contractController\n   *   get:\n   *     tags:\n   *       - Contract\n   *     description: Delete contract by id\n   *     operationId: remove\n   *     produces:\n   *       - application/json\n   *     parameters:\n   *       - id: id\n   *         description: contract's id\n   *         in: query\n   *         name: id\n   *         required: true\n   *         schema:\n   *           $ref: '#/definitions/Contract'\n   *     responses:\n   *       200:\n   *         description: Success\n   *         schema:\n   *           $ref: \"#/definitions/Contract\"\n   */\n  routes.delete('/contracts/:id', authCheck, (req, res) => {\n    contractController.remove(req, res)\n  })\n\n  /**\n   * @swagger\n   * /api/contracts:\n   *   x-swagger-router-controller: ../controllers/contractController\n   *   post:\n   *     tags:\n   *       - Contract\n   *     description: Creates a new Contract\n   *     operationId: create\n   *     produces:\n   *       - application/json\n   *     parameters:\n   *       - games: number of games committed to by player\n   *         description: number of games committed to by player\n   *         in: query\n   *         name: games\n   *         required: true\n   *         schema:\n   *           $ref: '#/definitions/Contract'\n   *       - salary: player's salary, calculated from total price over total games\n   *         description: player's salary, calculated from total price over total games\n   *         in: query\n   *         name: salary\n   *         required: true\n   *         schema:\n   *           $ref: '#/definitions/Contract'\n   *       - playerName: name of player to be purchased\n   *         description: name of player to be purchased\n   *         in: query\n   *         name: playerName\n   *         required: true\n   *         schema:\n   *           $ref: '#/definitions/Contract'\n   *       - playerUid: uid of player to be purchased\n   *         description: uid of player to be purchased\n   *         in: query\n   *         required: true\n   *         schema:\n   *           $ref: '#/definitions/Contract'\n   *       - purchasePrice: purchasePrice of contract\n   *         description: purchasePrice of contract\n   *         in: query\n   *         name: purchasePrice\n   *         required: true\n   *         schema:\n   *           $ref: '#/definitions/Contract'\n   *       - status: status of contract\n   *         description: status of contract\n   *         in: query\n   *         name: status\n   *         required: true\n   *         schema:\n   *           $ref: '#/definitions/Contract'\n   *       - teamName: name of purchasing team\n   *         description: name of purchasing team\n   *         in: query\n   *         name: teamName\n   *         required: true\n   *         schema:\n   *           $ref: '#/definitions/Contract'\n   *       - teamUid: Uid of purchasing team\n   *         description: uid of purchasing team\n   *         in: query\n   *         name: teamUid\n   *         required: true\n   *         schema:\n   *           $ref: '#/definitions/Contract'\n   *     responses:\n   *       201:\n   *         description: Success\n   *         schema:\n   *           $ref: \"#/definitions/Contract\"\n   */\n  routes.post('/contracts', authCheck, (req, res) => {\n    contractController.create(req, res)\n  })\n\n    /**\n   * @swagger\n   * /api/contracts/{id}:\n   *   x-swagger-router-controller: ../controllers/contractController\n   *   put:\n   *     tags:\n   *       - Contract\n   *     description: Updates a Contract\n   *     operationId: update\n   *     produces:\n   *       - application/json\n   *     parameters:\n   *       - id: id\n   *         description: Contract's id\n   *         in: path\n   *         name: id\n   *         required: true\n   *         schema:\n   *           $ref: '#/definitions/Contract'\n   *       - name: status\n   *         description: A string with the status of the contract\n   *         in: query\n   *         required: true\n   *         schema:\n   *           $ref: '#/definitions/Contract'\n   *       - name: access_token\n   *         description: Access token for user\n   *         in: query\n   *         required: true\n   *         schema:\n   *           $ref: '#/definitions/Contract'\n   *     responses:\n   *       200:\n   *         description: Success\n   *         schema:\n   *           $ref: \"#/definitions/Contract\"\n   */\n  routes.put('/contracts/:id', authCheck, (req, res) => {\n    contractController.update(req, res)\n  })\n\n  /**\n   * @swagger\n   * /api/events:\n   *   x-swagger-router-controller: ../controllers/eventController\n   *   get:\n   *     tags:\n   *       - Event\n   *     description: Search events\n   *     operationId: list\n   *     produces:\n   *       - application/json\n   *     parameters:\n   *       - queryProp: event property to query by\n   *         description: event property to query by\n   *         in: query\n   *         name: queryProp\n   *         required: true\n   *         schema:\n   *           $ref: '#/definitions/Events'\n   *       - queryVal: event property value to query by\n   *         description: event property value to query by\n   *         in: query\n   *         name: queryVal\n   *         required: true\n   *         schema:\n   *           $ref: '#/definitions/Event'\n   *     responses:\n   *       200:\n   *         description: Success\n   *         schema:\n   *           $ref: \"#/definitions/Event\"\n   */\n  routes.get('/events', authCheck, (req, res) => {\n    eventController.list(req, res)\n  })\n\n  return routes\n}\n"]}