{"version":3,"sources":["../../src/routes/routes.js"],"names":["routes","db","logger","profileController","loginController","refreshController","teamController","fixtureController","playerController","accountController","contractController","eventController","get","req","res","listOne","list","put","update","delete","remove","post","create"],"mappings":"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","file":"routes.js","sourcesContent":["//third party libraries\r\nimport { Router } from 'express'\r\nconst routes = Router()\r\n\r\n// Internal code/packages\r\nimport authCheck from '../lib/authCheck'\r\nimport ProfileController from '../controllers/profileController'\r\nimport LoginController from '../controllers/loginController'\r\nimport RefreshController from '../controllers/refreshController'\r\nimport TeamController from '../controllers/teamController'\r\nimport FixtureController from '../controllers/fixtureController'\r\nimport PlayerController from '../controllers/playerController'\r\nimport AccountController from '../controllers/accountController'\r\nimport ContractController from '../controllers/contractController'\r\nimport EventController from '../controllers/eventController'\r\n\r\nexport default (db, logger) => {\r\n  const profileController = new ProfileController(db, logger)\r\n  const loginController = new LoginController(db, logger)\r\n  const refreshController = new RefreshController(db, logger)\r\n  const teamController = new TeamController(db, logger)\r\n  const fixtureController = new FixtureController(db, logger)\r\n  const playerController = new PlayerController(db, logger)\r\n  const accountController = new AccountController(db, logger)\r\n  const contractController = new ContractController(db, logger)\r\n  const eventController = new EventController(db, logger)\r\n\r\n  /**\r\n   * @swagger\r\n   * definitions:\r\n   *   Profile:\r\n   *     properties:\r\n   *       access_token:\r\n   *         type: \"string\"\r\n   *   Login:\r\n   *     properties:\r\n   *       authorization_code:\r\n   *         type: \"string\"\r\n   *   Team:\r\n   *     properties:\r\n   *       teamName:\r\n   *         type: \"string\"\r\n   *       teamPicUrl:\r\n   *         type: \"string\"\r\n   *       teamVenue:\r\n   *         type: \"string\"\r\n   */\r\n\r\n  /**\r\n   * @swagger\r\n   * /api/profile:\r\n   *   x-swagger-router-controller: ../controllers/profileController\r\n   *   get:\r\n   *     tags:\r\n   *       - Profile\r\n   *     description: Get the profile data for the current player. Returns a Player object. Creates a new Player if user is new.\r\n   *     operationId: listOne\r\n   *     produces:\r\n   *       - application/json\r\n   *     parameters:\r\n   *       - access_token: access token\r\n   *         description: SWC access token of the current user\r\n   *         in: query\r\n   *         name: access_token\r\n   *         required: true\r\n   *         schema:\r\n   *           $ref: '#/definitions/Profile'\r\n   *     responses:\r\n   *       200:\r\n   *         description: Success\r\n   *         schema:\r\n   *           $ref: \"#/definitions/Profile\"\r\n   */\r\n  routes.get('/profile', authCheck, (req, res) => {\r\n    profileController.listOne(req, res)\r\n  })\r\n\r\n    /**\r\n   * @swagger\r\n   * /api/login:\r\n   *   x-swagger-router-controller: ../controllers/loginController\r\n   *   get:\r\n   *     tags:\r\n   *       - Login\r\n   *     description: Login the user and get player access token from SWC api\r\n   *     operationId: listOne\r\n   *     produces:\r\n   *       - application/json\r\n   *     parameters:\r\n   *       - authorization_code: authorization code\r\n   *         description: SWC authorization code of the current user\r\n   *         in: query\r\n   *         name: authorization_code\r\n   *         required: true\r\n   *         schema:\r\n   *           $ref: '#/definitions/Login'\r\n   *     responses:\r\n   *       200:\r\n   *         description: Success\r\n   *         schema:\r\n   *           $ref: \"#/definitions/Login\"\r\n   */\r\n  routes.get('/login', (req, res) => {\r\n    loginController.listOne(req, res)\r\n  })\r\n\r\n    /**\r\n   * @swagger\r\n   * /api/refresh:\r\n   *   x-swagger-router-controller: ../controllers/refreshController\r\n   *   get:\r\n   *     tags:\r\n   *       - Refresh\r\n   *     description: Get a new access_token and refresh_token from SWC api\r\n   *     operationId: listOne\r\n   *     produces:\r\n   *       - application/json\r\n   *     parameters:\r\n   *       - access_token: access_token\r\n   *         description: SWC access token of the current user\r\n   *         in: query\r\n   *         name: access_token\r\n   *         required: true\r\n   *         schema:\r\n   *           $ref: '#/definitions/Refresh'\r\n   *     responses:\r\n   *       200:\r\n   *         description: Success\r\n   *         schema:\r\n   *           $ref: \"#/definitions/Refresh\"\r\n   */\r\n  routes.get('/refresh', (req, res) => {\r\n    refreshController.listOne(req, res)\r\n  })\r\n\r\n/**\r\n   * @swagger\r\n   * /api/teams:\r\n   *   x-swagger-router-controller: ../controllers/teamController\r\n   *   get:\r\n   *     tags:\r\n   *       - Team\r\n   *     description: Get all teams\r\n   *     operationId: list\r\n   *     produces:\r\n   *       - application/json\r\n   *     responses:\r\n   *       200:\r\n   *         description: Success\r\n   *         schema:\r\n   *           $ref: \"#/definitions/Team\"\r\n   */\r\n  routes.get('/teams', authCheck, (req, res) => {\r\n    teamController.list(req, res)\r\n  })\r\n    /**\r\n   * @swagger\r\n   * /api/teams/{id}:\r\n   *   x-swagger-router-controller: ../controllers/teamController\r\n   *   get:\r\n   *     tags:\r\n   *       - Team\r\n   *     description: Get team by id\r\n   *     operationId: listOne\r\n   *     produces:\r\n   *       - application/json\r\n   *     parameters:\r\n   *       - id: id\r\n   *         description: team's id\r\n   *         in: query\r\n   *         name: id\r\n   *         required: true\r\n   *         schema:\r\n   *           $ref: '#/definitions/Team'\r\n   *     responses:\r\n   *       200:\r\n   *         description: Success\r\n   *         schema:\r\n   *           $ref: \"#/definitions/Team\"\r\n   */\r\n  routes.get('/teams/:id', authCheck, (req, res) => {\r\n    teamController.listOne(req, res)\r\n  })\r\n\r\n  /**\r\n   * @swagger\r\n   * /api/fixtures:\r\n   *   x-swagger-router-controller: ../controllers/fixtureController\r\n   *   get:\r\n   *     tags:\r\n   *       - Fixture\r\n   *     description: Get all fixtures\r\n   *     operationId: list\r\n   *     produces:\r\n   *       - application/json\r\n   *     parameters:\r\n   *       - queryProp: fixture property to query by\r\n   *         description: fixture property to query by\r\n   *         in: query\r\n   *         name: queryProp\r\n   *         required: false\r\n   *         schema:\r\n   *           $ref: '#/definitions/Fixture'\r\n   *       - queryVal: fixture property value to query by\r\n   *         description: fixture property value to query by\r\n   *         in: query\r\n   *         name: queryVal\r\n   *         required: false\r\n   *         schema:\r\n   *           $ref: '#/definitions/Fixture'\r\n   *     responses:\r\n   *       200:\r\n   *         description: Success\r\n   *         schema:\r\n   *           $ref: \"#/definitions/Fixture\"\r\n   */\r\n  routes.get('/fixtures', authCheck, (req, res) => {\r\n    fixtureController.list(req, res)\r\n  })\r\n  /**\r\n   * @swagger\r\n   * /api/fixtures/{id}:\r\n   *   x-swagger-router-controller: ../controllers/fixtureController\r\n   *   get:\r\n   *     tags:\r\n   *       - Fixture\r\n   *     description: Get fixture by id\r\n   *     operationId: listOne\r\n   *     produces:\r\n   *       - application/json\r\n   *     parameters:\r\n   *       - id: id\r\n   *         description: fixture's id\r\n   *         in: query\r\n   *         name: id\r\n   *         required: true\r\n   *         schema:\r\n   *           $ref: '#/definitions/Fixture'\r\n   *     responses:\r\n   *       200:\r\n   *         description: Success\r\n   *         schema:\r\n   *           $ref: \"#/definitions/Fixture\"\r\n   */\r\n  routes.get('/fixtures/:id', authCheck, (req, res) => {\r\n    fixtureController.listOne(req, res)\r\n  })\r\n  /**\r\n   * @swagger\r\n   * /api/players:\r\n   *   x-swagger-router-controller: ../controllers/playerController\r\n   *   get:\r\n   *     tags:\r\n   *       - Player\r\n   *     description: Get all players\r\n   *     operationId: list\r\n   *     produces:\r\n   *       - application/json\r\n   *     parameters:\r\n   *       - queryProp: player property to query by\r\n   *         description: player property to query by\r\n   *         in: query\r\n   *         name: queryProp\r\n   *         required: false\r\n   *         schema:\r\n   *           $ref: '#/definitions/Player'\r\n   *       - queryVal: player property value to query by\r\n   *         description: player property value to query by\r\n   *         in: query\r\n   *         name: queryVal\r\n   *         required: false\r\n   *         schema:\r\n   *           $ref: '#/definitions/Player'\r\n   *     responses:\r\n   *       200:\r\n   *         description: Success\r\n   *         schema:\r\n   *           $ref: \"#/definitions/Player\"\r\n   */\r\n  routes.get('/players', authCheck, (req, res) => {\r\n    playerController.list(req, res)\r\n  })\r\n  /**\r\n   * @swagger\r\n   * /api/players/{id}:\r\n   *   x-swagger-router-controller: ../controllers/playerController\r\n   *   get:\r\n   *     tags:\r\n   *       - Player\r\n   *     description: Get player by id\r\n   *     operationId: listOne\r\n   *     produces:\r\n   *       - application/json\r\n   *     parameters:\r\n   *       - id: id\r\n   *         description: player's id\r\n   *         in: query\r\n   *         name: id\r\n   *         required: true\r\n   *         schema:\r\n   *           $ref: '#/definitions/Player'\r\n   *     responses:\r\n   *       200:\r\n   *         description: Success\r\n   *         schema:\r\n   *           $ref: \"#/definitions/Player\"\r\n   */\r\n  routes.get('/players/:id', authCheck, (req, res) => {\r\n    playerController.listOne(req, res)\r\n  })\r\n\r\n  /**\r\n   * @swagger\r\n   * /api/players/{id}:\r\n   *   x-swagger-router-controller: ../controllers/playerController\r\n   *   put:\r\n   *     tags:\r\n   *       - Player\r\n   *     description: Updates a Player\r\n   *     operationId: update\r\n   *     produces:\r\n   *       - application/json\r\n   *     parameters:\r\n   *       - id: id\r\n   *         description: player's id\r\n   *         in: query\r\n   *         name: id\r\n   *         required: true\r\n   *         schema:\r\n   *           $ref: '#/definitions/Player'\r\n   *       - name: regimen\r\n   *         description: Object with value and label string properties indicating what skill to train\r\n   *         in: query\r\n   *         required: true\r\n   *         schema:\r\n   *           $ref: '#/definitions/Player'\r\n   *     responses:\r\n   *       200:\r\n   *         description: Success\r\n   *         schema:\r\n   *           $ref: \"#/definitions/Player\"\r\n   */\r\n  routes.put('/players/:id', authCheck, (req, res) => {\r\n    playerController.update(req, res)\r\n  })\r\n\r\n  /**\r\n   * @swagger\r\n   * /api/accounts/{id}:\r\n   *   x-swagger-router-controller: ../controllers/accountController\r\n   *   get:\r\n   *     tags:\r\n   *       - Account\r\n   *     description: Get account by id\r\n   *     operationId: listOne\r\n   *     produces:\r\n   *       - application/json\r\n   *     parameters:\r\n   *       - id: id\r\n   *         description: player's account id\r\n   *         in: query\r\n   *         name: id\r\n   *         required: true\r\n   *         schema:\r\n   *           $ref: '#/definitions/Account'\r\n   *     responses:\r\n   *       200:\r\n   *         description: Success\r\n   *         schema:\r\n   *           $ref: \"#/definitions/Account\"\r\n   */\r\n  routes.get('/accounts/:id', authCheck, (req, res) => {\r\n    accountController.listOne(req, res)\r\n  })\r\n\r\n  /**\r\n   * @swagger\r\n   * /api/contracts:\r\n   *   x-swagger-router-controller: ../controllers/contractController\r\n   *   get:\r\n   *     tags:\r\n   *       - Contract\r\n   *     description: Get all contracts\r\n   *     operationId: list\r\n   *     produces:\r\n   *       - application/json\r\n   *     parameters:\r\n   *       - queryProp: contract property to query by\r\n   *         description: contract property to query by\r\n   *         in: query\r\n   *         name: queryProp\r\n   *         required: false\r\n   *         schema:\r\n   *           $ref: '#/definitions/Contract'\r\n   *       - queryVal: contract property value to query by\r\n   *         description: contract property value to query by\r\n   *         in: query\r\n   *         name: queryVal\r\n   *         required: false\r\n   *         schema:\r\n   *           $ref: '#/definitions/Contract'\r\n   *     responses:\r\n   *       200:\r\n   *         description: Success\r\n   *         schema:\r\n   *           $ref: \"#/definitions/Contract\"\r\n   */\r\n  routes.get('/contracts', authCheck, (req, res) => {\r\n    contractController.list(req, res)\r\n  })\r\n  /**\r\n   * @swagger\r\n   * /api/contracts/{id}:\r\n   *   x-swagger-router-controller: ../controllers/contractController\r\n   *   get:\r\n   *     tags:\r\n   *       - Contract\r\n   *     description: Get contract by id\r\n   *     operationId: listOne\r\n   *     produces:\r\n   *       - application/json\r\n   *     parameters:\r\n   *       - id: id\r\n   *         description: contract's id\r\n   *         in: query\r\n   *         name: id\r\n   *         required: true\r\n   *         schema:\r\n   *           $ref: '#/definitions/Contract'\r\n   *     responses:\r\n   *       200:\r\n   *         description: Success\r\n   *         schema:\r\n   *           $ref: \"#/definitions/Contract\"\r\n   */\r\n  routes.get('/contracts/:id', authCheck, (req, res) => {\r\n    contractController.listOne(req, res)\r\n  })\r\n\r\n  /**\r\n   * @swagger\r\n   * /api/contracts/{id}:\r\n   *   x-swagger-router-controller: ../controllers/contractController\r\n   *   get:\r\n   *     tags:\r\n   *       - Contract\r\n   *     description: Delete contract by id\r\n   *     operationId: remove\r\n   *     produces:\r\n   *       - application/json\r\n   *     parameters:\r\n   *       - id: id\r\n   *         description: contract's id\r\n   *         in: query\r\n   *         name: id\r\n   *         required: true\r\n   *         schema:\r\n   *           $ref: '#/definitions/Contract'\r\n   *     responses:\r\n   *       200:\r\n   *         description: Success\r\n   *         schema:\r\n   *           $ref: \"#/definitions/Contract\"\r\n   */\r\n  routes.delete('/contracts/:id', authCheck, (req, res) => {\r\n    contractController.remove(req, res)\r\n  })\r\n\r\n  /**\r\n   * @swagger\r\n   * /api/contracts:\r\n   *   x-swagger-router-controller: ../controllers/contractController\r\n   *   post:\r\n   *     tags:\r\n   *       - Contract\r\n   *     description: Creates a new Contract\r\n   *     operationId: create\r\n   *     produces:\r\n   *       - application/json\r\n   *     parameters:\r\n   *       - games: number of games committed to by player\r\n   *         description: number of games committed to by player\r\n   *         in: query\r\n   *         name: games\r\n   *         required: true\r\n   *         schema:\r\n   *           $ref: '#/definitions/Contract'\r\n   *       - salary: player's salary, calculated from total price over total games\r\n   *         description: player's salary, calculated from total price over total games\r\n   *         in: query\r\n   *         name: salary\r\n   *         required: true\r\n   *         schema:\r\n   *           $ref: '#/definitions/Contract'\r\n   *       - playerName: name of player to be purchased\r\n   *         description: name of player to be purchased\r\n   *         in: query\r\n   *         name: playerName\r\n   *         required: true\r\n   *         schema:\r\n   *           $ref: '#/definitions/Contract'\r\n   *       - playerUid: uid of player to be purchased\r\n   *         description: uid of player to be purchased\r\n   *         in: query\r\n   *         required: true\r\n   *         schema:\r\n   *           $ref: '#/definitions/Contract'\r\n   *       - purchasePrice: purchasePrice of contract\r\n   *         description: purchasePrice of contract\r\n   *         in: query\r\n   *         name: purchasePrice\r\n   *         required: true\r\n   *         schema:\r\n   *           $ref: '#/definitions/Contract'\r\n   *       - status: status of contract\r\n   *         description: status of contract\r\n   *         in: query\r\n   *         name: status\r\n   *         required: true\r\n   *         schema:\r\n   *           $ref: '#/definitions/Contract'\r\n   *       - teamName: name of purchasing team\r\n   *         description: name of purchasing team\r\n   *         in: query\r\n   *         name: teamName\r\n   *         required: true\r\n   *         schema:\r\n   *           $ref: '#/definitions/Contract'\r\n   *       - teamUid: Uid of purchasing team\r\n   *         description: uid of purchasing team\r\n   *         in: query\r\n   *         name: teamUid\r\n   *         required: true\r\n   *         schema:\r\n   *           $ref: '#/definitions/Contract'\r\n   *     responses:\r\n   *       201:\r\n   *         description: Success\r\n   *         schema:\r\n   *           $ref: \"#/definitions/Contract\"\r\n   */\r\n  routes.post('/contracts', authCheck, (req, res) => {\r\n    contractController.create(req, res)\r\n  })\r\n\r\n    /**\r\n   * @swagger\r\n   * /api/contracts/{id}:\r\n   *   x-swagger-router-controller: ../controllers/contractController\r\n   *   put:\r\n   *     tags:\r\n   *       - Contract\r\n   *     description: Updates a Contract\r\n   *     operationId: update\r\n   *     produces:\r\n   *       - application/json\r\n   *     parameters:\r\n   *       - id: id\r\n   *         description: Contract's id\r\n   *         in: path\r\n   *         name: id\r\n   *         required: true\r\n   *         schema:\r\n   *           $ref: '#/definitions/Contract'\r\n   *       - name: status\r\n   *         description: A string with the status of the contract\r\n   *         in: query\r\n   *         required: true\r\n   *         schema:\r\n   *           $ref: '#/definitions/Contract'\r\n   *       - name: access_token\r\n   *         description: Access token for user\r\n   *         in: query\r\n   *         required: true\r\n   *         schema:\r\n   *           $ref: '#/definitions/Contract'\r\n   *     responses:\r\n   *       200:\r\n   *         description: Success\r\n   *         schema:\r\n   *           $ref: \"#/definitions/Contract\"\r\n   */\r\n  routes.put('/contracts/:id', authCheck, (req, res) => {\r\n    contractController.update(req, res)\r\n  })\r\n\r\n  /**\r\n   * @swagger\r\n   * /api/events:\r\n   *   x-swagger-router-controller: ../controllers/eventController\r\n   *   get:\r\n   *     tags:\r\n   *       - Event\r\n   *     description: Search events\r\n   *     operationId: list\r\n   *     produces:\r\n   *       - application/json\r\n   *     parameters:\r\n   *       - queryProp: event property to query by\r\n   *         description: event property to query by\r\n   *         in: query\r\n   *         name: queryProp\r\n   *         required: true\r\n   *         schema:\r\n   *           $ref: '#/definitions/Events'\r\n   *       - queryVal: event property value to query by\r\n   *         description: event property value to query by\r\n   *         in: query\r\n   *         name: queryVal\r\n   *         required: true\r\n   *         schema:\r\n   *           $ref: '#/definitions/Event'\r\n   *     responses:\r\n   *       200:\r\n   *         description: Success\r\n   *         schema:\r\n   *           $ref: \"#/definitions/Event\"\r\n   */\r\n  routes.get('/events', authCheck, (req, res) => {\r\n    eventController.list(req, res)\r\n  })\r\n\r\n  return routes\r\n}\r\n"]}