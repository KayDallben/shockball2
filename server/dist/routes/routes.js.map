{"version":3,"sources":["../../src/routes/routes.js"],"names":["routes","db","logger","profileController","loginController","teamController","fixtureController","playerController","get","req","res","listOne","list"],"mappings":";;;;;;AACA;;AAIA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AARA,IAAMA,SAAS,sBAAf;;AAEA;AAJA;;kBAYe,UAACC,EAAD,EAAKC,MAAL,EAAgB;AAC7B,MAAMC,oBAAoB,gCAAsBF,EAAtB,EAA0BC,MAA1B,CAA1B;AACA,MAAME,kBAAkB,8BAAoBF,MAApB,CAAxB;AACA,MAAMG,iBAAiB,6BAAmBJ,EAAnB,EAAuBC,MAAvB,CAAvB;AACA,MAAMI,oBAAoB,gCAAsBL,EAAtB,EAA0BC,MAA1B,CAA1B;AACA,MAAMK,mBAAmB,+BAAqBN,EAArB,EAAyBC,MAAzB,CAAzB;;AAEA;;;;;;;;;;;;;;;;;;;;;AAqBA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBAF,SAAOQ,GAAP,CAAW,UAAX,uBAAkC,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC9CP,sBAAkBQ,OAAlB,CAA0BF,GAA1B,EAA+BC,GAA/B;AACD,GAFD;;AAIE;;;;;;;;;;;;;;;;;;;;;;;;;AAyBFV,SAAOQ,GAAP,CAAW,QAAX,EAAqB,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjCN,oBAAgBO,OAAhB,CAAwBF,GAAxB,EAA6BC,GAA7B;AACD,GAFD;AAGF;;;;;;;;;;;;;;;;;AAiBEV,SAAOQ,GAAP,CAAW,QAAX,uBAAgC,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC5CL,mBAAeO,IAAf,CAAoBH,GAApB,EAAyBC,GAAzB;AACD,GAFD;AAGE;;;;;;;;;;;;;;;;;;;;;;;;;AAyBFV,SAAOQ,GAAP,CAAW,YAAX,uBAAoC,UAACC,GAAD,EAAMC,GAAN,EAAc;AAChDL,mBAAeM,OAAf,CAAuBF,GAAvB,EAA4BC,GAA5B;AACD,GAFD;;AAIA;;;;;;;;;;;;;;;;;AAiBAV,SAAOQ,GAAP,CAAW,WAAX,uBAAmC,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC/CJ,sBAAkBM,IAAlB,CAAuBH,GAAvB,EAA4BC,GAA5B;AACD,GAFD;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBAV,SAAOQ,GAAP,CAAW,eAAX,uBAAuC,UAACC,GAAD,EAAMC,GAAN,EAAc;AACnDJ,sBAAkBK,OAAlB,CAA0BF,GAA1B,EAA+BC,GAA/B;AACD,GAFD;AAGA;;;;;;;;;;;;;;;;;AAiBAV,SAAOQ,GAAP,CAAW,UAAX,uBAAkC,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC9CH,qBAAiBK,IAAjB,CAAsBH,GAAtB,EAA2BC,GAA3B;AACD,GAFD;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBAV,SAAOQ,GAAP,CAAW,cAAX,uBAAsC,UAACC,GAAD,EAAMC,GAAN,EAAc;AAClDH,qBAAiBI,OAAjB,CAAyBF,GAAzB,EAA8BC,GAA9B;AACD,GAFD;;AAIA,SAAOV,MAAP;AACD,C","file":"routes.js","sourcesContent":["//third party libraries\r\nimport { Router } from 'express'\r\nconst routes = Router()\r\n\r\n// Internal code/packages\r\nimport authCheck from '../lib/authCheck'\r\nimport ProfileController from '../controllers/profileController'\r\nimport LoginController from '../controllers/loginController'\r\nimport TeamController from '../controllers/teamController'\r\nimport FixtureController from '../controllers/fixtureController'\r\nimport PlayerController from '../controllers/playerController'\r\n\r\nexport default (db, logger) => {\r\n  const profileController = new ProfileController(db, logger)\r\n  const loginController = new LoginController(logger)\r\n  const teamController = new TeamController(db, logger)\r\n  const fixtureController = new FixtureController(db, logger)\r\n  const playerController = new PlayerController(db, logger)\r\n\r\n  /**\r\n   * @swagger\r\n   * definitions:\r\n   *   Profile:\r\n   *     properties:\r\n   *       access_token:\r\n   *         type: \"string\"\r\n   *   Login:\r\n   *     properties:\r\n   *       authorization_code:\r\n   *         type: \"string\"\r\n   *   Team:\r\n   *     properties:\r\n   *       teamName:\r\n   *         type: \"string\"\r\n   *       teamPicUrl:\r\n   *         type: \"string\"\r\n   *       teamVenue:\r\n   *         type: \"string\"\r\n   */\r\n\r\n  /**\r\n   * @swagger\r\n   * /api/profile:\r\n   *   x-swagger-router-controller: ../controllers/profileController\r\n   *   get:\r\n   *     tags:\r\n   *       - Profile\r\n   *     description: Get the profile data for the current player. Returns a Player object. Creates a new Player if user is new.\r\n   *     operationId: listOne\r\n   *     produces:\r\n   *       - application/json\r\n   *     parameters:\r\n   *       - access_token: access token\r\n   *         description: SWC access token of the current user\r\n   *         in: query\r\n   *         name: access_token\r\n   *         required: true\r\n   *         schema:\r\n   *           $ref: '#/definitions/Profile'\r\n   *     responses:\r\n   *       200:\r\n   *         description: Success\r\n   *         schema:\r\n   *           $ref: \"#/definitions/Profile\"\r\n   */\r\n  routes.get('/profile', authCheck, (req, res) => {\r\n    profileController.listOne(req, res)\r\n  })\r\n\r\n    /**\r\n   * @swagger\r\n   * /api/login:\r\n   *   x-swagger-router-controller: ../controllers/loginController\r\n   *   get:\r\n   *     tags:\r\n   *       - Login\r\n   *     description: Login the user and get player access token from SWC api\r\n   *     operationId: listOne\r\n   *     produces:\r\n   *       - application/json\r\n   *     parameters:\r\n   *       - authorization_code: authorization code\r\n   *         description: SWC authorization code of the current user\r\n   *         in: query\r\n   *         name: authorization_code\r\n   *         required: true\r\n   *         schema:\r\n   *           $ref: '#/definitions/Login'\r\n   *     responses:\r\n   *       200:\r\n   *         description: Success\r\n   *         schema:\r\n   *           $ref: \"#/definitions/Login\"\r\n   */\r\n  routes.get('/login', (req, res) => {\r\n    loginController.listOne(req, res)\r\n  })\r\n/**\r\n   * @swagger\r\n   * /api/teams:\r\n   *   x-swagger-router-controller: ../controllers/teamController\r\n   *   get:\r\n   *     tags:\r\n   *       - Team\r\n   *     description: Get all teams\r\n   *     operationId: list\r\n   *     produces:\r\n   *       - application/json\r\n   *     responses:\r\n   *       200:\r\n   *         description: Success\r\n   *         schema:\r\n   *           $ref: \"#/definitions/Team\"\r\n   */\r\n  routes.get('/teams', authCheck, (req, res) => {\r\n    teamController.list(req, res)\r\n  })\r\n    /**\r\n   * @swagger\r\n   * /api/teams/{id}:\r\n   *   x-swagger-router-controller: ../controllers/teamController\r\n   *   get:\r\n   *     tags:\r\n   *       - Team\r\n   *     description: Get team by id\r\n   *     operationId: listOne\r\n   *     produces:\r\n   *       - application/json\r\n   *     parameters:\r\n   *       - id: id\r\n   *         description: team's id\r\n   *         in: query\r\n   *         name: id\r\n   *         required: true\r\n   *         schema:\r\n   *           $ref: '#/definitions/Team'\r\n   *     responses:\r\n   *       200:\r\n   *         description: Success\r\n   *         schema:\r\n   *           $ref: \"#/definitions/Team\"\r\n   */\r\n  routes.get('/teams/:id', authCheck, (req, res) => {\r\n    teamController.listOne(req, res)\r\n  })\r\n\r\n  /**\r\n   * @swagger\r\n   * /api/fixtures:\r\n   *   x-swagger-router-controller: ../controllers/fixtureController\r\n   *   get:\r\n   *     tags:\r\n   *       - Fixture\r\n   *     description: Get all fixtures\r\n   *     operationId: list\r\n   *     produces:\r\n   *       - application/json\r\n   *     responses:\r\n   *       200:\r\n   *         description: Success\r\n   *         schema:\r\n   *           $ref: \"#/definitions/Fixture\"\r\n   */\r\n  routes.get('/fixtures', authCheck, (req, res) => {\r\n    fixtureController.list(req, res)\r\n  })\r\n  /**\r\n   * @swagger\r\n   * /api/fixtures/{id}:\r\n   *   x-swagger-router-controller: ../controllers/fixtureController\r\n   *   get:\r\n   *     tags:\r\n   *       - Fixture\r\n   *     description: Get fixture by id\r\n   *     operationId: listOne\r\n   *     produces:\r\n   *       - application/json\r\n   *     parameters:\r\n   *       - id: id\r\n   *         description: fixture's id\r\n   *         in: query\r\n   *         name: id\r\n   *         required: true\r\n   *         schema:\r\n   *           $ref: '#/definitions/Fixture'\r\n   *     responses:\r\n   *       200:\r\n   *         description: Success\r\n   *         schema:\r\n   *           $ref: \"#/definitions/Fixture\"\r\n   */\r\n  routes.get('/fixtures/:id', authCheck, (req, res) => {\r\n    fixtureController.listOne(req, res)\r\n  })\r\n  /**\r\n   * @swagger\r\n   * /api/players:\r\n   *   x-swagger-router-controller: ../controllers/playerController\r\n   *   get:\r\n   *     tags:\r\n   *       - Player\r\n   *     description: Get all players\r\n   *     operationId: list\r\n   *     produces:\r\n   *       - application/json\r\n   *     responses:\r\n   *       200:\r\n   *         description: Success\r\n   *         schema:\r\n   *           $ref: \"#/definitions/Player\"\r\n   */\r\n  routes.get('/players', authCheck, (req, res) => {\r\n    playerController.list(req, res)\r\n  })\r\n  /**\r\n   * @swagger\r\n   * /api/players/{id}:\r\n   *   x-swagger-router-controller: ../controllers/playerController\r\n   *   get:\r\n   *     tags:\r\n   *       - Player\r\n   *     description: Get player by id\r\n   *     operationId: listOne\r\n   *     produces:\r\n   *       - application/json\r\n   *     parameters:\r\n   *       - id: id\r\n   *         description: player's id\r\n   *         in: query\r\n   *         name: id\r\n   *         required: true\r\n   *         schema:\r\n   *           $ref: '#/definitions/Player'\r\n   *     responses:\r\n   *       200:\r\n   *         description: Success\r\n   *         schema:\r\n   *           $ref: \"#/definitions/Player\"\r\n   */\r\n  routes.get('/players/:id', authCheck, (req, res) => {\r\n    playerController.listOne(req, res)\r\n  })\r\n\r\n  return routes\r\n}\r\n"]}