{"version":3,"sources":["../../src/lib/util.js"],"names":["reverseString","stringValue","reversedString","character","testPromise","promise","Promise","resolve","reject","data","error","calculatePlayerValue","playerStats","baseStats","blocking","endurance","leadership","passing","throwing","toughness","vision","playerValue","marketValue","playerRating","numberStats","totalStatValueCount","Object","entries","key","value","Math","floor","generateSummaryRecords","events","currentSeasonEvents","getSeasonRecords","playerRecords","season","matches","countMatches","goals","getActivityTypeCount","shots","passes","blocksPass","blocksShot","tackles","runsBall","goalAverage","averageActivityPerMatch","activityType","totalGoals","gameLength","totalMinutesPlayed","activityName","total","record","recordType","allEvents","seasonEvents","push","unique","Set","map","event","fixtureId","length"],"mappings":"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","file":"util.js","sourcesContent":["// lib folder is for code files where there aren't much (or any) dependencies and can be imported on a file by file basis\r\n//es6+ javascript selected! Can delete this comment\r\nfunction reverseString(stringValue) {\r\n  let reversedString = ''\r\n  for (let character of stringValue) {\r\n    reversedString = character + reversedString\r\n  }\r\n  return reversedString\r\n}\r\n\r\nfunction testPromise() {\r\n  const promise = new Promise((resolve, reject) => {\r\n    const data = {\r\n      data: 'somestuff'\r\n    }\r\n    try {\r\n      resolve(data)\r\n    } catch (error) {\r\n      reject(error)\r\n    }\r\n  })\r\n  return promise\r\n}\r\n\r\nfunction calculatePlayerValue(playerStats) {\r\n  const baseStats = {\r\n    blocking: playerStats.blocking,\r\n    endurance: playerStats.endurance,\r\n    leadership: playerStats.leadership,\r\n    passing: playerStats.passing,\r\n    throwing: playerStats.throwing,\r\n    toughness: playerStats.toughness,\r\n    vision: playerStats.vision\r\n  }\r\n  let playerValue = {\r\n    marketValue: 0,\r\n    playerRating: 0\r\n  }\r\n  let numberStats = 0\r\n  let totalStatValueCount = 0\r\n  for (const [key, value] of Object.entries(baseStats)) { // eslint-disable-line no-unused-vars\r\n    numberStats++\r\n    totalStatValueCount += value\r\n  }\r\n  playerValue.playerRating = Math.floor(totalStatValueCount / numberStats)\r\n  playerValue.marketValue = Math.floor(playerValue.playerRating * 1.6 * 60000)\r\n  return playerValue\r\n}\r\n\r\nfunction generateSummaryRecords(events) {\r\n  //season, matches, goals, passes, blocks, tackles, goalAverage\r\n  const currentSeasonEvents = getSeasonRecords('1', events)\r\n  let playerRecords = [{\r\n    season: '1',\r\n    // events: getSeasonRecords('1', currentSeasonEvents),\r\n    matches: countMatches(currentSeasonEvents),\r\n    goals: getActivityTypeCount('goal', currentSeasonEvents),\r\n    shots: getActivityTypeCount('shoots', currentSeasonEvents),\r\n    passes: getActivityTypeCount('passes ball', currentSeasonEvents),\r\n    blocksPass: getActivityTypeCount('pass blocked', currentSeasonEvents),\r\n    blocksShot: getActivityTypeCount('blocks shot', currentSeasonEvents),\r\n    tackles: getActivityTypeCount('tackles', currentSeasonEvents),\r\n    runsBall: getActivityTypeCount('runs ball', currentSeasonEvents),\r\n    goalAverage: averageActivityPerMatch('goal', currentSeasonEvents)\r\n  }]\r\n  return playerRecords\r\n}\r\n\r\nfunction averageActivityPerMatch(activityType, events) {\r\n  //formula (goals scored * game length in minutes) / total minutes played\r\n  const totalGoals = getActivityTypeCount('goal', events)\r\n  const gameLength = 70\r\n  const totalMinutesPlayed = countMatches(events) * gameLength\r\n  return (totalGoals * gameLength) / totalMinutesPlayed\r\n}\r\n\r\nfunction getActivityTypeCount(activityName, events) {\r\n  let total = 0\r\n  for (let record of events) {\r\n    if (record.recordType === activityName) {\r\n      total++\r\n    }\r\n  }\r\n  return total\r\n}\r\n\r\nfunction getSeasonRecords(season, allEvents) {\r\n  let seasonEvents = []\r\n  for (let record of allEvents) {\r\n    if (record.season === season) {\r\n      seasonEvents.push(record)\r\n    }\r\n  }\r\n  return seasonEvents\r\n}\r\n\r\nfunction countMatches(events) {\r\n  const unique = [...new Set(events.map(event => event.fixtureId))]\r\n  return unique.length\r\n}\r\n\r\nexport {\r\n  reverseString,\r\n  testPromise,\r\n  calculatePlayerValue,\r\n  generateSummaryRecords,\r\n  averageActivityPerMatch,\r\n  getActivityTypeCount,\r\n  getSeasonRecords,\r\n  countMatches\r\n}\r\n"]}