{"version":3,"sources":["../../src/sim/player.js"],"names":["chance","util","Player","playerStats","world","challenge","homeGoalSide","getType","createdAsUid","name","image","teamUid","teamName","teamPicUrl","role","passing","toughness","throwing","fatigue","endurance","vision","blocking","realWorldModel","playerWorldModel","objects","leftPlayers","rightPlayers","Error","applyEffects","think","takeAction","gameObjects","pitch","push","board","ball","state","tryTackleBall","possessedBy","thinksHasScoreChance","analyzeCanScore","tryScore","thinksCanPass","analyzeCanPass","tryPass","tryRun","lastSideTouched","thinksMoreLikelyToShoot","actionGuess","analyzeNextAction","analyzeMoreLikelyToShoot","tryBlockShot","tryBlockPass","tryTacklePlayer","opposingPlayers","ballCarrier","find","player","rpg","sum","players","targetGoalResistence","goalResistence","goalPit","right","goalProximity","Math","abs","left","addTryScore","addTryPass","addTryRun","addTackleBall","addTryTacklePlayer"],"mappings":"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","file":"player.js","sourcesContent":["import Chance from 'chance'\r\nimport Util from './util'\r\nconst chance = new Chance()\r\nconst util = new Util()\r\n\r\nexport default class Player {\r\n  constructor(playerStats, world, challenge, homeGoalSide) {\r\n    if (util.getType(playerStats) === '[object Object]') {\r\n      this.createdAsUid = playerStats.createdAsUid\r\n      this.name = playerStats.name\r\n      this.image = playerStats.image\r\n      this.teamUid = playerStats.teamUid\r\n      this.teamName = playerStats.teamName\r\n      this.teamPicUrl = playerStats.teamPicUrl\r\n      this.role = playerStats.role\r\n      this.passing = playerStats.passing\r\n      this.toughness = playerStats.toughness\r\n      this.throwing = playerStats.throwing\r\n      this.fatigue = playerStats.fatigue\r\n      this.endurance = playerStats.endurance\r\n      this.vision = playerStats.vision\r\n      this.blocking = playerStats.blocking\r\n      this.homeGoalSide = homeGoalSide\r\n      this.challenge = challenge\r\n      this.realWorldModel = world\r\n      this.playerWorldModel = {\r\n        objects: [],\r\n        leftPlayers: [],\r\n        rightPlayers: []\r\n      }\r\n    } else {\r\n      throw new Error('Cannot create Player: incorrect param data types')\r\n    }\r\n  }\r\n\r\n  update() {\r\n    this.applyEffects()\r\n    this.think() //should set player's perception of world model via player's skills\r\n    this.takeAction()\r\n  }\r\n\r\n  applyEffects() {\r\n    // let's increase fatigue according to endurance stat\r\n    this.fatigue += (this.endurance / 100)\r\n    // high morale should equal a small netBuff\r\n    // high aggro should equal a small netBuff but also increase chance of injury\r\n  }\r\n\r\n  think() {\r\n    //we start with the real world model\r\n    const gameObjects = this.realWorldModel.objects\r\n    //we wipe away the player's old percieved world model\r\n    this.playerWorldModel.objects = []\r\n    this.playerWorldModel.leftPlayers = []\r\n    this.playerWorldModel.rightPlayers = []\r\n\r\n    // we will do calulcations here to modify based on Perception skill of this unique player's Perception attribute\r\n    // for now, let's assume this player is godlike and his perception is exactly the reality of the world\r\n\r\n    // player's perception of the pitch - what is the state of the game\r\n    const pitch = gameObjects[0]\r\n    this.playerWorldModel.objects.push(pitch)\r\n    // board probably isn't relevant to perception/reality, but we need it for the array order\r\n    const board = gameObjects[1]\r\n    this.playerWorldModel.objects.push(board)\r\n    // player's perception of the ball - where it's at, who has it, how close to goal\r\n    const ball = gameObjects[2]\r\n    this.playerWorldModel.objects.push(ball)\r\n    // player's perception of other players\r\n    const leftPlayers = this.realWorldModel.leftPlayers\r\n    const rightPlayers = this.realWorldModel.rightPlayers\r\n    this.playerWorldModel.leftPlayers = leftPlayers\r\n    this.playerWorldModel.rightPlayers = rightPlayers\r\n\r\n    // now we have rebuilt the playerWorldModel the way this unique player interprets it, hopefuly granting more agency for his/her actions\r\n  }\r\n\r\n  takeAction() {\r\n    const gameObjects = this.playerWorldModel.objects\r\n    const pitch = gameObjects[0]\r\n    const board = gameObjects[1]\r\n    const ball = gameObjects[2]\r\n    if (pitch.state === 'before_kickoff') {\r\n      // we are before kickoff so player wants to get the ball\r\n      this.tryTackleBall()\r\n      return\r\n    }\r\n    if (pitch.state === 'play_on' && ball.possessedBy === this.createdAsUid) {\r\n      // this player has the ball - better trying priority 1 action first!\r\n      // player looks to score first, if he's in range.\r\n      // for now the goal is empty and it has a default resistence of 2\r\n      // for now the goalPosition (default 5) minus the goalProximity must be less than the goal resistence (default 2)\r\n      const thinksHasScoreChance = this.analyzeCanScore(ball, pitch)\r\n      if (thinksHasScoreChance) {\r\n        this.tryScore(pitch, board, ball)\r\n        return\r\n      } else {\r\n        // so he doesn't think he can score, so now move to priority 2 action - getting ball closer to scoring via pass or run\r\n        // for now this player thinks \"if my throwing + passing is lower than my toughness then I'll run.  otherwise I'll pass\"\r\n        const thinksCanPass = this.analyzeCanPass()\r\n        if (thinksCanPass) {\r\n          this.tryPass()\r\n          return\r\n        } else {\r\n          this.tryRun(pitch, ball)\r\n          return\r\n        }\r\n      }\r\n    } else if (pitch.state === 'play_on' && ball.possessedBy !== null && ball.lastSideTouched === this.homeGoalSide) {\r\n      // Ball is being carried by a player of my team\r\n    } else if (pitch.state === 'play_on' && ball.possessedBy !== null && ball.lastSideTouched !== this.homeGoalSide) {\r\n      // Ball is being carried by a player of other team\r\n\r\n      let thinksMoreLikelyToShoot = null\r\n      let actionGuess = null\r\n      if (this.homeGoalSide === 'right') {\r\n        //Player first decides: will ball handler throw or run?\r\n        actionGuess = this.analyzeNextAction(this.playerWorldModel.leftPlayers, ball)\r\n        if (actionGuess === 'throw') {\r\n          //Player now checks if more likely to shoot or pass\r\n          thinksMoreLikelyToShoot = this.analyzeMoreLikelyToShoot(this.playerWorldModel.leftPlayers, ball)\r\n          if (thinksMoreLikelyToShoot) {\r\n            this.tryBlockShot()\r\n          } else {\r\n            this.tryBlockPass()\r\n          }\r\n        } else {\r\n          this.tryTacklePlayer()\r\n        }\r\n      } else {\r\n        //Player first decides: will ball handler throw or run?\r\n        actionGuess = this.analyzeNextAction(this.playerWorldModel.rightPlayers, ball)\r\n        if (actionGuess === 'throw') {\r\n          //Player now checks if more likely to shoot or pass\r\n          thinksMoreLikelyToShoot = this.analyzeMoreLikelyToShoot(this.playerWorldModel.rightPlayers, ball)\r\n          if (thinksMoreLikelyToShoot) {\r\n            this.tryBlockShot()\r\n          } else {\r\n            this.tryBlockPass()\r\n          }\r\n        } else {\r\n          this.tryTacklePlayer()\r\n        }\r\n      }\r\n    } else if (pitch.state === 'play_on' && ball.possessedBy === null) {\r\n      // Ball is has been fumbled during play and is free\r\n    }\r\n  }\r\n\r\n  analyzeNextAction(opposingPlayers, ball) {\r\n    const ballCarrier = opposingPlayers.find(function(player) {\r\n      return player.createdAsUid === ball.possessedBy\r\n    })\r\n    if (ballCarrier.throwing + ballCarrier.passing > ballCarrier.toughness + chance.rpg('1d12', {sum:true})) {\r\n      return 'throw'\r\n    } else {\r\n      return 'run'\r\n    }\r\n  }\r\n\r\n  analyzeMoreLikelyToShoot(players, ball) {\r\n    const ballCarrier = players.find(function(player) {\r\n      return player.createdAsUid === ball.possessedBy\r\n    })\r\n    //simple determinatin right now - if throwing higher than passing, then this player assumes they'll shoot\r\n    if (ballCarrier && ballCarrier.throwing > ballCarrier.passing) {\r\n      return true\r\n    } else {\r\n      return false\r\n    }\r\n  }\r\n\r\n  analyzeCanScore(ball, pitch) {\r\n    const targetGoalResistence = pitch.goalResistence[this.homeGoalSide]\r\n    if (this.homeGoalSide === 'left') {\r\n      if (pitch.goalPit.right - ball.goalProximity < targetGoalResistence) {\r\n        return true\r\n      } else {\r\n        return false\r\n      }\r\n    } else if (this.homeGoalSide === 'right') {\r\n      if (Math.abs(pitch.goalPit.left - ball.goalProximity) < targetGoalResistence) {\r\n        return true\r\n      } else {\r\n        return false\r\n      }\r\n    }\r\n  }\r\n\r\n  analyzeCanPass() {\r\n    if (this.throwing + this.passing > this.toughness + chance.rpg('1d12', {sum:true})) {\r\n      return true\r\n    } else {\r\n      return false\r\n    }\r\n  }\r\n\r\n  tryScore(pitch, board, ball) {\r\n    this.challenge.addTryScore(this)\r\n  }\r\n\r\n  tryPass() {\r\n    this.challenge.addTryPass(this)\r\n  }\r\n\r\n  tryRun(pitch, ball) {\r\n    this.challenge.addTryRun(this)\r\n  }\r\n\r\n  tryTackleBall() {\r\n    this.challenge.addTackleBall(this)\r\n  }\r\n\r\n  tryTacklePlayer() {\r\n    this.challenge.addTryTacklePlayer(this)\r\n  }\r\n\r\n  tryBlockPass() {\r\n    this.challenge.addTryPass(this)\r\n  }\r\n\r\n  tryBlockShot() {\r\n    this.challenge.addTryScore(this)\r\n  }\r\n\r\n}"]}