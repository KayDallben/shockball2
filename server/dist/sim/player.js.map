{"version":3,"sources":["../../src/sim/player.js"],"names":["chance","Chance","util","Util","Player","playerStats","world","challenge","homeGoalSide","getType","shockballPlayerUid","name","lineupPosition","image","teamUid","teamName","teamPicUrl","role","assignRoleFromLineup","passing","toughness","throwing","energy","endurance","vision","blocking","realWorldModel","playerWorldModel","objects","leftPlayers","rightPlayers","Error","applyEffects","think","takeAction","indexOf","undefined","isFielded","filter","player","updateEnergy","gameObjects","pitch","push","board","ball","state","tryTackleBall","possessedBy","thinksHasScoreChance","analyzeCanScore","tryScore","thinksCanPass","analyzeCanPass","tryPass","tryRun","lastSideTouched","thinksMoreLikelyToShoot","actionGuess","analyzeNextAction","analyzeMoreLikelyToShoot","tryBlockShot","tryBlockPass","tryTacklePlayer","console","log","opposingPlayers","ballCarrier","find","rpg","sum","players","targetGoalResistence","goalResistence","goalPit","right","goalProximity","Math","abs","left","addTryScore","addTryPass","addTryRun","addTackleBall","addTryTacklePlayer"],"mappings":"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","file":"player.js","sourcesContent":["import Chance from 'chance'\nimport Util from './util'\nconst chance = new Chance()\nconst util = new Util()\n\nexport default class Player {\n  constructor(playerStats, world, challenge, homeGoalSide) {\n    if (util.getType(playerStats) === '[object Object]') {\n      this.shockballPlayerUid = playerStats.shockballPlayerUid\n      this.name = playerStats.name\n      this.lineupPosition = playerStats.lineupPosition\n      this.image = playerStats.image\n      this.teamUid = playerStats.teamUid\n      this.teamName = playerStats.teamName\n      this.teamPicUrl = playerStats.teamPicUrl\n      this.role = this.assignRoleFromLineup(playerStats.lineupPosition)\n      this.passing = playerStats.passing\n      this.toughness = playerStats.toughness\n      this.throwing = playerStats.throwing\n      this.energy = playerStats.energy\n      this.endurance = playerStats.endurance\n      this.vision = playerStats.vision\n      this.blocking = playerStats.blocking\n      this.homeGoalSide = homeGoalSide\n      this.challenge = challenge\n      this.realWorldModel = world\n      this.playerWorldModel = {\n        objects: [],\n        leftPlayers: [],\n        rightPlayers: []\n      }\n    } else {\n      throw new Error('Cannot create Player: incorrect param data types')\n    }\n  }\n\n  update() {\n    this.applyEffects()\n    this.think() //should set player's perception of world model via player's skills\n    this.takeAction()\n  }\n\n  assignRoleFromLineup(lineupPosition) {\n    if (lineupPosition) {\n      if (lineupPosition.indexOf('center') > -1) {\n        return 'Center'\n      } else if (lineupPosition.indexOf('left') > -1 || lineupPosition.indexOf('right') > -1) {\n        return 'Wing'\n      } else {\n        return 'Guard'\n      }\n    } else {\n      return undefined\n    }\n  }\n\n  updateEnergy() {\n    // decay energy over time\n    const isFielded = this.realWorldModel[this.homeGoalSide + 'Players'].filter((player) => {\n      player.shockballPlayerUid === this.shockballPlayerUid\n    })\n    // do isFielded check just in case player is still in the world model but not on the field - should NOT happen!\n    if (isFielded) {\n      if (this.energy - (2 + (this.endurance / 100)) > 0) {\n        this.energy -= 2 - (this.endurance / 100)\n      } else {\n        this.energy = 0\n      }\n    }\n  }\n\n  applyEffects() {\n    // let's decrease energy according to endurance stat\n    this.updateEnergy()\n    // high morale should equal a small netBuff\n    // high aggro should equal a small netBuff but also increase chance of injury\n  }\n\n  think() {\n    //we start with the real world model\n    const gameObjects = this.realWorldModel.objects\n    //we wipe away the player's old percieved world model\n    this.playerWorldModel.objects = []\n    this.playerWorldModel.leftPlayers = []\n    this.playerWorldModel.rightPlayers = []\n\n    // we will do calulcations here to modify based on Perception skill of this unique player's Perception attribute\n    // for now, let's assume this player is godlike and his perception is exactly the reality of the world\n\n    // player's perception of the pitch - what is the state of the game\n    const pitch = gameObjects[0]\n    this.playerWorldModel.objects.push(pitch)\n    // board probably isn't relevant to perception/reality, but we need it for the array order\n    const board = gameObjects[1]\n    this.playerWorldModel.objects.push(board)\n    // player's perception of the ball - where it's at, who has it, how close to goal\n    const ball = gameObjects[2]\n    this.playerWorldModel.objects.push(ball)\n    // player's perception of other players\n    const leftPlayers = this.realWorldModel.leftPlayers\n    const rightPlayers = this.realWorldModel.rightPlayers\n    this.playerWorldModel.leftPlayers = leftPlayers\n    this.playerWorldModel.rightPlayers = rightPlayers\n\n    // now we have rebuilt the playerWorldModel the way this unique player interprets it, hopefuly granting more agency for his/her actions\n  }\n\n  takeAction() {\n    const gameObjects = this.playerWorldModel.objects\n    const pitch = gameObjects[0]\n    const board = gameObjects[1]\n    const ball = gameObjects[2]\n    if (pitch.state === 'before_kickoff') {\n      // we are before kickoff so player wants to get the ball\n      this.tryTackleBall()\n      return\n    }\n    if (pitch.state === 'play_on' && ball.possessedBy === this.shockballPlayerUid) {\n      // this player has the ball - better trying priority 1 action first!\n      // player looks to score first, if he's in range.\n      // for now the goal is empty and it has a default resistence of 2\n      // for now the goalPosition (default 5) minus the goalProximity must be less than the goal resistence (default 2)\n      const thinksHasScoreChance = this.analyzeCanScore(ball, pitch)\n      if (thinksHasScoreChance) {\n        this.tryScore(pitch, board, ball)\n        return\n      } else {\n        // so he doesn't think he can score, so now move to priority 2 action - getting ball closer to scoring via pass or run\n        // for now this player thinks \"if my throwing + passing is lower than my toughness then I'll run.  otherwise I'll pass\"\n        const thinksCanPass = this.analyzeCanPass()\n        if (thinksCanPass) {\n          this.tryPass()\n          return\n        } else {\n          this.tryRun(pitch, ball)\n          return\n        }\n      }\n    } else if (pitch.state === 'play_on' && ball.possessedBy !== null && ball.lastSideTouched === this.homeGoalSide) {\n      // Ball is being carried by a player of my team\n    } else if (pitch.state === 'play_on' && ball.possessedBy !== null && ball.lastSideTouched !== this.homeGoalSide) {\n      // Ball is being carried by a player of other team\n\n      let thinksMoreLikelyToShoot = null\n      let actionGuess = null\n      if (this.homeGoalSide === 'right') {\n        //Player first decides: will ball handler throw or run?\n        actionGuess = this.analyzeNextAction(this.playerWorldModel.leftPlayers, ball)\n        if (actionGuess === 'throw') {\n          //Player now checks if more likely to shoot or pass\n          thinksMoreLikelyToShoot = this.analyzeMoreLikelyToShoot(this.playerWorldModel.leftPlayers, ball)\n          if (thinksMoreLikelyToShoot) {\n            this.tryBlockShot()\n          } else {\n            this.tryBlockPass()\n          }\n        } else {\n          this.tryTacklePlayer()\n        }\n      } else {\n        //Player first decides: will ball handler throw or run?\n        actionGuess = this.analyzeNextAction(this.playerWorldModel.rightPlayers, ball)\n        if (actionGuess === 'throw') {\n          //Player now checks if more likely to shoot or pass\n          thinksMoreLikelyToShoot = this.analyzeMoreLikelyToShoot(this.playerWorldModel.rightPlayers, ball)\n          if (thinksMoreLikelyToShoot) {\n            this.tryBlockShot()\n          } else {\n            this.tryBlockPass()\n          }\n        } else {\n          this.tryTacklePlayer()\n        }\n      }\n    } else if (pitch.state === 'play_on' && ball.possessedBy === null) {\n      console.log('ball has been fumbled and is free');\n      this.tryTackleBall()\n      // Ball is has been fumbled during play and is free\n    }\n  }\n\n  analyzeNextAction(opposingPlayers, ball) {\n    const ballCarrier = opposingPlayers.find(function(player) {\n      return player.shockballPlayerUid === ball.possessedBy\n    })\n    if (ballCarrier) {\n      if (ballCarrier.throwing + ballCarrier.passing > ballCarrier.toughness + chance.rpg('1d12', {sum:true})) {\n        return 'throw'\n      } else {\n        return 'run'\n      }\n    } else {\n      return 'run'\n    }\n  }\n\n  analyzeMoreLikelyToShoot(players, ball) {\n    const ballCarrier = players.find(function(player) {\n      return player.shockballPlayerUid === ball.possessedBy\n    })\n    //simple determinatin right now - if throwing higher than passing, then this player assumes they'll shoot\n    if (ballCarrier && ballCarrier.throwing > ballCarrier.passing) {\n      return true\n    } else {\n      return false\n    }\n  }\n\n  analyzeCanScore(ball, pitch) {\n    const targetGoalResistence = pitch.goalResistence[this.homeGoalSide]\n    if (this.homeGoalSide === 'left') {\n      if (pitch.goalPit.right - ball.goalProximity < targetGoalResistence) {\n        return true\n      } else {\n        return false\n      }\n    } else if (this.homeGoalSide === 'right') {\n      if (Math.abs(pitch.goalPit.left - ball.goalProximity) < targetGoalResistence) {\n        return true\n      } else {\n        return false\n      }\n    }\n  }\n\n  analyzeCanPass() {\n    if (this.throwing + this.passing > this.toughness + chance.rpg('1d12', {sum:true})) {\n      return true\n    } else {\n      return false\n    }\n  }\n\n  tryScore(pitch, board, ball) {\n    this.challenge.addTryScore(this)\n  }\n\n  tryPass() {\n    this.challenge.addTryPass(this)\n  }\n\n  tryRun(pitch, ball) {\n    this.challenge.addTryRun(this)\n  }\n\n  tryTackleBall() {\n    this.challenge.addTackleBall(this)\n  }\n\n  tryTacklePlayer() {\n    this.challenge.addTryTacklePlayer(this)\n  }\n\n  tryBlockPass() {\n    this.challenge.addTryPass(this)\n  }\n\n  tryBlockShot() {\n    this.challenge.addTryScore(this)\n  }\n\n}"]}