{"version":3,"sources":["../../src/sim/main.js"],"names":["admin","botGenerator","challenge","util","FieldValue","firestore","Main","matchData","World","Player","Pitch","Board","Ball","record","stopSim","now","Date","then","fps","maxGameTime","elapsed","counter","db","framesPerSecond","getType","world","pitch","register","board","ball","createWorldHumanPlayers","createWorldNpcPlayers","mainLoop","Error","update","setImmediate","bind","error","console","log","reset","objects","records","homeTeam","players","player","playerToAdd","role","undefined","indexOf","lineupPosition","addToField","addToBench","awayTeam","totalHomeTeamFieldSize","leftPlayers","length","totalHomeTeamBenchSize","leftBench","Center","Wing","Guard","Sub","totalHomeTeamSize","totalAwayTeamFieldSize","rightPlayers","totalAwayTeamBenchSize","rightBench","totalAwayTeamSize","i","bot","create","id","teamName","teamPicUrl","o","savePlayerRecords","saveTeamRecords","gameResults","homeTeamScore","homeTeamName","awayTeamScore","awayTeamName","startTime","lastUpdated","serverTimestamp","status","collection","doc","fixtureId","events","batch","forEach","ref","set","commit"],"mappings":"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","file":"main.js","sourcesContent":["import * as admin from 'firebase-admin'\r\n\r\nimport Challenge from './challenge'\r\nimport BotGenerator from './botGenerator'\r\nimport Util from './util'\r\n\r\nlet botGenerator = new BotGenerator()\r\nlet challenge = null // will set once this.record is available\r\nconst util = new Util()\r\nconst FieldValue = admin.firestore.FieldValue\r\n\r\nexport default class Main {\r\n  constructor(matchData, World, Player, Pitch, Board, Ball, record) {\r\n    this.stopSim = false\r\n    this.now = Date.now()\r\n    this.then = Date.now()\r\n    this.fps = 1000\r\n    this.maxGameTime = 70\r\n    this.elapsed = null\r\n    this.matchData = matchData\r\n    this.World = World\r\n    this.Player = Player\r\n    this.Pitch = Pitch\r\n    this.Board = Board\r\n    this.Ball = Ball\r\n    this.record = record\r\n    this.counter = 0\r\n    this.db = null\r\n  }\r\n\r\n  beginGame(framesPerSecond, maxGameTime, db) {\r\n    if (util.getType(framesPerSecond) === '[object Number]') {\r\n      this.db = db\r\n      challenge = new Challenge(this.record)\r\n      this.fps = framesPerSecond\r\n      this.maxGameTime = maxGameTime ? maxGameTime : this.maxGameTime\r\n      //register world\r\n      this.world = new this.World()\r\n\r\n      //register pitch\r\n      const pitch = new this.Pitch(this.matchData)\r\n      this.world.register(pitch)\r\n\r\n      //register scoreboard\r\n      const board = new this.Board(this.matchData, pitch, this.maxGameTime)\r\n      this.world.register(board)\r\n\r\n      //register ball\r\n      const ball = new this.Ball(pitch)\r\n      this.world.register(ball)\r\n\r\n      this.createWorldHumanPlayers(this.world, challenge)\r\n      this.createWorldNpcPlayers(this.world, challenge)\r\n\r\n      //start main game loop\r\n      this.mainLoop()\r\n    } else {\r\n      throw new Error('Cannot start game: incorrect param data types')\r\n    }\r\n  }\r\n\r\n  mainLoop() {\r\n    if (this.stopSim) {\r\n      return\r\n    }\r\n    this.now = Date.now()\r\n    this.elapsed = this.now - this.then\r\n\r\n    if (this.elapsed > this.fps) {\r\n      this.update()\r\n      this.then = this.now - (this.elapsed % this.fps)\r\n    }\r\n    // window.requestAnimationFrame(this.mainLoop.bind(this))\r\n    setImmediate(this.mainLoop.bind(this))\r\n  }\r\n\r\n  update() {\r\n    this.counter++\r\n    try {\r\n      this.world.update(challenge)\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n    \r\n    challenge.update(this.world)\r\n    challenge.reset()\r\n    \r\n    if (this.world.objects[1]['gameTime'] === this.maxGameTime) {\r\n      this.stopSim = true\r\n      console.log('@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@RECORDS@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@')\r\n      console.log(this.record.records)\r\n      console.log('$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$WORLD$$$$$$$$$$$$$$$$$$$$$$$$$$$$$')\r\n      console.log(this.world)\r\n      // this.writeMatchRecords(this.world)\r\n    }\r\n  }\r\n\r\n  createWorldHumanPlayers(world, challenge) {\r\n    // register home team players on left side\r\n    for (let player of this.matchData.homeTeam.players) {\r\n      const playerToAdd = new this.Player(player, world, challenge, 'left')\r\n      if (playerToAdd.role !== undefined) {\r\n        if (['center1', 'left1', 'right1', 'guard1'].indexOf(playerToAdd.lineupPosition) >= 0) {\r\n          world.register(playerToAdd)\r\n          world.addToField('left', playerToAdd)\r\n        } else if (['center2', 'left2', 'right2', 'guard2', 'sub1', 'sub2'].indexOf(playerToAdd.lineupPosition) >= 0) {\r\n          world.addToBench('left', playerToAdd)\r\n        }\r\n      }\r\n    }\r\n    \r\n    // register away team players on right side\r\n    for (let player of this.matchData.awayTeam.players) {\r\n      const playerToAdd = new this.Player(player, world, challenge, 'right')\r\n      if (playerToAdd.role !== undefined) {\r\n        if (['center1', 'left1', 'right1', 'guard1'].indexOf(playerToAdd.lineupPosition) >= 0) {\r\n          world.register(playerToAdd)\r\n          world.addToField('right', playerToAdd)\r\n        } else if (['center2', 'left2', 'right2', 'guard2', 'sub1', 'sub2'].indexOf(playerToAdd.lineupPosition) >= 0) {\r\n          world.addToBench('right', playerToAdd)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  createWorldNpcPlayers(world, challenge) {\r\n    // create bots for teams lacking players\r\n    let totalHomeTeamFieldSize = world.leftPlayers.length\r\n    let totalHomeTeamBenchSize = world.leftBench.Center.length + world.leftBench.Wing.length + world.leftBench.Guard.length + world.leftBench.Sub.length\r\n    const totalHomeTeamSize = totalHomeTeamFieldSize + totalHomeTeamBenchSize\r\n\r\n    let totalAwayTeamFieldSize = world.rightPlayers.length\r\n    let totalAwayTeamBenchSize = world.rightBench.Center.length + world.rightBench.Wing.length + world.rightBench.Guard.length + world.rightBench.Sub.length\r\n    const totalAwayTeamSize = totalAwayTeamFieldSize + totalAwayTeamBenchSize\r\n\r\n    // if (this.matchData.homeTeam.players.length < 4) {\r\n    if (totalHomeTeamSize < 10) {\r\n      for (var i = totalHomeTeamSize; i < 10; i++) {\r\n        const bot = botGenerator.create(this.matchData.homeTeam.id, this.matchData.homeTeam.teamName, this.matchData.homeTeam.teamPicUrl)\r\n        const playerToAdd = new this.Player(bot, world, challenge, 'left')\r\n        if (totalHomeTeamFieldSize < 4) {\r\n          world.register(playerToAdd)\r\n          world.addToField('left', playerToAdd)\r\n          totalHomeTeamFieldSize++\r\n        } else if (totalHomeTeamBenchSize < 6) {\r\n          world.addToBench('left', playerToAdd)\r\n          totalHomeTeamBenchSize++\r\n        }\r\n      }\r\n    }\r\n\r\n    // create bots for teams lacking players\r\n    if (totalAwayTeamSize < 10) {\r\n      for (var o = totalAwayTeamSize; o < 10; o++) {\r\n        const bot = botGenerator.create(this.matchData.awayTeam.id, this.matchData.awayTeam.teamName, this.matchData.awayTeam.teamPicUrl)\r\n        const playerToAdd = new this.Player(bot, world, challenge, 'right')\r\n        if (totalAwayTeamFieldSize < 4) {\r\n          world.register(playerToAdd)\r\n          world.addToField('right', playerToAdd)\r\n          totalAwayTeamFieldSize++\r\n        } else if (totalAwayTeamBenchSize < 6) {\r\n          world.addToBench('right', playerToAdd)\r\n          totalAwayTeamBenchSize++\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  writeMatchRecords(world) {\r\n    this.savePlayerRecords(this.record.records)\r\n    this.saveTeamRecords(world)\r\n  }\r\n\r\n  saveTeamRecords(world) {\r\n    const gameResults = {\r\n      homeTeamScore: world.objects[1]['leftScore'],\r\n      homeTeamName: world.objects[1]['leftTeamName'],\r\n      awayTeamScore: world.objects[1]['rightScore'],\r\n      awayTeamName: world.objects[1]['rightTeamName'],\r\n      startTime: world.objects[1]['startTime'],\r\n      lastUpdated: FieldValue.serverTimestamp(),\r\n      status: 'complete'\r\n    }\r\n    this.db.collection('fixtures').doc(this.matchData.fixtureId).update(gameResults)\r\n  }\r\n\r\n  savePlayerRecords(events) {\r\n    let batch = this.db.batch()\r\n    events.forEach(record => {\r\n      record.fixtureId = this.matchData.fixtureId\r\n      const ref = this.db.collection('events').doc()\r\n      batch.set(ref, record)\r\n    })\r\n\r\n    batch.commit()\r\n  }\r\n\r\n}"]}