{"version":3,"sources":["../../src/sim/main.js"],"names":["admin","botGenerator","challenge","util","FieldValue","firestore","Main","matchData","World","Player","Pitch","Board","Ball","record","stopSim","now","Date","then","fps","maxGameTime","elapsed","counter","db","framesPerSecond","getType","world","pitch","register","board","ball","homeTeam","players","player","playerToAdd","leftPlayers","push","awayTeam","rightPlayers","length","i","bot","create","id","teamName","teamPicUrl","mainLoop","Error","update","setImmediate","bind","reset","toString","objects","writeMatchRecords","savePlayerRecords","records","saveTeamRecords","gameResults","homeTeamScore","homeTeamName","awayTeamScore","awayTeamName","startTime","lastUpdated","serverTimestamp","status","collection","doc","fixtureId","events","batch","forEach","ref","set","commit"],"mappings":"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","file":"main.js","sourcesContent":["import * as admin from 'firebase-admin'\r\n\r\nimport Challenge from './challenge'\r\nimport BotGenerator from './botGenerator'\r\nimport Util from './util'\r\n\r\nlet botGenerator = new BotGenerator()\r\nlet challenge = null // will set once this.record is available\r\nconst util = new Util()\r\nconst FieldValue = admin.firestore.FieldValue\r\n\r\nexport default class Main {\r\n  constructor(matchData, World, Player, Pitch, Board, Ball, record) {\r\n    this.stopSim = false\r\n    this.now = Date.now()\r\n    this.then = Date.now()\r\n    this.fps = 1000\r\n    this.maxGameTime = 70\r\n    this.elapsed = null\r\n    this.matchData = matchData\r\n    this.World = World\r\n    this.Player = Player\r\n    this.Pitch = Pitch\r\n    this.Board = Board\r\n    this.Ball = Ball\r\n    this.record = record\r\n    this.counter = 0\r\n    this.db = null\r\n  }\r\n\r\n  beginGame(framesPerSecond, maxGameTime, db) {\r\n    if (util.getType(framesPerSecond) === '[object Number]') {\r\n      this.db = db\r\n      challenge = new Challenge(this.record)\r\n      this.fps = framesPerSecond\r\n      this.maxGameTime = maxGameTime ? maxGameTime : this.maxGameTime\r\n      //register world\r\n      this.world = new this.World()\r\n\r\n      //register pitch\r\n      const pitch = new this.Pitch(this.matchData)\r\n      this.world.register(pitch)\r\n\r\n      //register scoreboard\r\n      const board = new this.Board(this.matchData, pitch, this.maxGameTime)\r\n      this.world.register(board)\r\n\r\n      //register ball\r\n      const ball = new this.Ball(pitch)\r\n      this.world.register(ball)\r\n\r\n      // register home team players on left side\r\n      for (let player of this.matchData.homeTeam.players) {\r\n        const playerToAdd = new this.Player(player, this.world, challenge, 'left')\r\n        this.world.register(playerToAdd)\r\n        this.world.leftPlayers.push(playerToAdd)\r\n      }\r\n\r\n      // register away team players on right side\r\n      for (let player of this.matchData.awayTeam.players) {\r\n        const playerToAdd = new this.Player(player, this.world, challenge, 'right')\r\n        this.world.register(playerToAdd)\r\n        this.world.rightPlayers.push(playerToAdd)\r\n      }\r\n\r\n      if (this.matchData.homeTeam.players.length < 4) {\r\n        for (var i = this.matchData.homeTeam.players.length; i < 4; i++) {\r\n          const bot = botGenerator.create(this.matchData.homeTeam.id, this.matchData.homeTeam.teamName, this.matchData.homeTeam.teamPicUrl)\r\n          const playerToAdd = new this.Player(bot, this.world, challenge, 'left')\r\n          this.world.register(playerToAdd)\r\n          this.world.leftPlayers.push(playerToAdd)\r\n        }\r\n      }\r\n\r\n      if (this.matchData.awayTeam.players.length < 4) {\r\n        for (var i = this.matchData.awayTeam.players.length; i < 4; i++) {\r\n          const bot = botGenerator.create(this.matchData.awayTeam.id, this.matchData.awayTeam.teamName, this.matchData.awayTeam.teamPicUrl)\r\n          const playerToAdd = new this.Player(bot, this.world, challenge, 'right')\r\n          this.world.register(playerToAdd)\r\n          this.world.rightPlayers.push(playerToAdd)\r\n        }\r\n      }\r\n\r\n      //start main game loop\r\n      this.mainLoop()\r\n    } else {\r\n      throw new Error('Cannot start game: incorrect param data types')\r\n    }\r\n  }\r\n\r\n  mainLoop() {\r\n    if (this.stopSim) {\r\n      return\r\n    }\r\n    this.now = Date.now()\r\n    this.elapsed = this.now - this.then\r\n\r\n    if (this.elapsed > this.fps) {\r\n      this.update()\r\n      this.then = this.now - (this.elapsed % this.fps)\r\n    }\r\n    // window.requestAnimationFrame(this.mainLoop.bind(this))\r\n    setImmediate(this.mainLoop.bind(this))\r\n  }\r\n\r\n  update() {\r\n    this.world.update()\r\n    challenge.update(this.world)\r\n    challenge.reset()\r\n    this.counter++\r\n    if (this.counter.toString() === '5') {\r\n      // this.stopSim = true\r\n    }\r\n    // console.log('counter is: ' + this.counter )\r\n    if (this.world.objects[1]['gameTime'] === this.maxGameTime) {\r\n      this.stopSim = true\r\n      this.writeMatchRecords(this.world)\r\n    }\r\n  }\r\n\r\n  writeMatchRecords(world) {\r\n    this.savePlayerRecords(this.record.records)\r\n    this.saveTeamRecords(world)\r\n  }\r\n\r\n  saveTeamRecords(world) {\r\n    const gameResults = {\r\n      homeTeamScore: world.objects[1]['leftScore'],\r\n      homeTeamName: world.objects[1]['leftTeamName'],\r\n      awayTeamScore: world.objects[1]['rightScore'],\r\n      awayTeamName: world.objects[1]['rightTeamName'],\r\n      startTime: world.objects[1]['startTime'],\r\n      lastUpdated: FieldValue.serverTimestamp(),\r\n      status: 'complete'\r\n    }\r\n    this.db.collection('fixtures').doc(this.matchData.fixtureId).update(gameResults)\r\n  }\r\n\r\n  savePlayerRecords(events) {\r\n    let batch = this.db.batch()\r\n    events.forEach(record => {\r\n      record.fixtureId = this.matchData.fixtureId\r\n      const ref = this.db.collection('events').doc()\r\n      batch.set(ref, record)\r\n    })\r\n\r\n    batch.commit()\r\n  }\r\n\r\n}"]}