{"version":3,"sources":["../../src/sim/main.js"],"names":["admin","botGenerator","challenge","util","FieldValue","firestore","Main","matchData","World","Player","Pitch","Board","Ball","record","stopSim","now","Date","then","fps","maxGameTime","elapsed","counter","db","framesPerSecond","getType","world","pitch","register","board","ball","createWorldHumanPlayers","createWorldNpcPlayers","mainLoop","Error","update","setImmediate","bind","reset","objects","writeMatchRecords","homeTeam","players","player","playerToAdd","role","undefined","indexOf","lineupPosition","leftPlayers","push","leftBench","awayTeam","rightPlayers","rightBench","totalHomeTeamSize","length","totalAwayTeamSize","i","bot","create","id","teamName","teamPicUrl","savePlayerRecords","records","saveTeamRecords","gameResults","homeTeamScore","homeTeamName","awayTeamScore","awayTeamName","startTime","lastUpdated","serverTimestamp","status","collection","doc","fixtureId","events","batch","forEach","ref","set","commit"],"mappings":"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","file":"main.js","sourcesContent":["import * as admin from 'firebase-admin'\r\n\r\nimport Challenge from './challenge'\r\nimport BotGenerator from './botGenerator'\r\nimport Util from './util'\r\n\r\nlet botGenerator = new BotGenerator()\r\nlet challenge = null // will set once this.record is available\r\nconst util = new Util()\r\nconst FieldValue = admin.firestore.FieldValue\r\n\r\nexport default class Main {\r\n  constructor(matchData, World, Player, Pitch, Board, Ball, record) {\r\n    this.stopSim = false\r\n    this.now = Date.now()\r\n    this.then = Date.now()\r\n    this.fps = 1000\r\n    this.maxGameTime = 70\r\n    this.elapsed = null\r\n    this.matchData = matchData\r\n    this.World = World\r\n    this.Player = Player\r\n    this.Pitch = Pitch\r\n    this.Board = Board\r\n    this.Ball = Ball\r\n    this.record = record\r\n    this.counter = 0\r\n    this.db = null\r\n  }\r\n\r\n  beginGame(framesPerSecond, maxGameTime, db) {\r\n    if (util.getType(framesPerSecond) === '[object Number]') {\r\n      this.db = db\r\n      challenge = new Challenge(this.record)\r\n      this.fps = framesPerSecond\r\n      this.maxGameTime = maxGameTime ? maxGameTime : this.maxGameTime\r\n      //register world\r\n      this.world = new this.World()\r\n\r\n      //register pitch\r\n      const pitch = new this.Pitch(this.matchData)\r\n      this.world.register(pitch)\r\n\r\n      //register scoreboard\r\n      const board = new this.Board(this.matchData, pitch, this.maxGameTime)\r\n      this.world.register(board)\r\n\r\n      //register ball\r\n      const ball = new this.Ball(pitch)\r\n      this.world.register(ball)\r\n\r\n      this.createWorldHumanPlayers(this.world, challenge)\r\n      this.createWorldNpcPlayers(this.world, challenge)\r\n\r\n      //start main game loop\r\n      this.mainLoop()\r\n    } else {\r\n      throw new Error('Cannot start game: incorrect param data types')\r\n    }\r\n  }\r\n\r\n  mainLoop() {\r\n    if (this.stopSim) {\r\n      return\r\n    }\r\n    this.now = Date.now()\r\n    this.elapsed = this.now - this.then\r\n\r\n    if (this.elapsed > this.fps) {\r\n      this.update()\r\n      this.then = this.now - (this.elapsed % this.fps)\r\n    }\r\n    // window.requestAnimationFrame(this.mainLoop.bind(this))\r\n    setImmediate(this.mainLoop.bind(this))\r\n  }\r\n\r\n  update() {\r\n    this.counter++\r\n    this.world.update()\r\n    challenge.update(this.world)\r\n    challenge.reset()\r\n\r\n    // **** simulating a player coming off the pitch\r\n    // if (this.counter.toString() === '7') {\r\n    //   this.world.playerDeregister({ shockballPlayerUid: 'F6FknRwa6SPEbF1azKYU', homeGoalSide: 'left'})\r\n    // }\r\n\r\n    // **** simulating a player coming on the pitch\r\n    // if (this.counter.toString() === '8') {\r\n    //   const examplePlayer = {\r\n    //     shockballPlayerUid: 'F6FknRwa6SPEbF1azKYU',\r\n    //     name: 'Callisto Xaltir',\r\n    //     image: 'http://custom.swcombine.com/static/1/1232616-100-100.jpg?1328204107',\r\n    //     teamUid: '4dt21p2M1q7WmjjwJHfw',\r\n    //     teamName: 'Abregado Gentlemen',\r\n    //     teamPicUrl: 'https://i.pinimg.com/736x/3a/55/2f/3a552f7be8e2675a16f3e4effa6d075a--bulldog-mascot-mascot-design.jpg',\r\n    //     lineupPosition: 'center1',\r\n    //     role: 'Center',\r\n    //     passing: 49.75,\r\n    //     toughness: 45.75,\r\n    //     throwing: 51.75,\r\n    //     fatigue: 14.024999999999995,\r\n    //     endurance: 46.75,\r\n    //     vision: 40.75,\r\n    //     blocking: 39.75\r\n    //   }\r\n    //   const playerToAdd = new this.Player(examplePlayer, this.world, challenge, 'left')\r\n    //   this.world.register(playerToAdd)\r\n    //   this.world.leftPlayers.push(playerToAdd)\r\n    // }\r\n    \r\n    if (this.world.objects[1]['gameTime'] === this.maxGameTime) {\r\n      this.stopSim = true\r\n      this.writeMatchRecords(this.world)\r\n    }\r\n  }\r\n\r\n  createWorldHumanPlayers(world, challenge) {\r\n    // register home team players on left side\r\n    for (let player of this.matchData.homeTeam.players) {\r\n      const playerToAdd = new this.Player(player, world, challenge, 'left')\r\n      if (playerToAdd.role !== undefined) {\r\n        if (['center1', 'left1', 'right1', 'guard1'].indexOf(playerToAdd.lineupPosition) >= 0) {\r\n          world.register(playerToAdd)\r\n          world.leftPlayers.push(playerToAdd)\r\n        } else if (['center2', 'left2', 'right2', 'guard2', 'sub1', 'sub2'].indexOf(playerToAdd.lineupPosition) >= 0) {\r\n          world.leftBench.push(playerToAdd)\r\n        }\r\n      }\r\n    }\r\n    \r\n    // register away team players on right side\r\n    for (let player of this.matchData.awayTeam.players) {\r\n      const playerToAdd = new this.Player(player, world, challenge, 'right')\r\n      if (playerToAdd.role !== undefined) {\r\n        if (['center1', 'left1', 'right1', 'guard1'].indexOf(playerToAdd.lineupPosition) >= 0) {\r\n          world.register(playerToAdd)\r\n          world.rightPlayers.push(playerToAdd)\r\n        } else if (['center2', 'left2', 'right2', 'guard2', 'sub1', 'sub2'].indexOf(playerToAdd.lineupPosition) >= 0) {\r\n          world.rightBench.push(playerToAdd)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  createWorldNpcPlayers(world, challenge) {\r\n    // create bots for teams lacking players\r\n    const totalHomeTeamSize = world.leftPlayers.length + world.leftBench.length\r\n    const totalAwayTeamSize = world.rightPlayers.length + world.rightBench.length\r\n    // if (this.matchData.homeTeam.players.length < 4) {\r\n    if (totalHomeTeamSize < 10) {\r\n      for (var i = totalHomeTeamSize; i < 10; i++) {\r\n        const bot = botGenerator.create(this.matchData.homeTeam.id, this.matchData.homeTeam.teamName, this.matchData.homeTeam.teamPicUrl)\r\n        const playerToAdd = new this.Player(bot, world, challenge, 'left')\r\n        if (world.leftPlayers.length < 4) {\r\n          world.register(playerToAdd)\r\n          world.leftPlayers.push(playerToAdd)\r\n        } else if (world.leftBench.length < 6) {\r\n          world.leftBench.push(playerToAdd)\r\n        }\r\n      }\r\n    }\r\n\r\n    // create bots for teams lacking players\r\n    if (totalAwayTeamSize < 10) {\r\n      for (var i = totalAwayTeamSize; i < 10; i++) {\r\n        const bot = botGenerator.create(this.matchData.awayTeam.id, this.matchData.awayTeam.teamName, this.matchData.awayTeam.teamPicUrl)\r\n        const playerToAdd = new this.Player(bot, world, challenge, 'right')\r\n        if (world.rightPlayers.length < 4) {\r\n          world.register(playerToAdd)\r\n          world.rightPlayers.push(playerToAdd)\r\n        } else if (world.rightBench.length < 6) {\r\n          world.rightBench.push(playerToAdd)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  writeMatchRecords(world) {\r\n    this.savePlayerRecords(this.record.records)\r\n    this.saveTeamRecords(world)\r\n  }\r\n\r\n  saveTeamRecords(world) {\r\n    const gameResults = {\r\n      homeTeamScore: world.objects[1]['leftScore'],\r\n      homeTeamName: world.objects[1]['leftTeamName'],\r\n      awayTeamScore: world.objects[1]['rightScore'],\r\n      awayTeamName: world.objects[1]['rightTeamName'],\r\n      startTime: world.objects[1]['startTime'],\r\n      lastUpdated: FieldValue.serverTimestamp(),\r\n      status: 'complete'\r\n    }\r\n    this.db.collection('fixtures').doc(this.matchData.fixtureId).update(gameResults)\r\n  }\r\n\r\n  savePlayerRecords(events) {\r\n    let batch = this.db.batch()\r\n    events.forEach(record => {\r\n      record.fixtureId = this.matchData.fixtureId\r\n      const ref = this.db.collection('events').doc()\r\n      batch.set(ref, record)\r\n    })\r\n\r\n    batch.commit()\r\n  }\r\n\r\n}"]}