{"version":3,"sources":["../../src/sim/main.js"],"names":["admin","botGenerator","BotGenerator","challenge","util","Util","FieldValue","firestore","Main","matchData","World","Player","Pitch","Board","Ball","record","stopSim","now","Date","then","fps","maxGameTime","elapsed","counter","db","framesPerSecond","getType","Challenge","world","pitch","register","board","ball","createWorldHumanPlayers","createWorldNpcPlayers","mainLoop","Error","update","setImmediate","bind","error","console","log","reset","objects","writeMatchRecords","homeTeam","players","player","playerToAdd","role","undefined","indexOf","lineupPosition","addToField","addToBench","awayTeam","totalHomeTeamFieldSize","leftPlayers","length","totalHomeTeamBenchSize","leftBench","Center","Wing","Guard","Sub","totalHomeTeamSize","totalAwayTeamFieldSize","rightPlayers","totalAwayTeamBenchSize","rightBench","totalAwayTeamSize","i","bot","create","id","teamName","teamPicUrl","o","savePlayerRecords","records","saveTeamRecords","gameResults","homeTeamScore","homeTeamName","awayTeamScore","awayTeamName","startTime","lastUpdated","serverTimestamp","status","collection","doc","fixtureId","events","batch","forEach","ref","set","commit"],"mappings":"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","file":"main.js","sourcesContent":["import * as admin from 'firebase-admin'\n\nimport Challenge from './challenge'\nimport BotGenerator from './botGenerator'\nimport Util from './util'\n\nlet botGenerator = new BotGenerator()\nlet challenge = null // will set once this.record is available\nconst util = new Util()\nconst FieldValue = admin.firestore.FieldValue\n\nexport default class Main {\n  constructor(matchData, World, Player, Pitch, Board, Ball, record) {\n    this.stopSim = false\n    this.now = Date.now()\n    this.then = Date.now()\n    this.fps = 1000\n    this.maxGameTime = 70\n    this.elapsed = null\n    this.matchData = matchData\n    this.World = World\n    this.Player = Player\n    this.Pitch = Pitch\n    this.Board = Board\n    this.Ball = Ball\n    this.record = record\n    this.counter = 0\n    this.db = null\n  }\n\n  beginGame(framesPerSecond, maxGameTime, db) {\n    if (util.getType(framesPerSecond) === '[object Number]') {\n      this.db = db\n      challenge = new Challenge(this.record)\n      this.fps = framesPerSecond\n      this.maxGameTime = maxGameTime ? maxGameTime : this.maxGameTime\n      //register world\n      this.world = new this.World()\n\n      //register pitch\n      const pitch = new this.Pitch(this.matchData)\n      this.world.register(pitch)\n\n      //register scoreboard\n      const board = new this.Board(this.matchData, pitch, this.maxGameTime)\n      this.world.register(board)\n\n      //register ball\n      const ball = new this.Ball(pitch)\n      this.world.register(ball)\n\n      this.createWorldHumanPlayers(this.world, challenge)\n      this.createWorldNpcPlayers(this.world, challenge)\n\n      //start main game loop\n      this.mainLoop()\n    } else {\n      throw new Error('Cannot start game: incorrect param data types')\n    }\n  }\n\n  mainLoop() {\n    if (this.stopSim) {\n      return\n    }\n    this.now = Date.now()\n    this.elapsed = this.now - this.then\n\n    if (this.elapsed > this.fps) {\n      this.update()\n      this.then = this.now - (this.elapsed % this.fps)\n    }\n    // window.requestAnimationFrame(this.mainLoop.bind(this))\n    setImmediate(this.mainLoop.bind(this))\n  }\n\n  update() {\n    this.counter++\n    try {\n      this.world.update(challenge)\n    } catch (error) {\n      console.log(error)\n    }\n    \n    challenge.update(this.world)\n    challenge.reset()\n    \n    if (this.world.objects[1]['gameTime'] === this.maxGameTime) {\n      this.stopSim = true\n      this.writeMatchRecords(this.world)\n    }\n  }\n\n  createWorldHumanPlayers(world, challenge) {\n    // register home team players on left side\n    for (let player of this.matchData.homeTeam.players) {\n      const playerToAdd = new this.Player(player, world, challenge, 'left')\n      if (playerToAdd.role !== undefined) {\n        if (['center1', 'left1', 'right1', 'guard1'].indexOf(playerToAdd.lineupPosition) >= 0) {\n          world.register(playerToAdd)\n          world.addToField('left', playerToAdd)\n        } else if (['center2', 'left2', 'right2', 'guard2', 'sub1', 'sub2'].indexOf(playerToAdd.lineupPosition) >= 0) {\n          world.addToBench('left', playerToAdd)\n        }\n      }\n    }\n    \n    // register away team players on right side\n    for (let player of this.matchData.awayTeam.players) {\n      const playerToAdd = new this.Player(player, world, challenge, 'right')\n      if (playerToAdd.role !== undefined) {\n        if (['center1', 'left1', 'right1', 'guard1'].indexOf(playerToAdd.lineupPosition) >= 0) {\n          world.register(playerToAdd)\n          world.addToField('right', playerToAdd)\n        } else if (['center2', 'left2', 'right2', 'guard2', 'sub1', 'sub2'].indexOf(playerToAdd.lineupPosition) >= 0) {\n          world.addToBench('right', playerToAdd)\n        }\n      }\n    }\n  }\n\n  createWorldNpcPlayers(world, challenge) {\n    // create bots for teams lacking players\n    let totalHomeTeamFieldSize = world.leftPlayers.length\n    let totalHomeTeamBenchSize = world.leftBench.Center.length + world.leftBench.Wing.length + world.leftBench.Guard.length + world.leftBench.Sub.length\n    const totalHomeTeamSize = totalHomeTeamFieldSize + totalHomeTeamBenchSize\n\n    let totalAwayTeamFieldSize = world.rightPlayers.length\n    let totalAwayTeamBenchSize = world.rightBench.Center.length + world.rightBench.Wing.length + world.rightBench.Guard.length + world.rightBench.Sub.length\n    const totalAwayTeamSize = totalAwayTeamFieldSize + totalAwayTeamBenchSize\n\n    // if (this.matchData.homeTeam.players.length < 4) {\n    if (totalHomeTeamSize < 10) {\n      for (var i = totalHomeTeamSize; i < 10; i++) {\n        const bot = botGenerator.create(this.matchData.homeTeam.id, this.matchData.homeTeam.teamName, this.matchData.homeTeam.teamPicUrl)\n        const playerToAdd = new this.Player(bot, world, challenge, 'left')\n        if (totalHomeTeamFieldSize < 4) {\n          world.register(playerToAdd)\n          world.addToField('left', playerToAdd)\n          totalHomeTeamFieldSize++\n        } else if (totalHomeTeamBenchSize < 6) {\n          world.addToBench('left', playerToAdd)\n          totalHomeTeamBenchSize++\n        }\n      }\n    }\n\n    // create bots for teams lacking players\n    if (totalAwayTeamSize < 10) {\n      for (var o = totalAwayTeamSize; o < 10; o++) {\n        const bot = botGenerator.create(this.matchData.awayTeam.id, this.matchData.awayTeam.teamName, this.matchData.awayTeam.teamPicUrl)\n        const playerToAdd = new this.Player(bot, world, challenge, 'right')\n        if (totalAwayTeamFieldSize < 4) {\n          world.register(playerToAdd)\n          world.addToField('right', playerToAdd)\n          totalAwayTeamFieldSize++\n        } else if (totalAwayTeamBenchSize < 6) {\n          world.addToBench('right', playerToAdd)\n          totalAwayTeamBenchSize++\n        }\n      }\n    }\n  }\n\n  writeMatchRecords(world) {\n    this.savePlayerRecords(this.record.records)\n    this.saveTeamRecords(world)\n  }\n\n  saveTeamRecords(world) {\n    const gameResults = {\n      homeTeamScore: world.objects[1]['leftScore'],\n      homeTeamName: world.objects[1]['leftTeamName'],\n      awayTeamScore: world.objects[1]['rightScore'],\n      awayTeamName: world.objects[1]['rightTeamName'],\n      startTime: world.objects[1]['startTime'],\n      lastUpdated: FieldValue.serverTimestamp(),\n      status: 'complete'\n    }\n    this.db.collection('fixtures').doc(this.matchData.fixtureId).update(gameResults)\n  }\n\n  savePlayerRecords(events) {\n    let batch = this.db.batch()\n    events.forEach(record => {\n      record.fixtureId = this.matchData.fixtureId\n      const ref = this.db.collection('events').doc()\n      batch.set(ref, record)\n    })\n\n    batch.commit()\n  }\n\n}"]}