{"version":3,"sources":["../../src/sim/challenge.js"],"names":["chance","Challenge","record","world","pitch","board","ball","leftPlayers","rightPlayers","tackleBall","playerTryRun","playerTryScore","playerTryPass","playerTryTackle","objects","length","resolveTackleBall","resolvePlayerRun","resolvePlayerTryScore","resolvePlayerTryPass","player","push","map","tackleScore","toughness","rpg","sum","highestTackleScore","Math","max","apply","winningPlayer","find","add","gameTime","possess","createdAsUid","lastSideTouched","homeGoalSide","lastPlayerTouched","theBall","runningPlayer","possessedBy","randomTackler","pickone","tacklerScore","vision","runningPlayerScore","runForward","getsTackled","shootingPlayer","attackingSide","probability","random","opposingPlayer","undefined","role","shootingScore","throwing","blockingScore","blocking","score","goalBlock","slice","passingPlayer","passingScore","passing","passForward","passBlock","opposingActorUid","opposingActorName","name","reset","addScore","lastGoalSide","state","abs","goalProximity","goalPit","left","right","availableTeammates","filter","playerToWinPossession"],"mappings":"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","file":"challenge.js","sourcesContent":["import Chance from 'chance'\r\nconst chance = new Chance()\r\n\r\nexport default class Challenge {\r\n  constructor(record) {\r\n    this.world = null\r\n    this.pitch = null\r\n    this.board = null\r\n    this.ball = null\r\n    this.leftPlayers = null\r\n    this.rightPlayers = null\r\n    this.tackleBall = []\r\n    this.playerTryRun = []\r\n    this.playerTryScore = []\r\n    this.playerTryPass = []\r\n    this.playerTryTackle = []\r\n    this.record = record\r\n  }\r\n\r\n  update(world) {\r\n    this.world = world\r\n    this.pitch = this.world.objects[0]\r\n    this.board = this.world.objects[1]\r\n    this.ball = this.world.objects[2]\r\n    this.leftPlayers = this.world.leftPlayers\r\n    this.rightPlayers = this.world.rightPlayers\r\n    if (this.tackleBall.length > 0) {\r\n      this.resolveTackleBall()\r\n    }\r\n    if (this.playerTryRun.length > 0) {\r\n      this.resolvePlayerRun()\r\n    }\r\n    if (this.playerTryScore.length > 0) {\r\n      this.resolvePlayerTryScore()\r\n    }\r\n    if (this.playerTryPass.length > 0) {\r\n      this.resolvePlayerTryPass()\r\n    }\r\n  }\r\n\r\n  reset() {\r\n    this.tackleBall = []\r\n    this.playerTryRun =[]\r\n    this.playerTryScore = []\r\n    this.playerTryPass = []\r\n    this.playerTryTackle = []\r\n  }\r\n\r\n  addTackleBall(player) {\r\n    this.tackleBall.push(player)\r\n  }\r\n\r\n  addTryRun(player) {\r\n    this.playerTryRun.push(player)\r\n  }\r\n\r\n  addTryScore(player) {\r\n    this.playerTryScore.push(player)\r\n  }\r\n\r\n  addTryPass(player) {\r\n    this.playerTryPass.push(player)\r\n  }\r\n\r\n  addTryTacklePlayer(player) {\r\n    this.playerTryTackle.push(player)\r\n  }\r\n\r\n  resolveTackleBall() {\r\n    // here would be a struggle between whoever else on the field for control of the ball, or shot block, or pass interception/block, after winning the encounter, .possess is called\r\n    // for now the Toughness attribute determines who wins the Tackle\r\n    // for now we look at each player vying to tackle the ball, and add their Toughness and a random dice roll - highest wins\r\n    this.tackleBall.map(function(player){\r\n      player.tackleScore = player.toughness + chance.rpg('2d6', {sum:true})\r\n    })\r\n    const highestTackleScore = Math.max.apply(Math, this.tackleBall.map(function(player) {\r\n      return player.tackleScore\r\n    }))\r\n    const winningPlayer = this.tackleBall.find(function(player) {\r\n      return player.tackleScore === highestTackleScore\r\n    })\r\n    this.record.add(winningPlayer, 'tackles ball', this.board.gameTime)\r\n    this.ball.possess(winningPlayer.createdAsUid)\r\n    this.ball.lastSideTouched = winningPlayer.homeGoalSide\r\n    this.ball.lastPlayerTouched = winningPlayer.createdAsUid\r\n  }\r\n\r\n  resolvePlayerRun() {\r\n    // here the player THINKS he can ran, but in reality he'd have challengers.\r\n    // for now, he is unhindered\r\n    const theBall = this.ball\r\n    const runningPlayer = this.playerTryRun.find(function(player) {\r\n      return player.createdAsUid === theBall.possessedBy\r\n    })\r\n\r\n    //first player needs to beat tackle challenges from opposition, if there are any\r\n    if (this.playerTryTackle.length > 0) {\r\n      //we'll pick one at random for now\r\n      const randomTackler = chance.pickone(this.playerTryTackle, 1)\r\n      const tacklerScore = randomTackler.toughness + randomTackler.vision + chance.rpg('2d6', {sum:true})\r\n      const runningPlayerScore = runningPlayer.toughness + runningPlayer.vision + chance.rpg('2d6', {sum:true})\r\n      if (runningPlayerScore > tacklerScore) {\r\n        this.runForward(runningPlayer)\r\n      } else {\r\n        //gets tackled\r\n        this.getsTackled(runningPlayer, randomTackler, theBall)\r\n      }\r\n    } else {\r\n      this.runForward(runningPlayer)\r\n    }\r\n\r\n  }\r\n\r\n  resolvePlayerTryScore() {\r\n    // here is where the player THINKS he can score so he TRIES, and it's where reality kicks in and other players are attempting to block/stop/intercept him.\r\n    // for now, there are no other players so he's free to proceed unhindered, will write logic for challenging later\r\n    const theBall = this.ball\r\n    const shootingPlayer = this.playerTryScore.find(function(player) {\r\n      return player.createdAsUid === theBall.possessedBy\r\n    })\r\n\r\n    if (!shootingPlayer) {\r\n      // if there is no shooting player then it could be because the ballhandler didn't actually try to shoot (thus isn't in the array) but a player THOUGHT\r\n      // that he might based on their playerWorldModel understanding!  Basically he got it wrong.  :).  So we return out of this function altogether.\r\n      return\r\n    }\r\n    const attackingSide = shootingPlayer.homeGoalSide === 'left' ? 'right' : 'left'\r\n    //this is the shot attempt, make a record\r\n    this.record.add(shootingPlayer, 'shoots', this.board.gameTime)\r\n    //we now need to calculate if he scored or missed/was blocked\r\n    // we do a blanket probability of 60/30/10 for blocking by Guard then Wing and then Center.\r\n    let probability = Math.random()\r\n    let opposingPlayer = undefined\r\n    if (probability < 0.4) {\r\n      // Guard tries block action and if he fails, shooter is able to shoot\r\n      opposingPlayer = this.playerTryScore.find(function(player) {\r\n        return player.homeGoalSide === attackingSide && player.role === 'Guard'\r\n      })\r\n    } else if (probability < 0.6) {\r\n      // Wing tries block action and if he fails, shooter is able to shoot\r\n      opposingPlayer = this.playerTryScore.find(function(player) {\r\n        return player.homeGoalSide === attackingSide && player.role === 'Wing'\r\n      })\r\n    } else {\r\n      // Center tries block action and if he fails, shooter is able to shoot\r\n      opposingPlayer = this.playerTryScore.find(function(player) {\r\n        return player.homeGoalSide === attackingSide && player.role === 'Center'\r\n      })\r\n    }\r\n\r\n    //we handle here if generated bots by chance didn't have the right positions (I am not enforcing alwaysa  Guard, Wing, Center)\r\n    if (!opposingPlayer) {\r\n      //kinda hacky!\r\n      opposingPlayer = shootingPlayer\r\n    }\r\n\r\n    const shootingScore = shootingPlayer.throwing + shootingPlayer.vision + chance.rpg('2d6', {sum:true})\r\n    const blockingScore = opposingPlayer.blocking + opposingPlayer.vision + chance.rpg('2d6', {sum:true})\r\n\r\n    if (shootingScore > blockingScore || shootingPlayer === opposingPlayer) {\r\n      this.score(shootingPlayer, opposingPlayer, theBall)\r\n    } else {\r\n      // shooter is blocked\r\n      this.goalBlock(shootingPlayer, opposingPlayer, theBall)\r\n    }\r\n\r\n  }\r\n\r\n  resolvePlayerTryPass() {\r\n    // player THINKS he can pass so he tries.  We will need to transfer the ball possession to another player on success.\r\n    const theBall = this.ball\r\n    const leftPlayers = this.leftPlayers.slice()\r\n    const rightPlayers = this.rightPlayers.slice()\r\n\r\n    const passingPlayer = this.playerTryPass.find(function(player) {\r\n      return player.createdAsUid === theBall.possessedBy\r\n    })\r\n\r\n    if (!passingPlayer) {\r\n      //we need to return because ball has been fumbled and noone possesses it\r\n      return\r\n    }\r\n\r\n    //TODO make much better determination here!\r\n    const attackingSide = passingPlayer.homeGoalSide === 'left' ? 'right' : 'left'\r\n    let probability = Math.random()\r\n    let opposingPlayer = undefined\r\n    if (probability < 0.4) {\r\n      // Guard tries block action and if he fails, shooter is able to shoot\r\n      opposingPlayer = this.playerTryPass.find(function(player) {\r\n        return player.homeGoalSide === attackingSide && player.role === 'Guard'\r\n      })\r\n    } else if (probability < 0.6) {\r\n      // Wing tries block action and if he fails, shooter is able to shoot\r\n      opposingPlayer = this.playerTryPass.find(function(player) {\r\n        return player.homeGoalSide === attackingSide && player.role === 'Wing'\r\n      })\r\n    } else {\r\n      // Center tries block action and if he fails, shooter is able to shoot\r\n      opposingPlayer = this.playerTryPass.find(function(player) {\r\n        return player.homeGoalSide === attackingSide && player.role === 'Center'\r\n      })\r\n    }\r\n\r\n    //we handle here if generated bots by chance didn't have the right positions (I am not enforcing always a Guard, Wing, Center)\r\n    if (!opposingPlayer) {\r\n      //kinda hacky!\r\n      opposingPlayer = passingPlayer\r\n    }\r\n\r\n    const passingScore = passingPlayer.passing + passingPlayer.vision + chance.rpg('2d6', {sum:true})\r\n    const blockingScore = opposingPlayer.blocking + opposingPlayer.vision + chance.rpg('2d6', {sum:true})\r\n\r\n    if (passingScore > blockingScore || passingPlayer === opposingPlayer) {\r\n      //pass will be successful, now choose what teammate to pass to\r\n      this.passForward(passingPlayer, theBall, leftPlayers, rightPlayers)\r\n    } else {\r\n      //passer is blocked\r\n      this.passBlock(opposingPlayer, theBall)\r\n    }\r\n  }\r\n\r\n  score(shootingPlayer, opposingPlayer, ball) {\r\n    shootingPlayer.opposingActorUid = opposingPlayer.createdAsUid\r\n    shootingPlayer.opposingActorName = opposingPlayer.name\r\n    this.record.add(shootingPlayer, 'goal', this.board.gameTime)\r\n    ball.reset()\r\n    this.board.addScore(shootingPlayer.homeGoalSide)\r\n    this.pitch.lastGoalSide = shootingPlayer.homeGoalSide\r\n    this.pitch.state = 'before_kickoff'\r\n    ball.lastSideTouched = null\r\n  }\r\n\r\n  goalBlock(shootingPlayer, opposingPlayer, ball) {\r\n    opposingPlayer.opposingActorUid = shootingPlayer.createdAsUid\r\n    opposingPlayer.opposingActorName = shootingPlayer.name\r\n    this.record.add(opposingPlayer, 'goal blocked', this.board.gameTime)\r\n    ball.possessedBy = opposingPlayer.createdAsUid\r\n    ball.lastSideTouched = opposingPlayer.homeGoalSide\r\n  }\r\n\r\n  runForward(runningPlayer) {\r\n    if (Math.abs(this.ball.goalProximity) < Math.abs(this.pitch.goalPit[runningPlayer.homeGoalSide])) {\r\n      if (runningPlayer.homeGoalSide === 'right') {\r\n        this.record.add(runningPlayer, 'runs ball', this.board.gameTime)\r\n        if (this.pitch.goalPit.left < this.ball.goalProximity) {\r\n          this.ball.goalProximity--\r\n        }\r\n      } else if (runningPlayer.homeGoalSide === 'left') {\r\n        this.record.add(runningPlayer, 'runs ball', this.board.gameTime)\r\n        if (this.pitch.goalPit.right > this.ball.goalProximity) {\r\n          this.ball.goalProximity++\r\n        }\r\n      }\r\n    } else {\r\n      // console.error('in this player run else')\r\n    }\r\n  }\r\n\r\n  passForward(passingPlayer, ball, leftPlayers, rightPlayers) {\r\n    if (passingPlayer.homeGoalSide === 'right') {\r\n      const availableTeammates = rightPlayers.filter(function(player) {\r\n        return player.createdAsUid !== passingPlayer.createdAsUid\r\n      })\r\n      const playerToWinPossession = chance.pickone(availableTeammates, 1)\r\n      this.record.add(passingPlayer, 'passes ball', this.board.gameTime)\r\n      if (this.pitch.goalPit.left < ball.goalProximity) {\r\n        ball.goalProximity--\r\n      }\r\n      ball.possessedBy = playerToWinPossession.createdAsUid\r\n    } else {\r\n      const availableTeammates = leftPlayers.filter(function(player) {\r\n        return player.createdAsUid !== passingPlayer.createdAsUid\r\n      })\r\n      const playerToWinPossession = chance.pickone(availableTeammates, 1)\r\n      this.record.add(passingPlayer, 'passes ball', this.board.gameTime)\r\n      if (this.pitch.goalPit.right > ball.goalProximity) {\r\n        ball.goalProximity++\r\n      }\r\n      ball.possessedBy = playerToWinPossession.createdAsUid\r\n    }\r\n  }\r\n\r\n  passBlock(opposingPlayer, ball) {\r\n    this.record.add(opposingPlayer, 'pass blocked', this.board.gameTime)\r\n    ball.lastSideTouched = opposingPlayer.homeGoalSide\r\n    ball.possessedBy = opposingPlayer.createdAsUid\r\n  }\r\n\r\n  getsTackled(runningPlayer, randomTackler, ball) {\r\n    randomTackler.opposingActorUid = runningPlayer.createdAsUid\r\n    randomTackler.opposingActorName = runningPlayer.name\r\n    this.record.add(randomTackler, 'tackles', this.board.gameTime)\r\n    ball.possess(randomTackler.createdAsUid)\r\n    ball.lastSideTouched = randomTackler.homeGoalSide\r\n    ball.lastPlayerTouched = randomTackler.createdAsUid\r\n  }\r\n\r\n}"]}