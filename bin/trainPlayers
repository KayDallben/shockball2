#!/usr/bin/env node

const admin = require('firebase-admin')
const FieldValue = admin.firestore.FieldValue

let serviceAccount
if (!process.env.FIREBASE_DATABASE_URL) {
    serviceAccount = require('../firebase-security.json')
    admin.initializeApp({
        credential: admin.credential.cert(serviceAccount),
        databaseURL: 'https://swc-shockball3.firebaseio.com/'
    })
} else {
    admin.initializeApp({
        credential: admin.credential.cert({
            'projectId': process.env.FIREBASE_PROJECT_ID,
            'clientEmail': process.env.FIREBASE_CLIENT_EMAIL,
            'privateKey': process.env.FIREBASE_PRIVATE_KEY,
        }),
        databaseURL: process.env.FIREBASE_DATABASE_URL
    })
}



let db = admin.firestore()

async function init() {
    const startTime = new Date().getTime()
    try {
        const players = await getPlayers()
        const playerCaps = await getPlayerCaps()
        const playersWithCaps = mapDataAndCaps(players, playerCaps)
        for(const player of playersWithCaps) {
            const playerToSave = trainPlayer(player)
            await updatePlayer(playerToSave)
        }
        const endTime = new Date().getTime()
        await recordCron('trained players', startTime, endTime)
    } catch (error) {
        const endTime = new Date().getTime()
        await recordCron('failed trained players', startTime, endTime, error)
    }

}

function recordCron(type, startTime, endTime, error) {
    return db.collection('cronHistory').add({
        completed: FieldValue.serverTimestamp(),
        taskStartTime: new Date(startTime),
        taskEndTime: new Date(endTime),
        type: type,
        error: error ? JSON.stringify(error) : null
    })
}

async function getPlayers() {
    return db.collection('players').get().then((snapshot) => {
        let players = []
        snapshot.forEach((doc) => {
            players.push(doc.data())
        })
        return players
    })
}

async function getPlayerCaps() {
    return db.collection('playerCaps').get().then((snapshot) => {
        let playerCaps = []
        snapshot.forEach((doc) => {
            playerCaps.push(doc.data())
        })
        return playerCaps
    })
}

function mapDataAndCaps(players, playerCaps) {
    let playersPlusCaps = []
    for (var player of players) {
        let playerWithCaps = {}
        Object.assign(playerWithCaps, player)
        for (var playerCap of playerCaps) {
            if (player.shockballPlayerUid === playerCap.shockballPlayerUid) {
                playerWithCaps.blockingCap = playerCap.blocking
                playerWithCaps.throwingCap = playerCap.throwing
                playerWithCaps.passingCap = playerCap.passing
                playerWithCaps.enduranceCap = playerCap.endurance
                playerWithCaps.toughnessCap = playerCap.toughness
                playerWithCaps.visionCap = playerCap.vision
            }
        }
        playersPlusCaps.push(playerWithCaps)
    }
    return playersPlusCaps
}

function decrement(valueToChange, amount, cap) {
    const testValue = valueToChange - amount
    if (testValue <= 0) {
        return 0
    } else {
        if (cap !== 'undefined' && (testValue >= cap)) {
            return cap
        } else {
            return testValue
        }
    }
}

function increment(valueToChange, amount, cap) {
    const testValue = valueToChange + amount
    if (testValue >= 100) {
        return 100
    } else {
        if (cap !== 'undefined' && (testValue >= cap)) {
            return cap
        } else {
            return testValue
        }
    }
}

function trainPlayer(player) {
    //check for training regimen
    if (player.regimen.value === 'Wing') {
        // primary skill passing, secondary endurance and throwing
        player.blocking = decrement(player.blocking, .25, player.blockingCap)
        player.throwing = increment(player.throwing, .5, player.throwingCap)
        player.passing = increment(player.passing, 1, player.passingCap)
        player.endurance = increment(player.endurance, .5, player.enduranceCap)
        player.toughness = decrement(player.toughness, .25, player.toughnessCap)
        player.vision = decrement(player.vision, .25, player.visionCap)
        player.morale = increment(player.morale, 1)
        player.energy = decrement(player.energy, 5)
        player.leadership = increment(player.leadership, .25)
    } else if (player.regimen.value === 'Guard') {
        // primary skill blocking, secondary vision and throwing
        player.blocking = increment(player.blocking, 1.5, player.blockingCap)
        player.throwing = increment(player.throwing, .25, player.throwingCap)
        player.passing = decrement(player.passing, .25, player.passingCap)
        player.endurance = decrement(player.endurance, .25, player.enduranceCap)
        player.toughness = decrement(player.toughness, .25, player.toughnessCap)
        player.vision = increment(player.vision, .25, player.visionCap)
        player.morale = increment(player.morale, 1)
        player.energy = decrement(player.energy, 5)
        player.leadership = increment(player.leadership, .25)
    } else if (player.regimen.value === 'Center') {
        // primary skill vision, secondary toughness and endurance
        player.blocking = decrement(player.blocking, .25, player.blockingCap) 
        player.throwing = decrement(player.throwing, .25, player.throwingCap)
        player.passing = decrement(player.passing, .25, player.passingCap)
        player.endurance = increment(player.endurance, .5, player.enduranceCap)
        player.toughness = increment(player.toughness, 1, player.toughnessCap)
        player.vision = increment(player.vision, .5, player.visionCap)
        player.morale = increment(player.morale, 1)
        player.energy = decrement(player.energy, 5)
		player.leadership = increment(player.leadership, .25)
    } else if (player.regimen.value === 'General') {
        // all skills unchanged with a slow energy recovery
        player.blocking = increment(player.blocking, .0, player.blockingCap) 
        player.throwing = increment(player.throwing, 0, player.throwingCap)
        player.passing = increment(player.passing, .0, player.passingCap)
        player.endurance = increment(player.endurance, .0, player.enduranceCap)
        player.toughness = increment(player.toughness, .0, player.toughnessCap)
        player.vision = increment(player.vision, .0, player.visionCap)
        player.morale = increment(player.morale, 1)
        player.energy = increment(player.energy, 2)
		player.leadership = increment(player.leadership, .25)
    } else if (player.regimen.value === 'Rest') {
        // all skills suffer .25 decay with a fast energy recovery
        player.blocking = decrement(player.blocking, .25, player.blockingCap) 
        player.throwing = decrement(player.throwing, 25, player.throwingCap)
        player.passing = decrement(player.passing, .25, player.passingCap)
        player.endurance = decrement(player.endurance, .25, player.enduranceCap)
        player.toughness = decrement(player.toughness, .25, player.toughnessCap)
        player.vision = decrement(player.vision, .25, player.visionCap)
        player.morale = increment(player.morale, 5)
        player.energy = increment(player.energy, 10)
        player.leadership = increment(player.leadership, .25)
    } else {
        // no training selected
        // all skills suffer .25 decay with a slow energy recovery
        player.blocking = decrement(player.blocking, .25, player.blockingCap) 
        player.throwing = decrement(player.throwing, .25, player.throwingCap)
        player.passing = decrement(player.passing, .25, player.passingCap)
        player.endurance = decrement(player.endurance, .25, player.enduranceCap)
        player.toughness = decrement(player.toughness, .25, player.toughnessCap)
        player.vision = decrement(player.vision, .25, player.visionCap)
        player.morale = decrement(player.morale, .25)
        player.energy = increment(player.energy, 2)
        player.leadership = decrement(player.leadership, 1)
    }
    player = updatePlayerValue(player)
    //we reset the regimen to require daily picking of training
    player.regimen = {
        value: 'none',
        label: 'Please select'
    }
    player.lastUpdated = FieldValue.serverTimestamp()
    //clean up our cap props
    delete player.blockingCap
    delete player.throwingCap
    delete player.passingCap
    delete player.toughnessCap
    delete player.visionCap
    delete player.enduranceCap
    
    return player
}

async function updatePlayer(player) {
    return db.collection('players').doc(player.shockballPlayerUid).update(player)
}

function updatePlayerValue(player) {
    const baseStats = {
        blocking: player.blocking,
        endurance: player.endurance,
        leadership: player.leadership,
        passing: player.passing,
        throwing: player.throwing,
        toughness: player.toughness,
        vision: player.vision
    }
    const playerValue = calculatePlayerValue(baseStats)
    player.marketValue = playerValue.marketValue
    player.rating = playerValue.playerRating
    return player
}

function calculatePlayerValue(baseStats) {
    let playerValue = {
      marketValue: 0,
      playerRating: 0
    }
    let numberStats = 0
    let totalStatValueCount = 0
    for (const [key, value] of Object.entries(baseStats)) {
      numberStats++
      totalStatValueCount += value
    }
    playerValue.playerRating = Math.floor(totalStatValueCount / numberStats)
    playerValue.marketValue = Math.floor(Math.pow(playerValue.playerRating, 1.2) * 60000)
    return playerValue
}
init()
